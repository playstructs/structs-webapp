// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: structs/structs/provider.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { providerAccessPolicy, providerAccessPolicyFromJSON, providerAccessPolicyToJSON } from "./keys";

export const protobufPackage = "structs.structs";

export interface Provider {
  id: string;
  index: number;
  substationId: string;
  rate: Coin | undefined;
  accessPolicy: providerAccessPolicy;
  capacityMinimum: number;
  capacityMaximum: number;
  durationMinimum: number;
  durationMaximum: number;
  providerCancellationPenalty: string;
  consumerCancellationPenalty: string;
  creator: string;
  owner: string;
}

function createBaseProvider(): Provider {
  return {
    id: "",
    index: 0,
    substationId: "",
    rate: undefined,
    accessPolicy: 0,
    capacityMinimum: 0,
    capacityMaximum: 0,
    durationMinimum: 0,
    durationMaximum: 0,
    providerCancellationPenalty: "",
    consumerCancellationPenalty: "",
    creator: "",
    owner: "",
  };
}

export const Provider: MessageFns<Provider> = {
  encode(message: Provider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint64(message.index);
    }
    if (message.substationId !== "") {
      writer.uint32(26).string(message.substationId);
    }
    if (message.rate !== undefined) {
      Coin.encode(message.rate, writer.uint32(34).fork()).join();
    }
    if (message.accessPolicy !== 0) {
      writer.uint32(40).int32(message.accessPolicy);
    }
    if (message.capacityMinimum !== 0) {
      writer.uint32(48).uint64(message.capacityMinimum);
    }
    if (message.capacityMaximum !== 0) {
      writer.uint32(56).uint64(message.capacityMaximum);
    }
    if (message.durationMinimum !== 0) {
      writer.uint32(64).uint64(message.durationMinimum);
    }
    if (message.durationMaximum !== 0) {
      writer.uint32(72).uint64(message.durationMaximum);
    }
    if (message.providerCancellationPenalty !== "") {
      writer.uint32(82).string(message.providerCancellationPenalty);
    }
    if (message.consumerCancellationPenalty !== "") {
      writer.uint32(90).string(message.consumerCancellationPenalty);
    }
    if (message.creator !== "") {
      writer.uint32(98).string(message.creator);
    }
    if (message.owner !== "") {
      writer.uint32(106).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Provider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.substationId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rate = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.accessPolicy = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.capacityMinimum = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.capacityMaximum = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.durationMinimum = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.durationMaximum = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.providerCancellationPenalty = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.consumerCancellationPenalty = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Provider {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      substationId: isSet(object.substationId) ? globalThis.String(object.substationId) : "",
      rate: isSet(object.rate) ? Coin.fromJSON(object.rate) : undefined,
      accessPolicy: isSet(object.accessPolicy) ? providerAccessPolicyFromJSON(object.accessPolicy) : 0,
      capacityMinimum: isSet(object.capacityMinimum) ? globalThis.Number(object.capacityMinimum) : 0,
      capacityMaximum: isSet(object.capacityMaximum) ? globalThis.Number(object.capacityMaximum) : 0,
      durationMinimum: isSet(object.durationMinimum) ? globalThis.Number(object.durationMinimum) : 0,
      durationMaximum: isSet(object.durationMaximum) ? globalThis.Number(object.durationMaximum) : 0,
      providerCancellationPenalty: isSet(object.providerCancellationPenalty)
        ? globalThis.String(object.providerCancellationPenalty)
        : "",
      consumerCancellationPenalty: isSet(object.consumerCancellationPenalty)
        ? globalThis.String(object.consumerCancellationPenalty)
        : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: Provider): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.substationId !== "") {
      obj.substationId = message.substationId;
    }
    if (message.rate !== undefined) {
      obj.rate = Coin.toJSON(message.rate);
    }
    if (message.accessPolicy !== 0) {
      obj.accessPolicy = providerAccessPolicyToJSON(message.accessPolicy);
    }
    if (message.capacityMinimum !== 0) {
      obj.capacityMinimum = Math.round(message.capacityMinimum);
    }
    if (message.capacityMaximum !== 0) {
      obj.capacityMaximum = Math.round(message.capacityMaximum);
    }
    if (message.durationMinimum !== 0) {
      obj.durationMinimum = Math.round(message.durationMinimum);
    }
    if (message.durationMaximum !== 0) {
      obj.durationMaximum = Math.round(message.durationMaximum);
    }
    if (message.providerCancellationPenalty !== "") {
      obj.providerCancellationPenalty = message.providerCancellationPenalty;
    }
    if (message.consumerCancellationPenalty !== "") {
      obj.consumerCancellationPenalty = message.consumerCancellationPenalty;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Provider>, I>>(base?: I): Provider {
    return Provider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Provider>, I>>(object: I): Provider {
    const message = createBaseProvider();
    message.id = object.id ?? "";
    message.index = object.index ?? 0;
    message.substationId = object.substationId ?? "";
    message.rate = (object.rate !== undefined && object.rate !== null) ? Coin.fromPartial(object.rate) : undefined;
    message.accessPolicy = object.accessPolicy ?? 0;
    message.capacityMinimum = object.capacityMinimum ?? 0;
    message.capacityMaximum = object.capacityMaximum ?? 0;
    message.durationMinimum = object.durationMinimum ?? 0;
    message.durationMaximum = object.durationMaximum ?? 0;
    message.providerCancellationPenalty = object.providerCancellationPenalty ?? "";
    message.consumerCancellationPenalty = object.consumerCancellationPenalty ?? "";
    message.creator = object.creator ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
