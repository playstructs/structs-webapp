// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: structs/structs/agreement.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "structs.structs";

export interface Agreement {
  id: string;
  providerId: string;
  allocationId: string;
  capacity: number;
  startBlock: number;
  endBlock: number;
  creator: string;
  owner: string;
}

function createBaseAgreement(): Agreement {
  return { id: "", providerId: "", allocationId: "", capacity: 0, startBlock: 0, endBlock: 0, creator: "", owner: "" };
}

export const Agreement: MessageFns<Agreement> = {
  encode(message: Agreement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.providerId !== "") {
      writer.uint32(18).string(message.providerId);
    }
    if (message.allocationId !== "") {
      writer.uint32(26).string(message.allocationId);
    }
    if (message.capacity !== 0) {
      writer.uint32(32).uint64(message.capacity);
    }
    if (message.startBlock !== 0) {
      writer.uint32(40).uint64(message.startBlock);
    }
    if (message.endBlock !== 0) {
      writer.uint32(48).uint64(message.endBlock);
    }
    if (message.creator !== "") {
      writer.uint32(58).string(message.creator);
    }
    if (message.owner !== "") {
      writer.uint32(66).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Agreement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgreement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.allocationId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.capacity = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startBlock = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.endBlock = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Agreement {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "",
      allocationId: isSet(object.allocationId) ? globalThis.String(object.allocationId) : "",
      capacity: isSet(object.capacity) ? globalThis.Number(object.capacity) : 0,
      startBlock: isSet(object.startBlock) ? globalThis.Number(object.startBlock) : 0,
      endBlock: isSet(object.endBlock) ? globalThis.Number(object.endBlock) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: Agreement): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    if (message.allocationId !== "") {
      obj.allocationId = message.allocationId;
    }
    if (message.capacity !== 0) {
      obj.capacity = Math.round(message.capacity);
    }
    if (message.startBlock !== 0) {
      obj.startBlock = Math.round(message.startBlock);
    }
    if (message.endBlock !== 0) {
      obj.endBlock = Math.round(message.endBlock);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Agreement>, I>>(base?: I): Agreement {
    return Agreement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Agreement>, I>>(object: I): Agreement {
    const message = createBaseAgreement();
    message.id = object.id ?? "";
    message.providerId = object.providerId ?? "";
    message.allocationId = object.allocationId ?? "";
    message.capacity = object.capacity ?? 0;
    message.startBlock = object.startBlock ?? 0;
    message.endBlock = object.endBlock ?? 0;
    message.creator = object.creator ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
