// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: structs/structs/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { InternalAddressAssociation } from "./address";
import { Agreement } from "./agreement";
import { Allocation } from "./allocation";
import { Fleet } from "./fleet";
import { GridAttributes, GridRecord } from "./grid";
import { Guild, GuildMembershipApplication } from "./guild";
import { Infusion } from "./infusion";
import { Params } from "./params";
import { PermissionRecord } from "./permission";
import { Planet, PlanetAttributeRecord, PlanetAttributes } from "./planet";
import { Player, PlayerInventory } from "./player";
import { Provider } from "./provider";
import { Reactor } from "./reactor";
import { Struct, StructAttributeRecord, StructAttributes, StructType } from "./struct";
import { Substation } from "./substation";

export const protobufPackage = "structs.structs";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryBlockHeight {
}

export interface QueryBlockHeightResponse {
  blockHeight: number;
}

export interface QueryGetAddressRequest {
  address: string;
}

export interface QueryAllAddressByPlayerRequest {
  playerId: string;
  pagination: PageRequest | undefined;
}

export interface QueryAllAddressRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAddressResponse {
  address: string;
  playerId: string;
  permissions: number;
}

export interface QueryAllAddressResponse {
  address: QueryAddressResponse[];
  pagination: PageResponse | undefined;
}

export interface QueryGetAgreementRequest {
  id: string;
}

export interface QueryGetAgreementResponse {
  Agreement: Agreement | undefined;
}

export interface QueryAllAgreementRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllAgreementByProviderRequest {
  pagination: PageRequest | undefined;
  providerId: string;
}

export interface QueryAllAgreementResponse {
  Agreement: Agreement[];
  pagination: PageResponse | undefined;
}

export interface QueryGetAllocationRequest {
  id: string;
}

export interface QueryGetAllocationResponse {
  Allocation: Allocation | undefined;
  gridAttributes: GridAttributes | undefined;
}

export interface QueryAllAllocationRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllAllocationBySourceRequest {
  pagination: PageRequest | undefined;
  sourceId: string;
}

export interface QueryAllAllocationByDestinationRequest {
  pagination: PageRequest | undefined;
  destinationId: string;
}

export interface QueryAllAllocationResponse {
  Allocation: Allocation[];
  pagination: PageResponse | undefined;
  status: number[];
}

export interface QueryGetFleetRequest {
  id: string;
}

export interface QueryGetFleetResponse {
  Fleet: Fleet | undefined;
}

export interface QueryGetFleetByIndexRequest {
  index: number;
}

export interface QueryAllFleetRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllFleetResponse {
  Fleet: Fleet[];
  pagination: PageResponse | undefined;
}

export interface QueryGetGridRequest {
  attributeId: string;
}

export interface QueryAllGridRequest {
  pagination: PageRequest | undefined;
}

/** Generic Responses for Permissions */
export interface QueryGetGridResponse {
  gridRecord: GridRecord | undefined;
}

export interface QueryAllGridResponse {
  gridRecords: GridRecord[];
  pagination: PageResponse | undefined;
}

export interface QueryGetGuildRequest {
  id: string;
}

export interface QueryGetGuildResponse {
  Guild: Guild | undefined;
}

export interface QueryAllGuildRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllGuildResponse {
  Guild: Guild[];
  pagination: PageResponse | undefined;
}

export interface QueryGetGuildBankCollateralAddressRequest {
  guildId: string;
}

export interface QueryAllGuildBankCollateralAddressRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllGuildBankCollateralAddressResponse {
  internalAddressAssociation: InternalAddressAssociation[];
  pagination: PageResponse | undefined;
}

export interface QueryGetGuildByBankCollateralAddressRequest {
  address: string;
}

export interface QueryGetGuildMembershipApplicationRequest {
  guildId: string;
  playerId: string;
}

export interface QueryGetGuildMembershipApplicationResponse {
  GuildMembershipApplication: GuildMembershipApplication | undefined;
}

export interface QueryAllGuildMembershipApplicationRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllGuildMembershipApplicationResponse {
  GuildMembershipApplication: GuildMembershipApplication[];
  pagination: PageResponse | undefined;
}

export interface QueryGetInfusionRequest {
  destinationId: string;
  address: string;
}

export interface QueryGetInfusionResponse {
  Infusion: Infusion | undefined;
}

export interface QueryAllInfusionByDestinationRequest {
  destinationId: string;
  pagination: PageRequest | undefined;
}

export interface QueryAllInfusionRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllInfusionResponse {
  Infusion: Infusion[];
  pagination: PageResponse | undefined;
  status: number[];
}

export interface QueryGetPermissionRequest {
  permissionId: string;
}

export interface QueryAllPermissionByObjectRequest {
  objectId: string;
  pagination: PageRequest | undefined;
}

export interface QueryAllPermissionByPlayerRequest {
  playerId: string;
  pagination: PageRequest | undefined;
}

export interface QueryAllPermissionRequest {
  pagination: PageRequest | undefined;
}

/** Generic Responses for Permissions */
export interface QueryGetPermissionResponse {
  permissionRecord: PermissionRecord | undefined;
}

export interface QueryAllPermissionResponse {
  permissionRecords: PermissionRecord[];
  pagination: PageResponse | undefined;
}

export interface QueryGetPlanetRequest {
  id: string;
}

export interface QueryGetPlanetResponse {
  Planet: Planet | undefined;
  gridAttributes: GridAttributes | undefined;
  planetAttributes: PlanetAttributes | undefined;
}

export interface QueryAllPlanetRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllPlanetByPlayerRequest {
  playerId: string;
  pagination: PageRequest | undefined;
}

export interface QueryAllPlanetResponse {
  Planet: Planet[];
  pagination: PageResponse | undefined;
}

export interface QueryGetPlanetAttributeRequest {
  planetId: string;
  attributeType: string;
}

export interface QueryGetPlanetAttributeResponse {
  attribute: number;
}

export interface QueryAllPlanetAttributeRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllPlanetAttributeResponse {
  planetAttributeRecords: PlanetAttributeRecord[];
  pagination: PageResponse | undefined;
}

export interface QueryGetPlayerRequest {
  id: string;
}

export interface QueryGetPlayerResponse {
  Player: Player | undefined;
  gridAttributes: GridAttributes | undefined;
  playerInventory: PlayerInventory | undefined;
  halted: boolean;
}

export interface QueryAllPlayerRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllPlayerResponse {
  Player: Player[];
  pagination: PageResponse | undefined;
}

export interface QueryAllPlayerHaltedRequest {
}

export interface QueryAllPlayerHaltedResponse {
  PlayerId: string[];
}

export interface QueryGetProviderRequest {
  id: string;
}

export interface QueryGetProviderResponse {
  Provider: Provider | undefined;
  gridAttributes: GridAttributes | undefined;
}

export interface QueryAllProviderRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllProviderResponse {
  Provider: Provider[];
  pagination: PageResponse | undefined;
}

export interface QueryGetProviderCollateralAddressRequest {
  providerId: string;
}

export interface QueryAllProviderCollateralAddressRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllProviderCollateralAddressResponse {
  internalAddressAssociation: InternalAddressAssociation[];
  pagination: PageResponse | undefined;
}

export interface QueryGetProviderByCollateralAddressRequest {
  address: string;
}

export interface QueryGetProviderEarningsAddressRequest {
  providerId: string;
}

export interface QueryAllProviderEarningsAddressRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllProviderEarningsAddressResponse {
  internalAddressAssociation: InternalAddressAssociation[];
  pagination: PageResponse | undefined;
}

export interface QueryGetProviderByEarningsAddressRequest {
  address: string;
}

export interface QueryGetReactorRequest {
  id: string;
}

export interface QueryGetReactorResponse {
  Reactor: Reactor | undefined;
  gridAttributes: GridAttributes | undefined;
}

export interface QueryAllReactorRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllReactorResponse {
  Reactor: Reactor[];
  pagination: PageResponse | undefined;
}

export interface QueryGetStructRequest {
  id: string;
}

export interface QueryGetStructResponse {
  Struct: Struct | undefined;
  structAttributes: StructAttributes | undefined;
  gridAttributes: GridAttributes | undefined;
  structDefenders: string[];
}

export interface QueryAllStructRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllStructResponse {
  Struct: Struct[];
  pagination: PageResponse | undefined;
}

export interface QueryGetStructAttributeRequest {
  structId: string;
  attributeType: string;
}

export interface QueryGetStructAttributeResponse {
  attribute: number;
}

export interface QueryAllStructAttributeRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllStructAttributeResponse {
  structAttributeRecords: StructAttributeRecord[];
  pagination: PageResponse | undefined;
}

export interface QueryGetStructTypeRequest {
  id: number;
}

export interface QueryGetStructTypeResponse {
  StructType: StructType | undefined;
}

export interface QueryAllStructTypeRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllStructTypeResponse {
  StructType: StructType[];
  pagination: PageResponse | undefined;
}

export interface QueryGetSubstationRequest {
  id: string;
}

export interface QueryGetSubstationResponse {
  Substation: Substation | undefined;
  gridAttributes: GridAttributes | undefined;
}

export interface QueryAllSubstationRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllSubstationResponse {
  Substation: Substation[];
  pagination: PageResponse | undefined;
}

export interface QueryValidateSignatureRequest {
  address: string;
  message: string;
  proofPubKey: string;
  proofSignature: string;
}

export interface QueryValidateSignatureResponse {
  pubkeyFormatError: boolean;
  signatureFormatError: boolean;
  addressPubkeyMismatch: boolean;
  signatureInvalid: boolean;
  valid: boolean;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryBlockHeight(): QueryBlockHeight {
  return {};
}

export const QueryBlockHeight: MessageFns<QueryBlockHeight> = {
  encode(_: QueryBlockHeight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBlockHeight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBlockHeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryBlockHeight {
    return {};
  },

  toJSON(_: QueryBlockHeight): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBlockHeight>, I>>(base?: I): QueryBlockHeight {
    return QueryBlockHeight.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBlockHeight>, I>>(_: I): QueryBlockHeight {
    const message = createBaseQueryBlockHeight();
    return message;
  },
};

function createBaseQueryBlockHeightResponse(): QueryBlockHeightResponse {
  return { blockHeight: 0 };
}

export const QueryBlockHeightResponse: MessageFns<QueryBlockHeightResponse> = {
  encode(message: QueryBlockHeightResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== 0) {
      writer.uint32(8).uint64(message.blockHeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBlockHeightResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBlockHeightResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockHeight = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBlockHeightResponse {
    return { blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0 };
  },

  toJSON(message: QueryBlockHeightResponse): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBlockHeightResponse>, I>>(base?: I): QueryBlockHeightResponse {
    return QueryBlockHeightResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBlockHeightResponse>, I>>(object: I): QueryBlockHeightResponse {
    const message = createBaseQueryBlockHeightResponse();
    message.blockHeight = object.blockHeight ?? 0;
    return message;
  },
};

function createBaseQueryGetAddressRequest(): QueryGetAddressRequest {
  return { address: "" };
}

export const QueryGetAddressRequest: MessageFns<QueryGetAddressRequest> = {
  encode(message: QueryGetAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAddressRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryGetAddressRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAddressRequest>, I>>(base?: I): QueryGetAddressRequest {
    return QueryGetAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAddressRequest>, I>>(object: I): QueryGetAddressRequest {
    const message = createBaseQueryGetAddressRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryAllAddressByPlayerRequest(): QueryAllAddressByPlayerRequest {
  return { playerId: "", pagination: undefined };
}

export const QueryAllAddressByPlayerRequest: MessageFns<QueryAllAddressByPlayerRequest> = {
  encode(message: QueryAllAddressByPlayerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAddressByPlayerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAddressByPlayerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAddressByPlayerRequest {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllAddressByPlayerRequest): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAddressByPlayerRequest>, I>>(base?: I): QueryAllAddressByPlayerRequest {
    return QueryAllAddressByPlayerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAddressByPlayerRequest>, I>>(
    object: I,
  ): QueryAllAddressByPlayerRequest {
    const message = createBaseQueryAllAddressByPlayerRequest();
    message.playerId = object.playerId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllAddressRequest(): QueryAllAddressRequest {
  return { pagination: undefined };
}

export const QueryAllAddressRequest: MessageFns<QueryAllAddressRequest> = {
  encode(message: QueryAllAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAddressRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllAddressRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAddressRequest>, I>>(base?: I): QueryAllAddressRequest {
    return QueryAllAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAddressRequest>, I>>(object: I): QueryAllAddressRequest {
    const message = createBaseQueryAllAddressRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAddressResponse(): QueryAddressResponse {
  return { address: "", playerId: "", permissions: 0 };
}

export const QueryAddressResponse: MessageFns<QueryAddressResponse> = {
  encode(message: QueryAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.permissions !== 0) {
      writer.uint32(24).uint64(message.permissions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.permissions = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAddressResponse {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      permissions: isSet(object.permissions) ? globalThis.Number(object.permissions) : 0,
    };
  },

  toJSON(message: QueryAddressResponse): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.permissions !== 0) {
      obj.permissions = Math.round(message.permissions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAddressResponse>, I>>(base?: I): QueryAddressResponse {
    return QueryAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAddressResponse>, I>>(object: I): QueryAddressResponse {
    const message = createBaseQueryAddressResponse();
    message.address = object.address ?? "";
    message.playerId = object.playerId ?? "";
    message.permissions = object.permissions ?? 0;
    return message;
  },
};

function createBaseQueryAllAddressResponse(): QueryAllAddressResponse {
  return { address: [], pagination: undefined };
}

export const QueryAllAddressResponse: MessageFns<QueryAllAddressResponse> = {
  encode(message: QueryAllAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.address) {
      QueryAddressResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address.push(QueryAddressResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAddressResponse {
    return {
      address: globalThis.Array.isArray(object?.address)
        ? object.address.map((e: any) => QueryAddressResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllAddressResponse): unknown {
    const obj: any = {};
    if (message.address?.length) {
      obj.address = message.address.map((e) => QueryAddressResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAddressResponse>, I>>(base?: I): QueryAllAddressResponse {
    return QueryAllAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAddressResponse>, I>>(object: I): QueryAllAddressResponse {
    const message = createBaseQueryAllAddressResponse();
    message.address = object.address?.map((e) => QueryAddressResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetAgreementRequest(): QueryGetAgreementRequest {
  return { id: "" };
}

export const QueryGetAgreementRequest: MessageFns<QueryGetAgreementRequest> = {
  encode(message: QueryGetAgreementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAgreementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAgreementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAgreementRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetAgreementRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAgreementRequest>, I>>(base?: I): QueryGetAgreementRequest {
    return QueryGetAgreementRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAgreementRequest>, I>>(object: I): QueryGetAgreementRequest {
    const message = createBaseQueryGetAgreementRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetAgreementResponse(): QueryGetAgreementResponse {
  return { Agreement: undefined };
}

export const QueryGetAgreementResponse: MessageFns<QueryGetAgreementResponse> = {
  encode(message: QueryGetAgreementResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Agreement !== undefined) {
      Agreement.encode(message.Agreement, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAgreementResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAgreementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Agreement = Agreement.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAgreementResponse {
    return { Agreement: isSet(object.Agreement) ? Agreement.fromJSON(object.Agreement) : undefined };
  },

  toJSON(message: QueryGetAgreementResponse): unknown {
    const obj: any = {};
    if (message.Agreement !== undefined) {
      obj.Agreement = Agreement.toJSON(message.Agreement);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAgreementResponse>, I>>(base?: I): QueryGetAgreementResponse {
    return QueryGetAgreementResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAgreementResponse>, I>>(object: I): QueryGetAgreementResponse {
    const message = createBaseQueryGetAgreementResponse();
    message.Agreement = (object.Agreement !== undefined && object.Agreement !== null)
      ? Agreement.fromPartial(object.Agreement)
      : undefined;
    return message;
  },
};

function createBaseQueryAllAgreementRequest(): QueryAllAgreementRequest {
  return { pagination: undefined };
}

export const QueryAllAgreementRequest: MessageFns<QueryAllAgreementRequest> = {
  encode(message: QueryAllAgreementRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAgreementRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAgreementRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAgreementRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllAgreementRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAgreementRequest>, I>>(base?: I): QueryAllAgreementRequest {
    return QueryAllAgreementRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAgreementRequest>, I>>(object: I): QueryAllAgreementRequest {
    const message = createBaseQueryAllAgreementRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllAgreementByProviderRequest(): QueryAllAgreementByProviderRequest {
  return { pagination: undefined, providerId: "" };
}

export const QueryAllAgreementByProviderRequest: MessageFns<QueryAllAgreementByProviderRequest> = {
  encode(message: QueryAllAgreementByProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    if (message.providerId !== "") {
      writer.uint32(18).string(message.providerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAgreementByProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAgreementByProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAgreementByProviderRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "",
    };
  },

  toJSON(message: QueryAllAgreementByProviderRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAgreementByProviderRequest>, I>>(
    base?: I,
  ): QueryAllAgreementByProviderRequest {
    return QueryAllAgreementByProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAgreementByProviderRequest>, I>>(
    object: I,
  ): QueryAllAgreementByProviderRequest {
    const message = createBaseQueryAllAgreementByProviderRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.providerId = object.providerId ?? "";
    return message;
  },
};

function createBaseQueryAllAgreementResponse(): QueryAllAgreementResponse {
  return { Agreement: [], pagination: undefined };
}

export const QueryAllAgreementResponse: MessageFns<QueryAllAgreementResponse> = {
  encode(message: QueryAllAgreementResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Agreement) {
      Agreement.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAgreementResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAgreementResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Agreement.push(Agreement.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAgreementResponse {
    return {
      Agreement: globalThis.Array.isArray(object?.Agreement)
        ? object.Agreement.map((e: any) => Agreement.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllAgreementResponse): unknown {
    const obj: any = {};
    if (message.Agreement?.length) {
      obj.Agreement = message.Agreement.map((e) => Agreement.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAgreementResponse>, I>>(base?: I): QueryAllAgreementResponse {
    return QueryAllAgreementResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAgreementResponse>, I>>(object: I): QueryAllAgreementResponse {
    const message = createBaseQueryAllAgreementResponse();
    message.Agreement = object.Agreement?.map((e) => Agreement.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetAllocationRequest(): QueryGetAllocationRequest {
  return { id: "" };
}

export const QueryGetAllocationRequest: MessageFns<QueryGetAllocationRequest> = {
  encode(message: QueryGetAllocationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAllocationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAllocationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAllocationRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetAllocationRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAllocationRequest>, I>>(base?: I): QueryGetAllocationRequest {
    return QueryGetAllocationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAllocationRequest>, I>>(object: I): QueryGetAllocationRequest {
    const message = createBaseQueryGetAllocationRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetAllocationResponse(): QueryGetAllocationResponse {
  return { Allocation: undefined, gridAttributes: undefined };
}

export const QueryGetAllocationResponse: MessageFns<QueryGetAllocationResponse> = {
  encode(message: QueryGetAllocationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Allocation !== undefined) {
      Allocation.encode(message.Allocation, writer.uint32(10).fork()).join();
    }
    if (message.gridAttributes !== undefined) {
      GridAttributes.encode(message.gridAttributes, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetAllocationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetAllocationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Allocation = Allocation.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gridAttributes = GridAttributes.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetAllocationResponse {
    return {
      Allocation: isSet(object.Allocation) ? Allocation.fromJSON(object.Allocation) : undefined,
      gridAttributes: isSet(object.gridAttributes) ? GridAttributes.fromJSON(object.gridAttributes) : undefined,
    };
  },

  toJSON(message: QueryGetAllocationResponse): unknown {
    const obj: any = {};
    if (message.Allocation !== undefined) {
      obj.Allocation = Allocation.toJSON(message.Allocation);
    }
    if (message.gridAttributes !== undefined) {
      obj.gridAttributes = GridAttributes.toJSON(message.gridAttributes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetAllocationResponse>, I>>(base?: I): QueryGetAllocationResponse {
    return QueryGetAllocationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetAllocationResponse>, I>>(object: I): QueryGetAllocationResponse {
    const message = createBaseQueryGetAllocationResponse();
    message.Allocation = (object.Allocation !== undefined && object.Allocation !== null)
      ? Allocation.fromPartial(object.Allocation)
      : undefined;
    message.gridAttributes = (object.gridAttributes !== undefined && object.gridAttributes !== null)
      ? GridAttributes.fromPartial(object.gridAttributes)
      : undefined;
    return message;
  },
};

function createBaseQueryAllAllocationRequest(): QueryAllAllocationRequest {
  return { pagination: undefined };
}

export const QueryAllAllocationRequest: MessageFns<QueryAllAllocationRequest> = {
  encode(message: QueryAllAllocationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAllocationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAllocationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAllocationRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllAllocationRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAllocationRequest>, I>>(base?: I): QueryAllAllocationRequest {
    return QueryAllAllocationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAllocationRequest>, I>>(object: I): QueryAllAllocationRequest {
    const message = createBaseQueryAllAllocationRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllAllocationBySourceRequest(): QueryAllAllocationBySourceRequest {
  return { pagination: undefined, sourceId: "" };
}

export const QueryAllAllocationBySourceRequest: MessageFns<QueryAllAllocationBySourceRequest> = {
  encode(message: QueryAllAllocationBySourceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    if (message.sourceId !== "") {
      writer.uint32(18).string(message.sourceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAllocationBySourceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAllocationBySourceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAllocationBySourceRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      sourceId: isSet(object.sourceId) ? globalThis.String(object.sourceId) : "",
    };
  },

  toJSON(message: QueryAllAllocationBySourceRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.sourceId !== "") {
      obj.sourceId = message.sourceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAllocationBySourceRequest>, I>>(
    base?: I,
  ): QueryAllAllocationBySourceRequest {
    return QueryAllAllocationBySourceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAllocationBySourceRequest>, I>>(
    object: I,
  ): QueryAllAllocationBySourceRequest {
    const message = createBaseQueryAllAllocationBySourceRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.sourceId = object.sourceId ?? "";
    return message;
  },
};

function createBaseQueryAllAllocationByDestinationRequest(): QueryAllAllocationByDestinationRequest {
  return { pagination: undefined, destinationId: "" };
}

export const QueryAllAllocationByDestinationRequest: MessageFns<QueryAllAllocationByDestinationRequest> = {
  encode(message: QueryAllAllocationByDestinationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    if (message.destinationId !== "") {
      writer.uint32(18).string(message.destinationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAllocationByDestinationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAllocationByDestinationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAllocationByDestinationRequest {
    return {
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "",
    };
  },

  toJSON(message: QueryAllAllocationByDestinationRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAllocationByDestinationRequest>, I>>(
    base?: I,
  ): QueryAllAllocationByDestinationRequest {
    return QueryAllAllocationByDestinationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAllocationByDestinationRequest>, I>>(
    object: I,
  ): QueryAllAllocationByDestinationRequest {
    const message = createBaseQueryAllAllocationByDestinationRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    message.destinationId = object.destinationId ?? "";
    return message;
  },
};

function createBaseQueryAllAllocationResponse(): QueryAllAllocationResponse {
  return { Allocation: [], pagination: undefined, status: [] };
}

export const QueryAllAllocationResponse: MessageFns<QueryAllAllocationResponse> = {
  encode(message: QueryAllAllocationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Allocation) {
      Allocation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    writer.uint32(26).fork();
    for (const v of message.status) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllAllocationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllAllocationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Allocation.push(Allocation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.status.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.status.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllAllocationResponse {
    return {
      Allocation: globalThis.Array.isArray(object?.Allocation)
        ? object.Allocation.map((e: any) => Allocation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      status: globalThis.Array.isArray(object?.status) ? object.status.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: QueryAllAllocationResponse): unknown {
    const obj: any = {};
    if (message.Allocation?.length) {
      obj.Allocation = message.Allocation.map((e) => Allocation.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.status?.length) {
      obj.status = message.status.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllAllocationResponse>, I>>(base?: I): QueryAllAllocationResponse {
    return QueryAllAllocationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllAllocationResponse>, I>>(object: I): QueryAllAllocationResponse {
    const message = createBaseQueryAllAllocationResponse();
    message.Allocation = object.Allocation?.map((e) => Allocation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.status = object.status?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryGetFleetRequest(): QueryGetFleetRequest {
  return { id: "" };
}

export const QueryGetFleetRequest: MessageFns<QueryGetFleetRequest> = {
  encode(message: QueryGetFleetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetFleetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetFleetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetFleetRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetFleetRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetFleetRequest>, I>>(base?: I): QueryGetFleetRequest {
    return QueryGetFleetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetFleetRequest>, I>>(object: I): QueryGetFleetRequest {
    const message = createBaseQueryGetFleetRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetFleetResponse(): QueryGetFleetResponse {
  return { Fleet: undefined };
}

export const QueryGetFleetResponse: MessageFns<QueryGetFleetResponse> = {
  encode(message: QueryGetFleetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Fleet !== undefined) {
      Fleet.encode(message.Fleet, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetFleetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetFleetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Fleet = Fleet.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetFleetResponse {
    return { Fleet: isSet(object.Fleet) ? Fleet.fromJSON(object.Fleet) : undefined };
  },

  toJSON(message: QueryGetFleetResponse): unknown {
    const obj: any = {};
    if (message.Fleet !== undefined) {
      obj.Fleet = Fleet.toJSON(message.Fleet);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetFleetResponse>, I>>(base?: I): QueryGetFleetResponse {
    return QueryGetFleetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetFleetResponse>, I>>(object: I): QueryGetFleetResponse {
    const message = createBaseQueryGetFleetResponse();
    message.Fleet = (object.Fleet !== undefined && object.Fleet !== null) ? Fleet.fromPartial(object.Fleet) : undefined;
    return message;
  },
};

function createBaseQueryGetFleetByIndexRequest(): QueryGetFleetByIndexRequest {
  return { index: 0 };
}

export const QueryGetFleetByIndexRequest: MessageFns<QueryGetFleetByIndexRequest> = {
  encode(message: QueryGetFleetByIndexRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== 0) {
      writer.uint32(8).uint64(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetFleetByIndexRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetFleetByIndexRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetFleetByIndexRequest {
    return { index: isSet(object.index) ? globalThis.Number(object.index) : 0 };
  },

  toJSON(message: QueryGetFleetByIndexRequest): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetFleetByIndexRequest>, I>>(base?: I): QueryGetFleetByIndexRequest {
    return QueryGetFleetByIndexRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetFleetByIndexRequest>, I>>(object: I): QueryGetFleetByIndexRequest {
    const message = createBaseQueryGetFleetByIndexRequest();
    message.index = object.index ?? 0;
    return message;
  },
};

function createBaseQueryAllFleetRequest(): QueryAllFleetRequest {
  return { pagination: undefined };
}

export const QueryAllFleetRequest: MessageFns<QueryAllFleetRequest> = {
  encode(message: QueryAllFleetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllFleetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllFleetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllFleetRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllFleetRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllFleetRequest>, I>>(base?: I): QueryAllFleetRequest {
    return QueryAllFleetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllFleetRequest>, I>>(object: I): QueryAllFleetRequest {
    const message = createBaseQueryAllFleetRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllFleetResponse(): QueryAllFleetResponse {
  return { Fleet: [], pagination: undefined };
}

export const QueryAllFleetResponse: MessageFns<QueryAllFleetResponse> = {
  encode(message: QueryAllFleetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Fleet) {
      Fleet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllFleetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllFleetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Fleet.push(Fleet.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllFleetResponse {
    return {
      Fleet: globalThis.Array.isArray(object?.Fleet) ? object.Fleet.map((e: any) => Fleet.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllFleetResponse): unknown {
    const obj: any = {};
    if (message.Fleet?.length) {
      obj.Fleet = message.Fleet.map((e) => Fleet.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllFleetResponse>, I>>(base?: I): QueryAllFleetResponse {
    return QueryAllFleetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllFleetResponse>, I>>(object: I): QueryAllFleetResponse {
    const message = createBaseQueryAllFleetResponse();
    message.Fleet = object.Fleet?.map((e) => Fleet.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetGridRequest(): QueryGetGridRequest {
  return { attributeId: "" };
}

export const QueryGetGridRequest: MessageFns<QueryGetGridRequest> = {
  encode(message: QueryGetGridRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributeId !== "") {
      writer.uint32(10).string(message.attributeId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetGridRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetGridRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attributeId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetGridRequest {
    return { attributeId: isSet(object.attributeId) ? globalThis.String(object.attributeId) : "" };
  },

  toJSON(message: QueryGetGridRequest): unknown {
    const obj: any = {};
    if (message.attributeId !== "") {
      obj.attributeId = message.attributeId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetGridRequest>, I>>(base?: I): QueryGetGridRequest {
    return QueryGetGridRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetGridRequest>, I>>(object: I): QueryGetGridRequest {
    const message = createBaseQueryGetGridRequest();
    message.attributeId = object.attributeId ?? "";
    return message;
  },
};

function createBaseQueryAllGridRequest(): QueryAllGridRequest {
  return { pagination: undefined };
}

export const QueryAllGridRequest: MessageFns<QueryAllGridRequest> = {
  encode(message: QueryAllGridRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllGridRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllGridRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllGridRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllGridRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllGridRequest>, I>>(base?: I): QueryAllGridRequest {
    return QueryAllGridRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllGridRequest>, I>>(object: I): QueryAllGridRequest {
    const message = createBaseQueryAllGridRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetGridResponse(): QueryGetGridResponse {
  return { gridRecord: undefined };
}

export const QueryGetGridResponse: MessageFns<QueryGetGridResponse> = {
  encode(message: QueryGetGridResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gridRecord !== undefined) {
      GridRecord.encode(message.gridRecord, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetGridResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetGridResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gridRecord = GridRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetGridResponse {
    return { gridRecord: isSet(object.gridRecord) ? GridRecord.fromJSON(object.gridRecord) : undefined };
  },

  toJSON(message: QueryGetGridResponse): unknown {
    const obj: any = {};
    if (message.gridRecord !== undefined) {
      obj.gridRecord = GridRecord.toJSON(message.gridRecord);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetGridResponse>, I>>(base?: I): QueryGetGridResponse {
    return QueryGetGridResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetGridResponse>, I>>(object: I): QueryGetGridResponse {
    const message = createBaseQueryGetGridResponse();
    message.gridRecord = (object.gridRecord !== undefined && object.gridRecord !== null)
      ? GridRecord.fromPartial(object.gridRecord)
      : undefined;
    return message;
  },
};

function createBaseQueryAllGridResponse(): QueryAllGridResponse {
  return { gridRecords: [], pagination: undefined };
}

export const QueryAllGridResponse: MessageFns<QueryAllGridResponse> = {
  encode(message: QueryAllGridResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gridRecords) {
      GridRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllGridResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllGridResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gridRecords.push(GridRecord.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllGridResponse {
    return {
      gridRecords: globalThis.Array.isArray(object?.gridRecords)
        ? object.gridRecords.map((e: any) => GridRecord.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllGridResponse): unknown {
    const obj: any = {};
    if (message.gridRecords?.length) {
      obj.gridRecords = message.gridRecords.map((e) => GridRecord.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllGridResponse>, I>>(base?: I): QueryAllGridResponse {
    return QueryAllGridResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllGridResponse>, I>>(object: I): QueryAllGridResponse {
    const message = createBaseQueryAllGridResponse();
    message.gridRecords = object.gridRecords?.map((e) => GridRecord.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetGuildRequest(): QueryGetGuildRequest {
  return { id: "" };
}

export const QueryGetGuildRequest: MessageFns<QueryGetGuildRequest> = {
  encode(message: QueryGetGuildRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetGuildRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetGuildRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetGuildRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetGuildRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetGuildRequest>, I>>(base?: I): QueryGetGuildRequest {
    return QueryGetGuildRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetGuildRequest>, I>>(object: I): QueryGetGuildRequest {
    const message = createBaseQueryGetGuildRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetGuildResponse(): QueryGetGuildResponse {
  return { Guild: undefined };
}

export const QueryGetGuildResponse: MessageFns<QueryGetGuildResponse> = {
  encode(message: QueryGetGuildResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Guild !== undefined) {
      Guild.encode(message.Guild, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetGuildResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetGuildResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Guild = Guild.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetGuildResponse {
    return { Guild: isSet(object.Guild) ? Guild.fromJSON(object.Guild) : undefined };
  },

  toJSON(message: QueryGetGuildResponse): unknown {
    const obj: any = {};
    if (message.Guild !== undefined) {
      obj.Guild = Guild.toJSON(message.Guild);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetGuildResponse>, I>>(base?: I): QueryGetGuildResponse {
    return QueryGetGuildResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetGuildResponse>, I>>(object: I): QueryGetGuildResponse {
    const message = createBaseQueryGetGuildResponse();
    message.Guild = (object.Guild !== undefined && object.Guild !== null) ? Guild.fromPartial(object.Guild) : undefined;
    return message;
  },
};

function createBaseQueryAllGuildRequest(): QueryAllGuildRequest {
  return { pagination: undefined };
}

export const QueryAllGuildRequest: MessageFns<QueryAllGuildRequest> = {
  encode(message: QueryAllGuildRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllGuildRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllGuildRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllGuildRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllGuildRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllGuildRequest>, I>>(base?: I): QueryAllGuildRequest {
    return QueryAllGuildRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllGuildRequest>, I>>(object: I): QueryAllGuildRequest {
    const message = createBaseQueryAllGuildRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllGuildResponse(): QueryAllGuildResponse {
  return { Guild: [], pagination: undefined };
}

export const QueryAllGuildResponse: MessageFns<QueryAllGuildResponse> = {
  encode(message: QueryAllGuildResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Guild) {
      Guild.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllGuildResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllGuildResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Guild.push(Guild.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllGuildResponse {
    return {
      Guild: globalThis.Array.isArray(object?.Guild) ? object.Guild.map((e: any) => Guild.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllGuildResponse): unknown {
    const obj: any = {};
    if (message.Guild?.length) {
      obj.Guild = message.Guild.map((e) => Guild.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllGuildResponse>, I>>(base?: I): QueryAllGuildResponse {
    return QueryAllGuildResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllGuildResponse>, I>>(object: I): QueryAllGuildResponse {
    const message = createBaseQueryAllGuildResponse();
    message.Guild = object.Guild?.map((e) => Guild.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetGuildBankCollateralAddressRequest(): QueryGetGuildBankCollateralAddressRequest {
  return { guildId: "" };
}

export const QueryGetGuildBankCollateralAddressRequest: MessageFns<QueryGetGuildBankCollateralAddressRequest> = {
  encode(message: QueryGetGuildBankCollateralAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildId !== "") {
      writer.uint32(10).string(message.guildId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetGuildBankCollateralAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetGuildBankCollateralAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetGuildBankCollateralAddressRequest {
    return { guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "" };
  },

  toJSON(message: QueryGetGuildBankCollateralAddressRequest): unknown {
    const obj: any = {};
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetGuildBankCollateralAddressRequest>, I>>(
    base?: I,
  ): QueryGetGuildBankCollateralAddressRequest {
    return QueryGetGuildBankCollateralAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetGuildBankCollateralAddressRequest>, I>>(
    object: I,
  ): QueryGetGuildBankCollateralAddressRequest {
    const message = createBaseQueryGetGuildBankCollateralAddressRequest();
    message.guildId = object.guildId ?? "";
    return message;
  },
};

function createBaseQueryAllGuildBankCollateralAddressRequest(): QueryAllGuildBankCollateralAddressRequest {
  return { pagination: undefined };
}

export const QueryAllGuildBankCollateralAddressRequest: MessageFns<QueryAllGuildBankCollateralAddressRequest> = {
  encode(message: QueryAllGuildBankCollateralAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllGuildBankCollateralAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllGuildBankCollateralAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllGuildBankCollateralAddressRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllGuildBankCollateralAddressRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllGuildBankCollateralAddressRequest>, I>>(
    base?: I,
  ): QueryAllGuildBankCollateralAddressRequest {
    return QueryAllGuildBankCollateralAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllGuildBankCollateralAddressRequest>, I>>(
    object: I,
  ): QueryAllGuildBankCollateralAddressRequest {
    const message = createBaseQueryAllGuildBankCollateralAddressRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllGuildBankCollateralAddressResponse(): QueryAllGuildBankCollateralAddressResponse {
  return { internalAddressAssociation: [], pagination: undefined };
}

export const QueryAllGuildBankCollateralAddressResponse: MessageFns<QueryAllGuildBankCollateralAddressResponse> = {
  encode(message: QueryAllGuildBankCollateralAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.internalAddressAssociation) {
      InternalAddressAssociation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllGuildBankCollateralAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllGuildBankCollateralAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.internalAddressAssociation.push(InternalAddressAssociation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllGuildBankCollateralAddressResponse {
    return {
      internalAddressAssociation: globalThis.Array.isArray(object?.internalAddressAssociation)
        ? object.internalAddressAssociation.map((e: any) => InternalAddressAssociation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllGuildBankCollateralAddressResponse): unknown {
    const obj: any = {};
    if (message.internalAddressAssociation?.length) {
      obj.internalAddressAssociation = message.internalAddressAssociation.map((e) =>
        InternalAddressAssociation.toJSON(e)
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllGuildBankCollateralAddressResponse>, I>>(
    base?: I,
  ): QueryAllGuildBankCollateralAddressResponse {
    return QueryAllGuildBankCollateralAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllGuildBankCollateralAddressResponse>, I>>(
    object: I,
  ): QueryAllGuildBankCollateralAddressResponse {
    const message = createBaseQueryAllGuildBankCollateralAddressResponse();
    message.internalAddressAssociation =
      object.internalAddressAssociation?.map((e) => InternalAddressAssociation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetGuildByBankCollateralAddressRequest(): QueryGetGuildByBankCollateralAddressRequest {
  return { address: "" };
}

export const QueryGetGuildByBankCollateralAddressRequest: MessageFns<QueryGetGuildByBankCollateralAddressRequest> = {
  encode(
    message: QueryGetGuildByBankCollateralAddressRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetGuildByBankCollateralAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetGuildByBankCollateralAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetGuildByBankCollateralAddressRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryGetGuildByBankCollateralAddressRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetGuildByBankCollateralAddressRequest>, I>>(
    base?: I,
  ): QueryGetGuildByBankCollateralAddressRequest {
    return QueryGetGuildByBankCollateralAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetGuildByBankCollateralAddressRequest>, I>>(
    object: I,
  ): QueryGetGuildByBankCollateralAddressRequest {
    const message = createBaseQueryGetGuildByBankCollateralAddressRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryGetGuildMembershipApplicationRequest(): QueryGetGuildMembershipApplicationRequest {
  return { guildId: "", playerId: "" };
}

export const QueryGetGuildMembershipApplicationRequest: MessageFns<QueryGetGuildMembershipApplicationRequest> = {
  encode(message: QueryGetGuildMembershipApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildId !== "") {
      writer.uint32(10).string(message.guildId);
    }
    if (message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetGuildMembershipApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetGuildMembershipApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetGuildMembershipApplicationRequest {
    return {
      guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "",
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
    };
  },

  toJSON(message: QueryGetGuildMembershipApplicationRequest): unknown {
    const obj: any = {};
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetGuildMembershipApplicationRequest>, I>>(
    base?: I,
  ): QueryGetGuildMembershipApplicationRequest {
    return QueryGetGuildMembershipApplicationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetGuildMembershipApplicationRequest>, I>>(
    object: I,
  ): QueryGetGuildMembershipApplicationRequest {
    const message = createBaseQueryGetGuildMembershipApplicationRequest();
    message.guildId = object.guildId ?? "";
    message.playerId = object.playerId ?? "";
    return message;
  },
};

function createBaseQueryGetGuildMembershipApplicationResponse(): QueryGetGuildMembershipApplicationResponse {
  return { GuildMembershipApplication: undefined };
}

export const QueryGetGuildMembershipApplicationResponse: MessageFns<QueryGetGuildMembershipApplicationResponse> = {
  encode(message: QueryGetGuildMembershipApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.GuildMembershipApplication !== undefined) {
      GuildMembershipApplication.encode(message.GuildMembershipApplication, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetGuildMembershipApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetGuildMembershipApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.GuildMembershipApplication = GuildMembershipApplication.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetGuildMembershipApplicationResponse {
    return {
      GuildMembershipApplication: isSet(object.GuildMembershipApplication)
        ? GuildMembershipApplication.fromJSON(object.GuildMembershipApplication)
        : undefined,
    };
  },

  toJSON(message: QueryGetGuildMembershipApplicationResponse): unknown {
    const obj: any = {};
    if (message.GuildMembershipApplication !== undefined) {
      obj.GuildMembershipApplication = GuildMembershipApplication.toJSON(message.GuildMembershipApplication);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetGuildMembershipApplicationResponse>, I>>(
    base?: I,
  ): QueryGetGuildMembershipApplicationResponse {
    return QueryGetGuildMembershipApplicationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetGuildMembershipApplicationResponse>, I>>(
    object: I,
  ): QueryGetGuildMembershipApplicationResponse {
    const message = createBaseQueryGetGuildMembershipApplicationResponse();
    message.GuildMembershipApplication =
      (object.GuildMembershipApplication !== undefined && object.GuildMembershipApplication !== null)
        ? GuildMembershipApplication.fromPartial(object.GuildMembershipApplication)
        : undefined;
    return message;
  },
};

function createBaseQueryAllGuildMembershipApplicationRequest(): QueryAllGuildMembershipApplicationRequest {
  return { pagination: undefined };
}

export const QueryAllGuildMembershipApplicationRequest: MessageFns<QueryAllGuildMembershipApplicationRequest> = {
  encode(message: QueryAllGuildMembershipApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllGuildMembershipApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllGuildMembershipApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllGuildMembershipApplicationRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllGuildMembershipApplicationRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllGuildMembershipApplicationRequest>, I>>(
    base?: I,
  ): QueryAllGuildMembershipApplicationRequest {
    return QueryAllGuildMembershipApplicationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllGuildMembershipApplicationRequest>, I>>(
    object: I,
  ): QueryAllGuildMembershipApplicationRequest {
    const message = createBaseQueryAllGuildMembershipApplicationRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllGuildMembershipApplicationResponse(): QueryAllGuildMembershipApplicationResponse {
  return { GuildMembershipApplication: [], pagination: undefined };
}

export const QueryAllGuildMembershipApplicationResponse: MessageFns<QueryAllGuildMembershipApplicationResponse> = {
  encode(message: QueryAllGuildMembershipApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.GuildMembershipApplication) {
      GuildMembershipApplication.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllGuildMembershipApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllGuildMembershipApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.GuildMembershipApplication.push(GuildMembershipApplication.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllGuildMembershipApplicationResponse {
    return {
      GuildMembershipApplication: globalThis.Array.isArray(object?.GuildMembershipApplication)
        ? object.GuildMembershipApplication.map((e: any) => GuildMembershipApplication.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllGuildMembershipApplicationResponse): unknown {
    const obj: any = {};
    if (message.GuildMembershipApplication?.length) {
      obj.GuildMembershipApplication = message.GuildMembershipApplication.map((e) =>
        GuildMembershipApplication.toJSON(e)
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllGuildMembershipApplicationResponse>, I>>(
    base?: I,
  ): QueryAllGuildMembershipApplicationResponse {
    return QueryAllGuildMembershipApplicationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllGuildMembershipApplicationResponse>, I>>(
    object: I,
  ): QueryAllGuildMembershipApplicationResponse {
    const message = createBaseQueryAllGuildMembershipApplicationResponse();
    message.GuildMembershipApplication =
      object.GuildMembershipApplication?.map((e) => GuildMembershipApplication.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetInfusionRequest(): QueryGetInfusionRequest {
  return { destinationId: "", address: "" };
}

export const QueryGetInfusionRequest: MessageFns<QueryGetInfusionRequest> = {
  encode(message: QueryGetInfusionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationId !== "") {
      writer.uint32(10).string(message.destinationId);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetInfusionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetInfusionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetInfusionRequest {
    return {
      destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: QueryGetInfusionRequest): unknown {
    const obj: any = {};
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetInfusionRequest>, I>>(base?: I): QueryGetInfusionRequest {
    return QueryGetInfusionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetInfusionRequest>, I>>(object: I): QueryGetInfusionRequest {
    const message = createBaseQueryGetInfusionRequest();
    message.destinationId = object.destinationId ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryGetInfusionResponse(): QueryGetInfusionResponse {
  return { Infusion: undefined };
}

export const QueryGetInfusionResponse: MessageFns<QueryGetInfusionResponse> = {
  encode(message: QueryGetInfusionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Infusion !== undefined) {
      Infusion.encode(message.Infusion, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetInfusionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetInfusionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Infusion = Infusion.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetInfusionResponse {
    return { Infusion: isSet(object.Infusion) ? Infusion.fromJSON(object.Infusion) : undefined };
  },

  toJSON(message: QueryGetInfusionResponse): unknown {
    const obj: any = {};
    if (message.Infusion !== undefined) {
      obj.Infusion = Infusion.toJSON(message.Infusion);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetInfusionResponse>, I>>(base?: I): QueryGetInfusionResponse {
    return QueryGetInfusionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetInfusionResponse>, I>>(object: I): QueryGetInfusionResponse {
    const message = createBaseQueryGetInfusionResponse();
    message.Infusion = (object.Infusion !== undefined && object.Infusion !== null)
      ? Infusion.fromPartial(object.Infusion)
      : undefined;
    return message;
  },
};

function createBaseQueryAllInfusionByDestinationRequest(): QueryAllInfusionByDestinationRequest {
  return { destinationId: "", pagination: undefined };
}

export const QueryAllInfusionByDestinationRequest: MessageFns<QueryAllInfusionByDestinationRequest> = {
  encode(message: QueryAllInfusionByDestinationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationId !== "") {
      writer.uint32(10).string(message.destinationId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllInfusionByDestinationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllInfusionByDestinationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllInfusionByDestinationRequest {
    return {
      destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllInfusionByDestinationRequest): unknown {
    const obj: any = {};
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllInfusionByDestinationRequest>, I>>(
    base?: I,
  ): QueryAllInfusionByDestinationRequest {
    return QueryAllInfusionByDestinationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllInfusionByDestinationRequest>, I>>(
    object: I,
  ): QueryAllInfusionByDestinationRequest {
    const message = createBaseQueryAllInfusionByDestinationRequest();
    message.destinationId = object.destinationId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllInfusionRequest(): QueryAllInfusionRequest {
  return { pagination: undefined };
}

export const QueryAllInfusionRequest: MessageFns<QueryAllInfusionRequest> = {
  encode(message: QueryAllInfusionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllInfusionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllInfusionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllInfusionRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllInfusionRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllInfusionRequest>, I>>(base?: I): QueryAllInfusionRequest {
    return QueryAllInfusionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllInfusionRequest>, I>>(object: I): QueryAllInfusionRequest {
    const message = createBaseQueryAllInfusionRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllInfusionResponse(): QueryAllInfusionResponse {
  return { Infusion: [], pagination: undefined, status: [] };
}

export const QueryAllInfusionResponse: MessageFns<QueryAllInfusionResponse> = {
  encode(message: QueryAllInfusionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Infusion) {
      Infusion.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    writer.uint32(26).fork();
    for (const v of message.status) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllInfusionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllInfusionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Infusion.push(Infusion.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.status.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.status.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllInfusionResponse {
    return {
      Infusion: globalThis.Array.isArray(object?.Infusion) ? object.Infusion.map((e: any) => Infusion.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      status: globalThis.Array.isArray(object?.status) ? object.status.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: QueryAllInfusionResponse): unknown {
    const obj: any = {};
    if (message.Infusion?.length) {
      obj.Infusion = message.Infusion.map((e) => Infusion.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.status?.length) {
      obj.status = message.status.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllInfusionResponse>, I>>(base?: I): QueryAllInfusionResponse {
    return QueryAllInfusionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllInfusionResponse>, I>>(object: I): QueryAllInfusionResponse {
    const message = createBaseQueryAllInfusionResponse();
    message.Infusion = object.Infusion?.map((e) => Infusion.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.status = object.status?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryGetPermissionRequest(): QueryGetPermissionRequest {
  return { permissionId: "" };
}

export const QueryGetPermissionRequest: MessageFns<QueryGetPermissionRequest> = {
  encode(message: QueryGetPermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionId !== "") {
      writer.uint32(10).string(message.permissionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permissionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPermissionRequest {
    return { permissionId: isSet(object.permissionId) ? globalThis.String(object.permissionId) : "" };
  },

  toJSON(message: QueryGetPermissionRequest): unknown {
    const obj: any = {};
    if (message.permissionId !== "") {
      obj.permissionId = message.permissionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPermissionRequest>, I>>(base?: I): QueryGetPermissionRequest {
    return QueryGetPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPermissionRequest>, I>>(object: I): QueryGetPermissionRequest {
    const message = createBaseQueryGetPermissionRequest();
    message.permissionId = object.permissionId ?? "";
    return message;
  },
};

function createBaseQueryAllPermissionByObjectRequest(): QueryAllPermissionByObjectRequest {
  return { objectId: "", pagination: undefined };
}

export const QueryAllPermissionByObjectRequest: MessageFns<QueryAllPermissionByObjectRequest> = {
  encode(message: QueryAllPermissionByObjectRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.objectId !== "") {
      writer.uint32(10).string(message.objectId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPermissionByObjectRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPermissionByObjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.objectId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPermissionByObjectRequest {
    return {
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllPermissionByObjectRequest): unknown {
    const obj: any = {};
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPermissionByObjectRequest>, I>>(
    base?: I,
  ): QueryAllPermissionByObjectRequest {
    return QueryAllPermissionByObjectRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPermissionByObjectRequest>, I>>(
    object: I,
  ): QueryAllPermissionByObjectRequest {
    const message = createBaseQueryAllPermissionByObjectRequest();
    message.objectId = object.objectId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPermissionByPlayerRequest(): QueryAllPermissionByPlayerRequest {
  return { playerId: "", pagination: undefined };
}

export const QueryAllPermissionByPlayerRequest: MessageFns<QueryAllPermissionByPlayerRequest> = {
  encode(message: QueryAllPermissionByPlayerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPermissionByPlayerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPermissionByPlayerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPermissionByPlayerRequest {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllPermissionByPlayerRequest): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPermissionByPlayerRequest>, I>>(
    base?: I,
  ): QueryAllPermissionByPlayerRequest {
    return QueryAllPermissionByPlayerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPermissionByPlayerRequest>, I>>(
    object: I,
  ): QueryAllPermissionByPlayerRequest {
    const message = createBaseQueryAllPermissionByPlayerRequest();
    message.playerId = object.playerId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPermissionRequest(): QueryAllPermissionRequest {
  return { pagination: undefined };
}

export const QueryAllPermissionRequest: MessageFns<QueryAllPermissionRequest> = {
  encode(message: QueryAllPermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPermissionRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllPermissionRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPermissionRequest>, I>>(base?: I): QueryAllPermissionRequest {
    return QueryAllPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPermissionRequest>, I>>(object: I): QueryAllPermissionRequest {
    const message = createBaseQueryAllPermissionRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetPermissionResponse(): QueryGetPermissionResponse {
  return { permissionRecord: undefined };
}

export const QueryGetPermissionResponse: MessageFns<QueryGetPermissionResponse> = {
  encode(message: QueryGetPermissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionRecord !== undefined) {
      PermissionRecord.encode(message.permissionRecord, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPermissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permissionRecord = PermissionRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPermissionResponse {
    return {
      permissionRecord: isSet(object.permissionRecord) ? PermissionRecord.fromJSON(object.permissionRecord) : undefined,
    };
  },

  toJSON(message: QueryGetPermissionResponse): unknown {
    const obj: any = {};
    if (message.permissionRecord !== undefined) {
      obj.permissionRecord = PermissionRecord.toJSON(message.permissionRecord);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPermissionResponse>, I>>(base?: I): QueryGetPermissionResponse {
    return QueryGetPermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPermissionResponse>, I>>(object: I): QueryGetPermissionResponse {
    const message = createBaseQueryGetPermissionResponse();
    message.permissionRecord = (object.permissionRecord !== undefined && object.permissionRecord !== null)
      ? PermissionRecord.fromPartial(object.permissionRecord)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPermissionResponse(): QueryAllPermissionResponse {
  return { permissionRecords: [], pagination: undefined };
}

export const QueryAllPermissionResponse: MessageFns<QueryAllPermissionResponse> = {
  encode(message: QueryAllPermissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.permissionRecords) {
      PermissionRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPermissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permissionRecords.push(PermissionRecord.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPermissionResponse {
    return {
      permissionRecords: globalThis.Array.isArray(object?.permissionRecords)
        ? object.permissionRecords.map((e: any) => PermissionRecord.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllPermissionResponse): unknown {
    const obj: any = {};
    if (message.permissionRecords?.length) {
      obj.permissionRecords = message.permissionRecords.map((e) => PermissionRecord.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPermissionResponse>, I>>(base?: I): QueryAllPermissionResponse {
    return QueryAllPermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPermissionResponse>, I>>(object: I): QueryAllPermissionResponse {
    const message = createBaseQueryAllPermissionResponse();
    message.permissionRecords = object.permissionRecords?.map((e) => PermissionRecord.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetPlanetRequest(): QueryGetPlanetRequest {
  return { id: "" };
}

export const QueryGetPlanetRequest: MessageFns<QueryGetPlanetRequest> = {
  encode(message: QueryGetPlanetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPlanetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPlanetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPlanetRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetPlanetRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPlanetRequest>, I>>(base?: I): QueryGetPlanetRequest {
    return QueryGetPlanetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPlanetRequest>, I>>(object: I): QueryGetPlanetRequest {
    const message = createBaseQueryGetPlanetRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetPlanetResponse(): QueryGetPlanetResponse {
  return { Planet: undefined, gridAttributes: undefined, planetAttributes: undefined };
}

export const QueryGetPlanetResponse: MessageFns<QueryGetPlanetResponse> = {
  encode(message: QueryGetPlanetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Planet !== undefined) {
      Planet.encode(message.Planet, writer.uint32(10).fork()).join();
    }
    if (message.gridAttributes !== undefined) {
      GridAttributes.encode(message.gridAttributes, writer.uint32(18).fork()).join();
    }
    if (message.planetAttributes !== undefined) {
      PlanetAttributes.encode(message.planetAttributes, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPlanetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPlanetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Planet = Planet.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gridAttributes = GridAttributes.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.planetAttributes = PlanetAttributes.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPlanetResponse {
    return {
      Planet: isSet(object.Planet) ? Planet.fromJSON(object.Planet) : undefined,
      gridAttributes: isSet(object.gridAttributes) ? GridAttributes.fromJSON(object.gridAttributes) : undefined,
      planetAttributes: isSet(object.planetAttributes) ? PlanetAttributes.fromJSON(object.planetAttributes) : undefined,
    };
  },

  toJSON(message: QueryGetPlanetResponse): unknown {
    const obj: any = {};
    if (message.Planet !== undefined) {
      obj.Planet = Planet.toJSON(message.Planet);
    }
    if (message.gridAttributes !== undefined) {
      obj.gridAttributes = GridAttributes.toJSON(message.gridAttributes);
    }
    if (message.planetAttributes !== undefined) {
      obj.planetAttributes = PlanetAttributes.toJSON(message.planetAttributes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPlanetResponse>, I>>(base?: I): QueryGetPlanetResponse {
    return QueryGetPlanetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPlanetResponse>, I>>(object: I): QueryGetPlanetResponse {
    const message = createBaseQueryGetPlanetResponse();
    message.Planet = (object.Planet !== undefined && object.Planet !== null)
      ? Planet.fromPartial(object.Planet)
      : undefined;
    message.gridAttributes = (object.gridAttributes !== undefined && object.gridAttributes !== null)
      ? GridAttributes.fromPartial(object.gridAttributes)
      : undefined;
    message.planetAttributes = (object.planetAttributes !== undefined && object.planetAttributes !== null)
      ? PlanetAttributes.fromPartial(object.planetAttributes)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPlanetRequest(): QueryAllPlanetRequest {
  return { pagination: undefined };
}

export const QueryAllPlanetRequest: MessageFns<QueryAllPlanetRequest> = {
  encode(message: QueryAllPlanetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPlanetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPlanetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPlanetRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllPlanetRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPlanetRequest>, I>>(base?: I): QueryAllPlanetRequest {
    return QueryAllPlanetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPlanetRequest>, I>>(object: I): QueryAllPlanetRequest {
    const message = createBaseQueryAllPlanetRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPlanetByPlayerRequest(): QueryAllPlanetByPlayerRequest {
  return { playerId: "", pagination: undefined };
}

export const QueryAllPlanetByPlayerRequest: MessageFns<QueryAllPlanetByPlayerRequest> = {
  encode(message: QueryAllPlanetByPlayerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPlanetByPlayerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPlanetByPlayerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPlanetByPlayerRequest {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllPlanetByPlayerRequest): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPlanetByPlayerRequest>, I>>(base?: I): QueryAllPlanetByPlayerRequest {
    return QueryAllPlanetByPlayerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPlanetByPlayerRequest>, I>>(
    object: I,
  ): QueryAllPlanetByPlayerRequest {
    const message = createBaseQueryAllPlanetByPlayerRequest();
    message.playerId = object.playerId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPlanetResponse(): QueryAllPlanetResponse {
  return { Planet: [], pagination: undefined };
}

export const QueryAllPlanetResponse: MessageFns<QueryAllPlanetResponse> = {
  encode(message: QueryAllPlanetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Planet) {
      Planet.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPlanetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPlanetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Planet.push(Planet.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPlanetResponse {
    return {
      Planet: globalThis.Array.isArray(object?.Planet) ? object.Planet.map((e: any) => Planet.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllPlanetResponse): unknown {
    const obj: any = {};
    if (message.Planet?.length) {
      obj.Planet = message.Planet.map((e) => Planet.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPlanetResponse>, I>>(base?: I): QueryAllPlanetResponse {
    return QueryAllPlanetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPlanetResponse>, I>>(object: I): QueryAllPlanetResponse {
    const message = createBaseQueryAllPlanetResponse();
    message.Planet = object.Planet?.map((e) => Planet.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetPlanetAttributeRequest(): QueryGetPlanetAttributeRequest {
  return { planetId: "", attributeType: "" };
}

export const QueryGetPlanetAttributeRequest: MessageFns<QueryGetPlanetAttributeRequest> = {
  encode(message: QueryGetPlanetAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.planetId !== "") {
      writer.uint32(10).string(message.planetId);
    }
    if (message.attributeType !== "") {
      writer.uint32(18).string(message.attributeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPlanetAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPlanetAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.planetId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attributeType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPlanetAttributeRequest {
    return {
      planetId: isSet(object.planetId) ? globalThis.String(object.planetId) : "",
      attributeType: isSet(object.attributeType) ? globalThis.String(object.attributeType) : "",
    };
  },

  toJSON(message: QueryGetPlanetAttributeRequest): unknown {
    const obj: any = {};
    if (message.planetId !== "") {
      obj.planetId = message.planetId;
    }
    if (message.attributeType !== "") {
      obj.attributeType = message.attributeType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPlanetAttributeRequest>, I>>(base?: I): QueryGetPlanetAttributeRequest {
    return QueryGetPlanetAttributeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPlanetAttributeRequest>, I>>(
    object: I,
  ): QueryGetPlanetAttributeRequest {
    const message = createBaseQueryGetPlanetAttributeRequest();
    message.planetId = object.planetId ?? "";
    message.attributeType = object.attributeType ?? "";
    return message;
  },
};

function createBaseQueryGetPlanetAttributeResponse(): QueryGetPlanetAttributeResponse {
  return { attribute: 0 };
}

export const QueryGetPlanetAttributeResponse: MessageFns<QueryGetPlanetAttributeResponse> = {
  encode(message: QueryGetPlanetAttributeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attribute !== 0) {
      writer.uint32(8).uint64(message.attribute);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPlanetAttributeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPlanetAttributeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.attribute = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPlanetAttributeResponse {
    return { attribute: isSet(object.attribute) ? globalThis.Number(object.attribute) : 0 };
  },

  toJSON(message: QueryGetPlanetAttributeResponse): unknown {
    const obj: any = {};
    if (message.attribute !== 0) {
      obj.attribute = Math.round(message.attribute);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPlanetAttributeResponse>, I>>(base?: I): QueryGetPlanetAttributeResponse {
    return QueryGetPlanetAttributeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPlanetAttributeResponse>, I>>(
    object: I,
  ): QueryGetPlanetAttributeResponse {
    const message = createBaseQueryGetPlanetAttributeResponse();
    message.attribute = object.attribute ?? 0;
    return message;
  },
};

function createBaseQueryAllPlanetAttributeRequest(): QueryAllPlanetAttributeRequest {
  return { pagination: undefined };
}

export const QueryAllPlanetAttributeRequest: MessageFns<QueryAllPlanetAttributeRequest> = {
  encode(message: QueryAllPlanetAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPlanetAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPlanetAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPlanetAttributeRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllPlanetAttributeRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPlanetAttributeRequest>, I>>(base?: I): QueryAllPlanetAttributeRequest {
    return QueryAllPlanetAttributeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPlanetAttributeRequest>, I>>(
    object: I,
  ): QueryAllPlanetAttributeRequest {
    const message = createBaseQueryAllPlanetAttributeRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPlanetAttributeResponse(): QueryAllPlanetAttributeResponse {
  return { planetAttributeRecords: [], pagination: undefined };
}

export const QueryAllPlanetAttributeResponse: MessageFns<QueryAllPlanetAttributeResponse> = {
  encode(message: QueryAllPlanetAttributeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.planetAttributeRecords) {
      PlanetAttributeRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPlanetAttributeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPlanetAttributeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.planetAttributeRecords.push(PlanetAttributeRecord.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPlanetAttributeResponse {
    return {
      planetAttributeRecords: globalThis.Array.isArray(object?.planetAttributeRecords)
        ? object.planetAttributeRecords.map((e: any) => PlanetAttributeRecord.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllPlanetAttributeResponse): unknown {
    const obj: any = {};
    if (message.planetAttributeRecords?.length) {
      obj.planetAttributeRecords = message.planetAttributeRecords.map((e) => PlanetAttributeRecord.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPlanetAttributeResponse>, I>>(base?: I): QueryAllPlanetAttributeResponse {
    return QueryAllPlanetAttributeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPlanetAttributeResponse>, I>>(
    object: I,
  ): QueryAllPlanetAttributeResponse {
    const message = createBaseQueryAllPlanetAttributeResponse();
    message.planetAttributeRecords = object.planetAttributeRecords?.map((e) => PlanetAttributeRecord.fromPartial(e)) ||
      [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetPlayerRequest(): QueryGetPlayerRequest {
  return { id: "" };
}

export const QueryGetPlayerRequest: MessageFns<QueryGetPlayerRequest> = {
  encode(message: QueryGetPlayerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPlayerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPlayerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPlayerRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetPlayerRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPlayerRequest>, I>>(base?: I): QueryGetPlayerRequest {
    return QueryGetPlayerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPlayerRequest>, I>>(object: I): QueryGetPlayerRequest {
    const message = createBaseQueryGetPlayerRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetPlayerResponse(): QueryGetPlayerResponse {
  return { Player: undefined, gridAttributes: undefined, playerInventory: undefined, halted: false };
}

export const QueryGetPlayerResponse: MessageFns<QueryGetPlayerResponse> = {
  encode(message: QueryGetPlayerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Player !== undefined) {
      Player.encode(message.Player, writer.uint32(10).fork()).join();
    }
    if (message.gridAttributes !== undefined) {
      GridAttributes.encode(message.gridAttributes, writer.uint32(18).fork()).join();
    }
    if (message.playerInventory !== undefined) {
      PlayerInventory.encode(message.playerInventory, writer.uint32(26).fork()).join();
    }
    if (message.halted !== false) {
      writer.uint32(32).bool(message.halted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPlayerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPlayerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Player = Player.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gridAttributes = GridAttributes.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playerInventory = PlayerInventory.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.halted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPlayerResponse {
    return {
      Player: isSet(object.Player) ? Player.fromJSON(object.Player) : undefined,
      gridAttributes: isSet(object.gridAttributes) ? GridAttributes.fromJSON(object.gridAttributes) : undefined,
      playerInventory: isSet(object.playerInventory) ? PlayerInventory.fromJSON(object.playerInventory) : undefined,
      halted: isSet(object.halted) ? globalThis.Boolean(object.halted) : false,
    };
  },

  toJSON(message: QueryGetPlayerResponse): unknown {
    const obj: any = {};
    if (message.Player !== undefined) {
      obj.Player = Player.toJSON(message.Player);
    }
    if (message.gridAttributes !== undefined) {
      obj.gridAttributes = GridAttributes.toJSON(message.gridAttributes);
    }
    if (message.playerInventory !== undefined) {
      obj.playerInventory = PlayerInventory.toJSON(message.playerInventory);
    }
    if (message.halted !== false) {
      obj.halted = message.halted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPlayerResponse>, I>>(base?: I): QueryGetPlayerResponse {
    return QueryGetPlayerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPlayerResponse>, I>>(object: I): QueryGetPlayerResponse {
    const message = createBaseQueryGetPlayerResponse();
    message.Player = (object.Player !== undefined && object.Player !== null)
      ? Player.fromPartial(object.Player)
      : undefined;
    message.gridAttributes = (object.gridAttributes !== undefined && object.gridAttributes !== null)
      ? GridAttributes.fromPartial(object.gridAttributes)
      : undefined;
    message.playerInventory = (object.playerInventory !== undefined && object.playerInventory !== null)
      ? PlayerInventory.fromPartial(object.playerInventory)
      : undefined;
    message.halted = object.halted ?? false;
    return message;
  },
};

function createBaseQueryAllPlayerRequest(): QueryAllPlayerRequest {
  return { pagination: undefined };
}

export const QueryAllPlayerRequest: MessageFns<QueryAllPlayerRequest> = {
  encode(message: QueryAllPlayerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPlayerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPlayerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPlayerRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllPlayerRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPlayerRequest>, I>>(base?: I): QueryAllPlayerRequest {
    return QueryAllPlayerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPlayerRequest>, I>>(object: I): QueryAllPlayerRequest {
    const message = createBaseQueryAllPlayerRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPlayerResponse(): QueryAllPlayerResponse {
  return { Player: [], pagination: undefined };
}

export const QueryAllPlayerResponse: MessageFns<QueryAllPlayerResponse> = {
  encode(message: QueryAllPlayerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Player) {
      Player.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPlayerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPlayerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Player.push(Player.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPlayerResponse {
    return {
      Player: globalThis.Array.isArray(object?.Player) ? object.Player.map((e: any) => Player.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllPlayerResponse): unknown {
    const obj: any = {};
    if (message.Player?.length) {
      obj.Player = message.Player.map((e) => Player.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPlayerResponse>, I>>(base?: I): QueryAllPlayerResponse {
    return QueryAllPlayerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPlayerResponse>, I>>(object: I): QueryAllPlayerResponse {
    const message = createBaseQueryAllPlayerResponse();
    message.Player = object.Player?.map((e) => Player.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPlayerHaltedRequest(): QueryAllPlayerHaltedRequest {
  return {};
}

export const QueryAllPlayerHaltedRequest: MessageFns<QueryAllPlayerHaltedRequest> = {
  encode(_: QueryAllPlayerHaltedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPlayerHaltedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPlayerHaltedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryAllPlayerHaltedRequest {
    return {};
  },

  toJSON(_: QueryAllPlayerHaltedRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPlayerHaltedRequest>, I>>(base?: I): QueryAllPlayerHaltedRequest {
    return QueryAllPlayerHaltedRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPlayerHaltedRequest>, I>>(_: I): QueryAllPlayerHaltedRequest {
    const message = createBaseQueryAllPlayerHaltedRequest();
    return message;
  },
};

function createBaseQueryAllPlayerHaltedResponse(): QueryAllPlayerHaltedResponse {
  return { PlayerId: [] };
}

export const QueryAllPlayerHaltedResponse: MessageFns<QueryAllPlayerHaltedResponse> = {
  encode(message: QueryAllPlayerHaltedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.PlayerId) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPlayerHaltedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPlayerHaltedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.PlayerId.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPlayerHaltedResponse {
    return {
      PlayerId: globalThis.Array.isArray(object?.PlayerId) ? object.PlayerId.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: QueryAllPlayerHaltedResponse): unknown {
    const obj: any = {};
    if (message.PlayerId?.length) {
      obj.PlayerId = message.PlayerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPlayerHaltedResponse>, I>>(base?: I): QueryAllPlayerHaltedResponse {
    return QueryAllPlayerHaltedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPlayerHaltedResponse>, I>>(object: I): QueryAllPlayerHaltedResponse {
    const message = createBaseQueryAllPlayerHaltedResponse();
    message.PlayerId = object.PlayerId?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryGetProviderRequest(): QueryGetProviderRequest {
  return { id: "" };
}

export const QueryGetProviderRequest: MessageFns<QueryGetProviderRequest> = {
  encode(message: QueryGetProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProviderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetProviderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProviderRequest>, I>>(base?: I): QueryGetProviderRequest {
    return QueryGetProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProviderRequest>, I>>(object: I): QueryGetProviderRequest {
    const message = createBaseQueryGetProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetProviderResponse(): QueryGetProviderResponse {
  return { Provider: undefined, gridAttributes: undefined };
}

export const QueryGetProviderResponse: MessageFns<QueryGetProviderResponse> = {
  encode(message: QueryGetProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Provider !== undefined) {
      Provider.encode(message.Provider, writer.uint32(10).fork()).join();
    }
    if (message.gridAttributes !== undefined) {
      GridAttributes.encode(message.gridAttributes, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Provider = Provider.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gridAttributes = GridAttributes.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProviderResponse {
    return {
      Provider: isSet(object.Provider) ? Provider.fromJSON(object.Provider) : undefined,
      gridAttributes: isSet(object.gridAttributes) ? GridAttributes.fromJSON(object.gridAttributes) : undefined,
    };
  },

  toJSON(message: QueryGetProviderResponse): unknown {
    const obj: any = {};
    if (message.Provider !== undefined) {
      obj.Provider = Provider.toJSON(message.Provider);
    }
    if (message.gridAttributes !== undefined) {
      obj.gridAttributes = GridAttributes.toJSON(message.gridAttributes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProviderResponse>, I>>(base?: I): QueryGetProviderResponse {
    return QueryGetProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProviderResponse>, I>>(object: I): QueryGetProviderResponse {
    const message = createBaseQueryGetProviderResponse();
    message.Provider = (object.Provider !== undefined && object.Provider !== null)
      ? Provider.fromPartial(object.Provider)
      : undefined;
    message.gridAttributes = (object.gridAttributes !== undefined && object.gridAttributes !== null)
      ? GridAttributes.fromPartial(object.gridAttributes)
      : undefined;
    return message;
  },
};

function createBaseQueryAllProviderRequest(): QueryAllProviderRequest {
  return { pagination: undefined };
}

export const QueryAllProviderRequest: MessageFns<QueryAllProviderRequest> = {
  encode(message: QueryAllProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProviderRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllProviderRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllProviderRequest>, I>>(base?: I): QueryAllProviderRequest {
    return QueryAllProviderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllProviderRequest>, I>>(object: I): QueryAllProviderRequest {
    const message = createBaseQueryAllProviderRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllProviderResponse(): QueryAllProviderResponse {
  return { Provider: [], pagination: undefined };
}

export const QueryAllProviderResponse: MessageFns<QueryAllProviderResponse> = {
  encode(message: QueryAllProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Provider) {
      Provider.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Provider.push(Provider.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProviderResponse {
    return {
      Provider: globalThis.Array.isArray(object?.Provider) ? object.Provider.map((e: any) => Provider.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllProviderResponse): unknown {
    const obj: any = {};
    if (message.Provider?.length) {
      obj.Provider = message.Provider.map((e) => Provider.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllProviderResponse>, I>>(base?: I): QueryAllProviderResponse {
    return QueryAllProviderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllProviderResponse>, I>>(object: I): QueryAllProviderResponse {
    const message = createBaseQueryAllProviderResponse();
    message.Provider = object.Provider?.map((e) => Provider.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetProviderCollateralAddressRequest(): QueryGetProviderCollateralAddressRequest {
  return { providerId: "" };
}

export const QueryGetProviderCollateralAddressRequest: MessageFns<QueryGetProviderCollateralAddressRequest> = {
  encode(message: QueryGetProviderCollateralAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.providerId !== "") {
      writer.uint32(10).string(message.providerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProviderCollateralAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProviderCollateralAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProviderCollateralAddressRequest {
    return { providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "" };
  },

  toJSON(message: QueryGetProviderCollateralAddressRequest): unknown {
    const obj: any = {};
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProviderCollateralAddressRequest>, I>>(
    base?: I,
  ): QueryGetProviderCollateralAddressRequest {
    return QueryGetProviderCollateralAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProviderCollateralAddressRequest>, I>>(
    object: I,
  ): QueryGetProviderCollateralAddressRequest {
    const message = createBaseQueryGetProviderCollateralAddressRequest();
    message.providerId = object.providerId ?? "";
    return message;
  },
};

function createBaseQueryAllProviderCollateralAddressRequest(): QueryAllProviderCollateralAddressRequest {
  return { pagination: undefined };
}

export const QueryAllProviderCollateralAddressRequest: MessageFns<QueryAllProviderCollateralAddressRequest> = {
  encode(message: QueryAllProviderCollateralAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProviderCollateralAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProviderCollateralAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProviderCollateralAddressRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllProviderCollateralAddressRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllProviderCollateralAddressRequest>, I>>(
    base?: I,
  ): QueryAllProviderCollateralAddressRequest {
    return QueryAllProviderCollateralAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllProviderCollateralAddressRequest>, I>>(
    object: I,
  ): QueryAllProviderCollateralAddressRequest {
    const message = createBaseQueryAllProviderCollateralAddressRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllProviderCollateralAddressResponse(): QueryAllProviderCollateralAddressResponse {
  return { internalAddressAssociation: [], pagination: undefined };
}

export const QueryAllProviderCollateralAddressResponse: MessageFns<QueryAllProviderCollateralAddressResponse> = {
  encode(message: QueryAllProviderCollateralAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.internalAddressAssociation) {
      InternalAddressAssociation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProviderCollateralAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProviderCollateralAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.internalAddressAssociation.push(InternalAddressAssociation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProviderCollateralAddressResponse {
    return {
      internalAddressAssociation: globalThis.Array.isArray(object?.internalAddressAssociation)
        ? object.internalAddressAssociation.map((e: any) => InternalAddressAssociation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllProviderCollateralAddressResponse): unknown {
    const obj: any = {};
    if (message.internalAddressAssociation?.length) {
      obj.internalAddressAssociation = message.internalAddressAssociation.map((e) =>
        InternalAddressAssociation.toJSON(e)
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllProviderCollateralAddressResponse>, I>>(
    base?: I,
  ): QueryAllProviderCollateralAddressResponse {
    return QueryAllProviderCollateralAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllProviderCollateralAddressResponse>, I>>(
    object: I,
  ): QueryAllProviderCollateralAddressResponse {
    const message = createBaseQueryAllProviderCollateralAddressResponse();
    message.internalAddressAssociation =
      object.internalAddressAssociation?.map((e) => InternalAddressAssociation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetProviderByCollateralAddressRequest(): QueryGetProviderByCollateralAddressRequest {
  return { address: "" };
}

export const QueryGetProviderByCollateralAddressRequest: MessageFns<QueryGetProviderByCollateralAddressRequest> = {
  encode(message: QueryGetProviderByCollateralAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProviderByCollateralAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProviderByCollateralAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProviderByCollateralAddressRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryGetProviderByCollateralAddressRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProviderByCollateralAddressRequest>, I>>(
    base?: I,
  ): QueryGetProviderByCollateralAddressRequest {
    return QueryGetProviderByCollateralAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProviderByCollateralAddressRequest>, I>>(
    object: I,
  ): QueryGetProviderByCollateralAddressRequest {
    const message = createBaseQueryGetProviderByCollateralAddressRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryGetProviderEarningsAddressRequest(): QueryGetProviderEarningsAddressRequest {
  return { providerId: "" };
}

export const QueryGetProviderEarningsAddressRequest: MessageFns<QueryGetProviderEarningsAddressRequest> = {
  encode(message: QueryGetProviderEarningsAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.providerId !== "") {
      writer.uint32(10).string(message.providerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProviderEarningsAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProviderEarningsAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProviderEarningsAddressRequest {
    return { providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "" };
  },

  toJSON(message: QueryGetProviderEarningsAddressRequest): unknown {
    const obj: any = {};
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProviderEarningsAddressRequest>, I>>(
    base?: I,
  ): QueryGetProviderEarningsAddressRequest {
    return QueryGetProviderEarningsAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProviderEarningsAddressRequest>, I>>(
    object: I,
  ): QueryGetProviderEarningsAddressRequest {
    const message = createBaseQueryGetProviderEarningsAddressRequest();
    message.providerId = object.providerId ?? "";
    return message;
  },
};

function createBaseQueryAllProviderEarningsAddressRequest(): QueryAllProviderEarningsAddressRequest {
  return { pagination: undefined };
}

export const QueryAllProviderEarningsAddressRequest: MessageFns<QueryAllProviderEarningsAddressRequest> = {
  encode(message: QueryAllProviderEarningsAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProviderEarningsAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProviderEarningsAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProviderEarningsAddressRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllProviderEarningsAddressRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllProviderEarningsAddressRequest>, I>>(
    base?: I,
  ): QueryAllProviderEarningsAddressRequest {
    return QueryAllProviderEarningsAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllProviderEarningsAddressRequest>, I>>(
    object: I,
  ): QueryAllProviderEarningsAddressRequest {
    const message = createBaseQueryAllProviderEarningsAddressRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllProviderEarningsAddressResponse(): QueryAllProviderEarningsAddressResponse {
  return { internalAddressAssociation: [], pagination: undefined };
}

export const QueryAllProviderEarningsAddressResponse: MessageFns<QueryAllProviderEarningsAddressResponse> = {
  encode(message: QueryAllProviderEarningsAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.internalAddressAssociation) {
      InternalAddressAssociation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProviderEarningsAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProviderEarningsAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.internalAddressAssociation.push(InternalAddressAssociation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProviderEarningsAddressResponse {
    return {
      internalAddressAssociation: globalThis.Array.isArray(object?.internalAddressAssociation)
        ? object.internalAddressAssociation.map((e: any) => InternalAddressAssociation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllProviderEarningsAddressResponse): unknown {
    const obj: any = {};
    if (message.internalAddressAssociation?.length) {
      obj.internalAddressAssociation = message.internalAddressAssociation.map((e) =>
        InternalAddressAssociation.toJSON(e)
      );
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllProviderEarningsAddressResponse>, I>>(
    base?: I,
  ): QueryAllProviderEarningsAddressResponse {
    return QueryAllProviderEarningsAddressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllProviderEarningsAddressResponse>, I>>(
    object: I,
  ): QueryAllProviderEarningsAddressResponse {
    const message = createBaseQueryAllProviderEarningsAddressResponse();
    message.internalAddressAssociation =
      object.internalAddressAssociation?.map((e) => InternalAddressAssociation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetProviderByEarningsAddressRequest(): QueryGetProviderByEarningsAddressRequest {
  return { address: "" };
}

export const QueryGetProviderByEarningsAddressRequest: MessageFns<QueryGetProviderByEarningsAddressRequest> = {
  encode(message: QueryGetProviderByEarningsAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetProviderByEarningsAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetProviderByEarningsAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetProviderByEarningsAddressRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryGetProviderByEarningsAddressRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetProviderByEarningsAddressRequest>, I>>(
    base?: I,
  ): QueryGetProviderByEarningsAddressRequest {
    return QueryGetProviderByEarningsAddressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetProviderByEarningsAddressRequest>, I>>(
    object: I,
  ): QueryGetProviderByEarningsAddressRequest {
    const message = createBaseQueryGetProviderByEarningsAddressRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryGetReactorRequest(): QueryGetReactorRequest {
  return { id: "" };
}

export const QueryGetReactorRequest: MessageFns<QueryGetReactorRequest> = {
  encode(message: QueryGetReactorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetReactorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetReactorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetReactorRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetReactorRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetReactorRequest>, I>>(base?: I): QueryGetReactorRequest {
    return QueryGetReactorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetReactorRequest>, I>>(object: I): QueryGetReactorRequest {
    const message = createBaseQueryGetReactorRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetReactorResponse(): QueryGetReactorResponse {
  return { Reactor: undefined, gridAttributes: undefined };
}

export const QueryGetReactorResponse: MessageFns<QueryGetReactorResponse> = {
  encode(message: QueryGetReactorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Reactor !== undefined) {
      Reactor.encode(message.Reactor, writer.uint32(10).fork()).join();
    }
    if (message.gridAttributes !== undefined) {
      GridAttributes.encode(message.gridAttributes, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetReactorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetReactorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Reactor = Reactor.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gridAttributes = GridAttributes.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetReactorResponse {
    return {
      Reactor: isSet(object.Reactor) ? Reactor.fromJSON(object.Reactor) : undefined,
      gridAttributes: isSet(object.gridAttributes) ? GridAttributes.fromJSON(object.gridAttributes) : undefined,
    };
  },

  toJSON(message: QueryGetReactorResponse): unknown {
    const obj: any = {};
    if (message.Reactor !== undefined) {
      obj.Reactor = Reactor.toJSON(message.Reactor);
    }
    if (message.gridAttributes !== undefined) {
      obj.gridAttributes = GridAttributes.toJSON(message.gridAttributes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetReactorResponse>, I>>(base?: I): QueryGetReactorResponse {
    return QueryGetReactorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetReactorResponse>, I>>(object: I): QueryGetReactorResponse {
    const message = createBaseQueryGetReactorResponse();
    message.Reactor = (object.Reactor !== undefined && object.Reactor !== null)
      ? Reactor.fromPartial(object.Reactor)
      : undefined;
    message.gridAttributes = (object.gridAttributes !== undefined && object.gridAttributes !== null)
      ? GridAttributes.fromPartial(object.gridAttributes)
      : undefined;
    return message;
  },
};

function createBaseQueryAllReactorRequest(): QueryAllReactorRequest {
  return { pagination: undefined };
}

export const QueryAllReactorRequest: MessageFns<QueryAllReactorRequest> = {
  encode(message: QueryAllReactorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllReactorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllReactorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllReactorRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllReactorRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllReactorRequest>, I>>(base?: I): QueryAllReactorRequest {
    return QueryAllReactorRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllReactorRequest>, I>>(object: I): QueryAllReactorRequest {
    const message = createBaseQueryAllReactorRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllReactorResponse(): QueryAllReactorResponse {
  return { Reactor: [], pagination: undefined };
}

export const QueryAllReactorResponse: MessageFns<QueryAllReactorResponse> = {
  encode(message: QueryAllReactorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Reactor) {
      Reactor.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllReactorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllReactorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Reactor.push(Reactor.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllReactorResponse {
    return {
      Reactor: globalThis.Array.isArray(object?.Reactor) ? object.Reactor.map((e: any) => Reactor.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllReactorResponse): unknown {
    const obj: any = {};
    if (message.Reactor?.length) {
      obj.Reactor = message.Reactor.map((e) => Reactor.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllReactorResponse>, I>>(base?: I): QueryAllReactorResponse {
    return QueryAllReactorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllReactorResponse>, I>>(object: I): QueryAllReactorResponse {
    const message = createBaseQueryAllReactorResponse();
    message.Reactor = object.Reactor?.map((e) => Reactor.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetStructRequest(): QueryGetStructRequest {
  return { id: "" };
}

export const QueryGetStructRequest: MessageFns<QueryGetStructRequest> = {
  encode(message: QueryGetStructRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetStructRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetStructRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetStructRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetStructRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetStructRequest>, I>>(base?: I): QueryGetStructRequest {
    return QueryGetStructRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetStructRequest>, I>>(object: I): QueryGetStructRequest {
    const message = createBaseQueryGetStructRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetStructResponse(): QueryGetStructResponse {
  return { Struct: undefined, structAttributes: undefined, gridAttributes: undefined, structDefenders: [] };
}

export const QueryGetStructResponse: MessageFns<QueryGetStructResponse> = {
  encode(message: QueryGetStructResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Struct !== undefined) {
      Struct.encode(message.Struct, writer.uint32(10).fork()).join();
    }
    if (message.structAttributes !== undefined) {
      StructAttributes.encode(message.structAttributes, writer.uint32(18).fork()).join();
    }
    if (message.gridAttributes !== undefined) {
      GridAttributes.encode(message.gridAttributes, writer.uint32(26).fork()).join();
    }
    for (const v of message.structDefenders) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetStructResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetStructResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Struct = Struct.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.structAttributes = StructAttributes.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gridAttributes = GridAttributes.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.structDefenders.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetStructResponse {
    return {
      Struct: isSet(object.Struct) ? Struct.fromJSON(object.Struct) : undefined,
      structAttributes: isSet(object.structAttributes) ? StructAttributes.fromJSON(object.structAttributes) : undefined,
      gridAttributes: isSet(object.gridAttributes) ? GridAttributes.fromJSON(object.gridAttributes) : undefined,
      structDefenders: globalThis.Array.isArray(object?.structDefenders)
        ? object.structDefenders.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: QueryGetStructResponse): unknown {
    const obj: any = {};
    if (message.Struct !== undefined) {
      obj.Struct = Struct.toJSON(message.Struct);
    }
    if (message.structAttributes !== undefined) {
      obj.structAttributes = StructAttributes.toJSON(message.structAttributes);
    }
    if (message.gridAttributes !== undefined) {
      obj.gridAttributes = GridAttributes.toJSON(message.gridAttributes);
    }
    if (message.structDefenders?.length) {
      obj.structDefenders = message.structDefenders;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetStructResponse>, I>>(base?: I): QueryGetStructResponse {
    return QueryGetStructResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetStructResponse>, I>>(object: I): QueryGetStructResponse {
    const message = createBaseQueryGetStructResponse();
    message.Struct = (object.Struct !== undefined && object.Struct !== null)
      ? Struct.fromPartial(object.Struct)
      : undefined;
    message.structAttributes = (object.structAttributes !== undefined && object.structAttributes !== null)
      ? StructAttributes.fromPartial(object.structAttributes)
      : undefined;
    message.gridAttributes = (object.gridAttributes !== undefined && object.gridAttributes !== null)
      ? GridAttributes.fromPartial(object.gridAttributes)
      : undefined;
    message.structDefenders = object.structDefenders?.map((e) => e) || [];
    return message;
  },
};

function createBaseQueryAllStructRequest(): QueryAllStructRequest {
  return { pagination: undefined };
}

export const QueryAllStructRequest: MessageFns<QueryAllStructRequest> = {
  encode(message: QueryAllStructRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllStructRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllStructRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllStructRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllStructRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllStructRequest>, I>>(base?: I): QueryAllStructRequest {
    return QueryAllStructRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllStructRequest>, I>>(object: I): QueryAllStructRequest {
    const message = createBaseQueryAllStructRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllStructResponse(): QueryAllStructResponse {
  return { Struct: [], pagination: undefined };
}

export const QueryAllStructResponse: MessageFns<QueryAllStructResponse> = {
  encode(message: QueryAllStructResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Struct) {
      Struct.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllStructResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllStructResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Struct.push(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllStructResponse {
    return {
      Struct: globalThis.Array.isArray(object?.Struct) ? object.Struct.map((e: any) => Struct.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllStructResponse): unknown {
    const obj: any = {};
    if (message.Struct?.length) {
      obj.Struct = message.Struct.map((e) => Struct.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllStructResponse>, I>>(base?: I): QueryAllStructResponse {
    return QueryAllStructResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllStructResponse>, I>>(object: I): QueryAllStructResponse {
    const message = createBaseQueryAllStructResponse();
    message.Struct = object.Struct?.map((e) => Struct.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetStructAttributeRequest(): QueryGetStructAttributeRequest {
  return { structId: "", attributeType: "" };
}

export const QueryGetStructAttributeRequest: MessageFns<QueryGetStructAttributeRequest> = {
  encode(message: QueryGetStructAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.structId !== "") {
      writer.uint32(10).string(message.structId);
    }
    if (message.attributeType !== "") {
      writer.uint32(18).string(message.attributeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetStructAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetStructAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.structId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attributeType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetStructAttributeRequest {
    return {
      structId: isSet(object.structId) ? globalThis.String(object.structId) : "",
      attributeType: isSet(object.attributeType) ? globalThis.String(object.attributeType) : "",
    };
  },

  toJSON(message: QueryGetStructAttributeRequest): unknown {
    const obj: any = {};
    if (message.structId !== "") {
      obj.structId = message.structId;
    }
    if (message.attributeType !== "") {
      obj.attributeType = message.attributeType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetStructAttributeRequest>, I>>(base?: I): QueryGetStructAttributeRequest {
    return QueryGetStructAttributeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetStructAttributeRequest>, I>>(
    object: I,
  ): QueryGetStructAttributeRequest {
    const message = createBaseQueryGetStructAttributeRequest();
    message.structId = object.structId ?? "";
    message.attributeType = object.attributeType ?? "";
    return message;
  },
};

function createBaseQueryGetStructAttributeResponse(): QueryGetStructAttributeResponse {
  return { attribute: 0 };
}

export const QueryGetStructAttributeResponse: MessageFns<QueryGetStructAttributeResponse> = {
  encode(message: QueryGetStructAttributeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attribute !== 0) {
      writer.uint32(8).uint64(message.attribute);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetStructAttributeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetStructAttributeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.attribute = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetStructAttributeResponse {
    return { attribute: isSet(object.attribute) ? globalThis.Number(object.attribute) : 0 };
  },

  toJSON(message: QueryGetStructAttributeResponse): unknown {
    const obj: any = {};
    if (message.attribute !== 0) {
      obj.attribute = Math.round(message.attribute);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetStructAttributeResponse>, I>>(base?: I): QueryGetStructAttributeResponse {
    return QueryGetStructAttributeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetStructAttributeResponse>, I>>(
    object: I,
  ): QueryGetStructAttributeResponse {
    const message = createBaseQueryGetStructAttributeResponse();
    message.attribute = object.attribute ?? 0;
    return message;
  },
};

function createBaseQueryAllStructAttributeRequest(): QueryAllStructAttributeRequest {
  return { pagination: undefined };
}

export const QueryAllStructAttributeRequest: MessageFns<QueryAllStructAttributeRequest> = {
  encode(message: QueryAllStructAttributeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllStructAttributeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllStructAttributeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllStructAttributeRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllStructAttributeRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllStructAttributeRequest>, I>>(base?: I): QueryAllStructAttributeRequest {
    return QueryAllStructAttributeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllStructAttributeRequest>, I>>(
    object: I,
  ): QueryAllStructAttributeRequest {
    const message = createBaseQueryAllStructAttributeRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllStructAttributeResponse(): QueryAllStructAttributeResponse {
  return { structAttributeRecords: [], pagination: undefined };
}

export const QueryAllStructAttributeResponse: MessageFns<QueryAllStructAttributeResponse> = {
  encode(message: QueryAllStructAttributeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.structAttributeRecords) {
      StructAttributeRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllStructAttributeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllStructAttributeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.structAttributeRecords.push(StructAttributeRecord.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllStructAttributeResponse {
    return {
      structAttributeRecords: globalThis.Array.isArray(object?.structAttributeRecords)
        ? object.structAttributeRecords.map((e: any) => StructAttributeRecord.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllStructAttributeResponse): unknown {
    const obj: any = {};
    if (message.structAttributeRecords?.length) {
      obj.structAttributeRecords = message.structAttributeRecords.map((e) => StructAttributeRecord.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllStructAttributeResponse>, I>>(base?: I): QueryAllStructAttributeResponse {
    return QueryAllStructAttributeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllStructAttributeResponse>, I>>(
    object: I,
  ): QueryAllStructAttributeResponse {
    const message = createBaseQueryAllStructAttributeResponse();
    message.structAttributeRecords = object.structAttributeRecords?.map((e) => StructAttributeRecord.fromPartial(e)) ||
      [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetStructTypeRequest(): QueryGetStructTypeRequest {
  return { id: 0 };
}

export const QueryGetStructTypeRequest: MessageFns<QueryGetStructTypeRequest> = {
  encode(message: QueryGetStructTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetStructTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetStructTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetStructTypeRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: QueryGetStructTypeRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetStructTypeRequest>, I>>(base?: I): QueryGetStructTypeRequest {
    return QueryGetStructTypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetStructTypeRequest>, I>>(object: I): QueryGetStructTypeRequest {
    const message = createBaseQueryGetStructTypeRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryGetStructTypeResponse(): QueryGetStructTypeResponse {
  return { StructType: undefined };
}

export const QueryGetStructTypeResponse: MessageFns<QueryGetStructTypeResponse> = {
  encode(message: QueryGetStructTypeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.StructType !== undefined) {
      StructType.encode(message.StructType, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetStructTypeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetStructTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.StructType = StructType.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetStructTypeResponse {
    return { StructType: isSet(object.StructType) ? StructType.fromJSON(object.StructType) : undefined };
  },

  toJSON(message: QueryGetStructTypeResponse): unknown {
    const obj: any = {};
    if (message.StructType !== undefined) {
      obj.StructType = StructType.toJSON(message.StructType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetStructTypeResponse>, I>>(base?: I): QueryGetStructTypeResponse {
    return QueryGetStructTypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetStructTypeResponse>, I>>(object: I): QueryGetStructTypeResponse {
    const message = createBaseQueryGetStructTypeResponse();
    message.StructType = (object.StructType !== undefined && object.StructType !== null)
      ? StructType.fromPartial(object.StructType)
      : undefined;
    return message;
  },
};

function createBaseQueryAllStructTypeRequest(): QueryAllStructTypeRequest {
  return { pagination: undefined };
}

export const QueryAllStructTypeRequest: MessageFns<QueryAllStructTypeRequest> = {
  encode(message: QueryAllStructTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllStructTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllStructTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllStructTypeRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllStructTypeRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllStructTypeRequest>, I>>(base?: I): QueryAllStructTypeRequest {
    return QueryAllStructTypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllStructTypeRequest>, I>>(object: I): QueryAllStructTypeRequest {
    const message = createBaseQueryAllStructTypeRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllStructTypeResponse(): QueryAllStructTypeResponse {
  return { StructType: [], pagination: undefined };
}

export const QueryAllStructTypeResponse: MessageFns<QueryAllStructTypeResponse> = {
  encode(message: QueryAllStructTypeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.StructType) {
      StructType.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllStructTypeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllStructTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.StructType.push(StructType.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllStructTypeResponse {
    return {
      StructType: globalThis.Array.isArray(object?.StructType)
        ? object.StructType.map((e: any) => StructType.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllStructTypeResponse): unknown {
    const obj: any = {};
    if (message.StructType?.length) {
      obj.StructType = message.StructType.map((e) => StructType.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllStructTypeResponse>, I>>(base?: I): QueryAllStructTypeResponse {
    return QueryAllStructTypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllStructTypeResponse>, I>>(object: I): QueryAllStructTypeResponse {
    const message = createBaseQueryAllStructTypeResponse();
    message.StructType = object.StructType?.map((e) => StructType.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetSubstationRequest(): QueryGetSubstationRequest {
  return { id: "" };
}

export const QueryGetSubstationRequest: MessageFns<QueryGetSubstationRequest> = {
  encode(message: QueryGetSubstationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetSubstationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetSubstationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetSubstationRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: QueryGetSubstationRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetSubstationRequest>, I>>(base?: I): QueryGetSubstationRequest {
    return QueryGetSubstationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetSubstationRequest>, I>>(object: I): QueryGetSubstationRequest {
    const message = createBaseQueryGetSubstationRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetSubstationResponse(): QueryGetSubstationResponse {
  return { Substation: undefined, gridAttributes: undefined };
}

export const QueryGetSubstationResponse: MessageFns<QueryGetSubstationResponse> = {
  encode(message: QueryGetSubstationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Substation !== undefined) {
      Substation.encode(message.Substation, writer.uint32(10).fork()).join();
    }
    if (message.gridAttributes !== undefined) {
      GridAttributes.encode(message.gridAttributes, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetSubstationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetSubstationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Substation = Substation.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gridAttributes = GridAttributes.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetSubstationResponse {
    return {
      Substation: isSet(object.Substation) ? Substation.fromJSON(object.Substation) : undefined,
      gridAttributes: isSet(object.gridAttributes) ? GridAttributes.fromJSON(object.gridAttributes) : undefined,
    };
  },

  toJSON(message: QueryGetSubstationResponse): unknown {
    const obj: any = {};
    if (message.Substation !== undefined) {
      obj.Substation = Substation.toJSON(message.Substation);
    }
    if (message.gridAttributes !== undefined) {
      obj.gridAttributes = GridAttributes.toJSON(message.gridAttributes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetSubstationResponse>, I>>(base?: I): QueryGetSubstationResponse {
    return QueryGetSubstationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetSubstationResponse>, I>>(object: I): QueryGetSubstationResponse {
    const message = createBaseQueryGetSubstationResponse();
    message.Substation = (object.Substation !== undefined && object.Substation !== null)
      ? Substation.fromPartial(object.Substation)
      : undefined;
    message.gridAttributes = (object.gridAttributes !== undefined && object.gridAttributes !== null)
      ? GridAttributes.fromPartial(object.gridAttributes)
      : undefined;
    return message;
  },
};

function createBaseQueryAllSubstationRequest(): QueryAllSubstationRequest {
  return { pagination: undefined };
}

export const QueryAllSubstationRequest: MessageFns<QueryAllSubstationRequest> = {
  encode(message: QueryAllSubstationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllSubstationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllSubstationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllSubstationRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllSubstationRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllSubstationRequest>, I>>(base?: I): QueryAllSubstationRequest {
    return QueryAllSubstationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllSubstationRequest>, I>>(object: I): QueryAllSubstationRequest {
    const message = createBaseQueryAllSubstationRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllSubstationResponse(): QueryAllSubstationResponse {
  return { Substation: [], pagination: undefined };
}

export const QueryAllSubstationResponse: MessageFns<QueryAllSubstationResponse> = {
  encode(message: QueryAllSubstationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Substation) {
      Substation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllSubstationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllSubstationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Substation.push(Substation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllSubstationResponse {
    return {
      Substation: globalThis.Array.isArray(object?.Substation)
        ? object.Substation.map((e: any) => Substation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllSubstationResponse): unknown {
    const obj: any = {};
    if (message.Substation?.length) {
      obj.Substation = message.Substation.map((e) => Substation.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllSubstationResponse>, I>>(base?: I): QueryAllSubstationResponse {
    return QueryAllSubstationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllSubstationResponse>, I>>(object: I): QueryAllSubstationResponse {
    const message = createBaseQueryAllSubstationResponse();
    message.Substation = object.Substation?.map((e) => Substation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryValidateSignatureRequest(): QueryValidateSignatureRequest {
  return { address: "", message: "", proofPubKey: "", proofSignature: "" };
}

export const QueryValidateSignatureRequest: MessageFns<QueryValidateSignatureRequest> = {
  encode(message: QueryValidateSignatureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.proofPubKey !== "") {
      writer.uint32(26).string(message.proofPubKey);
    }
    if (message.proofSignature !== "") {
      writer.uint32(34).string(message.proofSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryValidateSignatureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryValidateSignatureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proofPubKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.proofSignature = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryValidateSignatureRequest {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      proofPubKey: isSet(object.proofPubKey) ? globalThis.String(object.proofPubKey) : "",
      proofSignature: isSet(object.proofSignature) ? globalThis.String(object.proofSignature) : "",
    };
  },

  toJSON(message: QueryValidateSignatureRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.proofPubKey !== "") {
      obj.proofPubKey = message.proofPubKey;
    }
    if (message.proofSignature !== "") {
      obj.proofSignature = message.proofSignature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryValidateSignatureRequest>, I>>(base?: I): QueryValidateSignatureRequest {
    return QueryValidateSignatureRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryValidateSignatureRequest>, I>>(
    object: I,
  ): QueryValidateSignatureRequest {
    const message = createBaseQueryValidateSignatureRequest();
    message.address = object.address ?? "";
    message.message = object.message ?? "";
    message.proofPubKey = object.proofPubKey ?? "";
    message.proofSignature = object.proofSignature ?? "";
    return message;
  },
};

function createBaseQueryValidateSignatureResponse(): QueryValidateSignatureResponse {
  return {
    pubkeyFormatError: false,
    signatureFormatError: false,
    addressPubkeyMismatch: false,
    signatureInvalid: false,
    valid: false,
  };
}

export const QueryValidateSignatureResponse: MessageFns<QueryValidateSignatureResponse> = {
  encode(message: QueryValidateSignatureResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pubkeyFormatError !== false) {
      writer.uint32(8).bool(message.pubkeyFormatError);
    }
    if (message.signatureFormatError !== false) {
      writer.uint32(16).bool(message.signatureFormatError);
    }
    if (message.addressPubkeyMismatch !== false) {
      writer.uint32(24).bool(message.addressPubkeyMismatch);
    }
    if (message.signatureInvalid !== false) {
      writer.uint32(32).bool(message.signatureInvalid);
    }
    if (message.valid !== false) {
      writer.uint32(40).bool(message.valid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryValidateSignatureResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryValidateSignatureResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pubkeyFormatError = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.signatureFormatError = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.addressPubkeyMismatch = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.signatureInvalid = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.valid = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryValidateSignatureResponse {
    return {
      pubkeyFormatError: isSet(object.pubkeyFormatError) ? globalThis.Boolean(object.pubkeyFormatError) : false,
      signatureFormatError: isSet(object.signatureFormatError)
        ? globalThis.Boolean(object.signatureFormatError)
        : false,
      addressPubkeyMismatch: isSet(object.addressPubkeyMismatch)
        ? globalThis.Boolean(object.addressPubkeyMismatch)
        : false,
      signatureInvalid: isSet(object.signatureInvalid) ? globalThis.Boolean(object.signatureInvalid) : false,
      valid: isSet(object.valid) ? globalThis.Boolean(object.valid) : false,
    };
  },

  toJSON(message: QueryValidateSignatureResponse): unknown {
    const obj: any = {};
    if (message.pubkeyFormatError !== false) {
      obj.pubkeyFormatError = message.pubkeyFormatError;
    }
    if (message.signatureFormatError !== false) {
      obj.signatureFormatError = message.signatureFormatError;
    }
    if (message.addressPubkeyMismatch !== false) {
      obj.addressPubkeyMismatch = message.addressPubkeyMismatch;
    }
    if (message.signatureInvalid !== false) {
      obj.signatureInvalid = message.signatureInvalid;
    }
    if (message.valid !== false) {
      obj.valid = message.valid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryValidateSignatureResponse>, I>>(base?: I): QueryValidateSignatureResponse {
    return QueryValidateSignatureResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryValidateSignatureResponse>, I>>(
    object: I,
  ): QueryValidateSignatureResponse {
    const message = createBaseQueryValidateSignatureResponse();
    message.pubkeyFormatError = object.pubkeyFormatError ?? false;
    message.signatureFormatError = object.signatureFormatError ?? false;
    message.addressPubkeyMismatch = object.addressPubkeyMismatch ?? false;
    message.signatureInvalid = object.signatureInvalid ?? false;
    message.valid = object.valid ?? false;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  GetBlockHeight(request: QueryBlockHeight): Promise<QueryBlockHeightResponse>;
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries for Addresses. */
  Address(request: QueryGetAddressRequest): Promise<QueryAddressResponse>;
  AddressAll(request: QueryAllAddressRequest): Promise<QueryAllAddressResponse>;
  AddressAllByPlayer(request: QueryAllAddressByPlayerRequest): Promise<QueryAllAddressResponse>;
  /** Queries a list of Agreement items. */
  Agreement(request: QueryGetAgreementRequest): Promise<QueryGetAgreementResponse>;
  AgreementAll(request: QueryAllAgreementRequest): Promise<QueryAllAgreementResponse>;
  AgreementAllByProvider(request: QueryAllAgreementByProviderRequest): Promise<QueryAllAgreementResponse>;
  /** Queries a list of Allocation items. */
  Allocation(request: QueryGetAllocationRequest): Promise<QueryGetAllocationResponse>;
  AllocationAll(request: QueryAllAllocationRequest): Promise<QueryAllAllocationResponse>;
  AllocationAllBySource(request: QueryAllAllocationBySourceRequest): Promise<QueryAllAllocationResponse>;
  AllocationAllByDestination(request: QueryAllAllocationByDestinationRequest): Promise<QueryAllAllocationResponse>;
  /** Queries a list of Fleet items. */
  Fleet(request: QueryGetFleetRequest): Promise<QueryGetFleetResponse>;
  FleetByIndex(request: QueryGetFleetByIndexRequest): Promise<QueryGetFleetResponse>;
  FleetAll(request: QueryAllFleetRequest): Promise<QueryAllFleetResponse>;
  /** Queries a specific Grid details */
  Grid(request: QueryGetGridRequest): Promise<QueryGetGridResponse>;
  /** Queries a list of all Grid details */
  GridAll(request: QueryAllGridRequest): Promise<QueryAllGridResponse>;
  /** Queries a list of Guild items. */
  Guild(request: QueryGetGuildRequest): Promise<QueryGetGuildResponse>;
  GuildAll(request: QueryAllGuildRequest): Promise<QueryAllGuildResponse>;
  GuildBankCollateralAddress(
    request: QueryGetGuildBankCollateralAddressRequest,
  ): Promise<QueryAllGuildBankCollateralAddressResponse>;
  GuildBankCollateralAddressAll(
    request: QueryAllGuildBankCollateralAddressRequest,
  ): Promise<QueryAllGuildBankCollateralAddressResponse>;
  GuildMembershipApplication(
    request: QueryGetGuildMembershipApplicationRequest,
  ): Promise<QueryGetGuildMembershipApplicationResponse>;
  GuildMembershipApplicationAll(
    request: QueryAllGuildMembershipApplicationRequest,
  ): Promise<QueryAllGuildMembershipApplicationResponse>;
  /** Queries a list of Infusions. */
  Infusion(request: QueryGetInfusionRequest): Promise<QueryGetInfusionResponse>;
  InfusionAll(request: QueryAllInfusionRequest): Promise<QueryAllInfusionResponse>;
  InfusionAllByDestination(request: QueryAllInfusionByDestinationRequest): Promise<QueryAllInfusionResponse>;
  /** Queries a specific Permission */
  Permission(request: QueryGetPermissionRequest): Promise<QueryGetPermissionResponse>;
  /** Queries a list of Permissions based on Object */
  PermissionByObject(request: QueryAllPermissionByObjectRequest): Promise<QueryAllPermissionResponse>;
  /** Queries a list of Permissions based on the Player with the permissions */
  PermissionByPlayer(request: QueryAllPermissionByPlayerRequest): Promise<QueryAllPermissionResponse>;
  /** Queries a list of all Permissions */
  PermissionAll(request: QueryAllPermissionRequest): Promise<QueryAllPermissionResponse>;
  /** Queries a list of Player items. */
  Player(request: QueryGetPlayerRequest): Promise<QueryGetPlayerResponse>;
  PlayerAll(request: QueryAllPlayerRequest): Promise<QueryAllPlayerResponse>;
  PlayerHaltedAll(request: QueryAllPlayerHaltedRequest): Promise<QueryAllPlayerHaltedResponse>;
  /** Queries a list of Planet items. */
  Planet(request: QueryGetPlanetRequest): Promise<QueryGetPlanetResponse>;
  PlanetAll(request: QueryAllPlanetRequest): Promise<QueryAllPlanetResponse>;
  PlanetAllByPlayer(request: QueryAllPlanetByPlayerRequest): Promise<QueryAllPlanetResponse>;
  PlanetAttribute(request: QueryGetPlanetAttributeRequest): Promise<QueryGetPlanetAttributeResponse>;
  /** Queries a list of all Planet Attributes */
  PlanetAttributeAll(request: QueryAllPlanetAttributeRequest): Promise<QueryAllPlanetAttributeResponse>;
  /** Queries a list of Allocation items. */
  Provider(request: QueryGetProviderRequest): Promise<QueryGetProviderResponse>;
  ProviderAll(request: QueryAllProviderRequest): Promise<QueryAllProviderResponse>;
  ProviderCollateralAddress(
    request: QueryGetProviderCollateralAddressRequest,
  ): Promise<QueryAllProviderCollateralAddressResponse>;
  ProviderCollateralAddressAll(
    request: QueryAllProviderCollateralAddressRequest,
  ): Promise<QueryAllProviderCollateralAddressResponse>;
  /**
   * TODO Requires a lookup table that I don't know if we care about
   * rpc ProviderByCollateralAddress (QueryGetProviderByCollateralAddressRequest) returns (QueryGetProviderResponse) {
   * option (google.api.http).get = "/structs/provider_by_collateral_address/{address}";
   * }
   */
  ProviderEarningsAddress(
    request: QueryGetProviderEarningsAddressRequest,
  ): Promise<QueryAllProviderEarningsAddressResponse>;
  ProviderEarningsAddressAll(
    request: QueryAllProviderEarningsAddressRequest,
  ): Promise<QueryAllProviderEarningsAddressResponse>;
  /** Queries a list of Reactor items. */
  Reactor(request: QueryGetReactorRequest): Promise<QueryGetReactorResponse>;
  ReactorAll(request: QueryAllReactorRequest): Promise<QueryAllReactorResponse>;
  /** Queries a list of Structs items. */
  Struct(request: QueryGetStructRequest): Promise<QueryGetStructResponse>;
  StructAll(request: QueryAllStructRequest): Promise<QueryAllStructResponse>;
  StructAttribute(request: QueryGetStructAttributeRequest): Promise<QueryGetStructAttributeResponse>;
  /** Queries a list of all Struct Attributes */
  StructAttributeAll(request: QueryAllStructAttributeRequest): Promise<QueryAllStructAttributeResponse>;
  /** Queries a list of Struct Types items. */
  StructType(request: QueryGetStructTypeRequest): Promise<QueryGetStructTypeResponse>;
  StructTypeAll(request: QueryAllStructTypeRequest): Promise<QueryAllStructTypeResponse>;
  /** Queries a list of Substation items. */
  Substation(request: QueryGetSubstationRequest): Promise<QueryGetSubstationResponse>;
  SubstationAll(request: QueryAllSubstationRequest): Promise<QueryAllSubstationResponse>;
  ValidateSignature(request: QueryValidateSignatureRequest): Promise<QueryValidateSignatureResponse>;
}

export const QueryServiceName = "structs.structs.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.GetBlockHeight = this.GetBlockHeight.bind(this);
    this.Params = this.Params.bind(this);
    this.Address = this.Address.bind(this);
    this.AddressAll = this.AddressAll.bind(this);
    this.AddressAllByPlayer = this.AddressAllByPlayer.bind(this);
    this.Agreement = this.Agreement.bind(this);
    this.AgreementAll = this.AgreementAll.bind(this);
    this.AgreementAllByProvider = this.AgreementAllByProvider.bind(this);
    this.Allocation = this.Allocation.bind(this);
    this.AllocationAll = this.AllocationAll.bind(this);
    this.AllocationAllBySource = this.AllocationAllBySource.bind(this);
    this.AllocationAllByDestination = this.AllocationAllByDestination.bind(this);
    this.Fleet = this.Fleet.bind(this);
    this.FleetByIndex = this.FleetByIndex.bind(this);
    this.FleetAll = this.FleetAll.bind(this);
    this.Grid = this.Grid.bind(this);
    this.GridAll = this.GridAll.bind(this);
    this.Guild = this.Guild.bind(this);
    this.GuildAll = this.GuildAll.bind(this);
    this.GuildBankCollateralAddress = this.GuildBankCollateralAddress.bind(this);
    this.GuildBankCollateralAddressAll = this.GuildBankCollateralAddressAll.bind(this);
    this.GuildMembershipApplication = this.GuildMembershipApplication.bind(this);
    this.GuildMembershipApplicationAll = this.GuildMembershipApplicationAll.bind(this);
    this.Infusion = this.Infusion.bind(this);
    this.InfusionAll = this.InfusionAll.bind(this);
    this.InfusionAllByDestination = this.InfusionAllByDestination.bind(this);
    this.Permission = this.Permission.bind(this);
    this.PermissionByObject = this.PermissionByObject.bind(this);
    this.PermissionByPlayer = this.PermissionByPlayer.bind(this);
    this.PermissionAll = this.PermissionAll.bind(this);
    this.Player = this.Player.bind(this);
    this.PlayerAll = this.PlayerAll.bind(this);
    this.PlayerHaltedAll = this.PlayerHaltedAll.bind(this);
    this.Planet = this.Planet.bind(this);
    this.PlanetAll = this.PlanetAll.bind(this);
    this.PlanetAllByPlayer = this.PlanetAllByPlayer.bind(this);
    this.PlanetAttribute = this.PlanetAttribute.bind(this);
    this.PlanetAttributeAll = this.PlanetAttributeAll.bind(this);
    this.Provider = this.Provider.bind(this);
    this.ProviderAll = this.ProviderAll.bind(this);
    this.ProviderCollateralAddress = this.ProviderCollateralAddress.bind(this);
    this.ProviderCollateralAddressAll = this.ProviderCollateralAddressAll.bind(this);
    this.ProviderEarningsAddress = this.ProviderEarningsAddress.bind(this);
    this.ProviderEarningsAddressAll = this.ProviderEarningsAddressAll.bind(this);
    this.Reactor = this.Reactor.bind(this);
    this.ReactorAll = this.ReactorAll.bind(this);
    this.Struct = this.Struct.bind(this);
    this.StructAll = this.StructAll.bind(this);
    this.StructAttribute = this.StructAttribute.bind(this);
    this.StructAttributeAll = this.StructAttributeAll.bind(this);
    this.StructType = this.StructType.bind(this);
    this.StructTypeAll = this.StructTypeAll.bind(this);
    this.Substation = this.Substation.bind(this);
    this.SubstationAll = this.SubstationAll.bind(this);
    this.ValidateSignature = this.ValidateSignature.bind(this);
  }
  GetBlockHeight(request: QueryBlockHeight): Promise<QueryBlockHeightResponse> {
    const data = QueryBlockHeight.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBlockHeight", data);
    return promise.then((data) => QueryBlockHeightResponse.decode(new BinaryReader(data)));
  }

  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Address(request: QueryGetAddressRequest): Promise<QueryAddressResponse> {
    const data = QueryGetAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Address", data);
    return promise.then((data) => QueryAddressResponse.decode(new BinaryReader(data)));
  }

  AddressAll(request: QueryAllAddressRequest): Promise<QueryAllAddressResponse> {
    const data = QueryAllAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddressAll", data);
    return promise.then((data) => QueryAllAddressResponse.decode(new BinaryReader(data)));
  }

  AddressAllByPlayer(request: QueryAllAddressByPlayerRequest): Promise<QueryAllAddressResponse> {
    const data = QueryAllAddressByPlayerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddressAllByPlayer", data);
    return promise.then((data) => QueryAllAddressResponse.decode(new BinaryReader(data)));
  }

  Agreement(request: QueryGetAgreementRequest): Promise<QueryGetAgreementResponse> {
    const data = QueryGetAgreementRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Agreement", data);
    return promise.then((data) => QueryGetAgreementResponse.decode(new BinaryReader(data)));
  }

  AgreementAll(request: QueryAllAgreementRequest): Promise<QueryAllAgreementResponse> {
    const data = QueryAllAgreementRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AgreementAll", data);
    return promise.then((data) => QueryAllAgreementResponse.decode(new BinaryReader(data)));
  }

  AgreementAllByProvider(request: QueryAllAgreementByProviderRequest): Promise<QueryAllAgreementResponse> {
    const data = QueryAllAgreementByProviderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AgreementAllByProvider", data);
    return promise.then((data) => QueryAllAgreementResponse.decode(new BinaryReader(data)));
  }

  Allocation(request: QueryGetAllocationRequest): Promise<QueryGetAllocationResponse> {
    const data = QueryGetAllocationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Allocation", data);
    return promise.then((data) => QueryGetAllocationResponse.decode(new BinaryReader(data)));
  }

  AllocationAll(request: QueryAllAllocationRequest): Promise<QueryAllAllocationResponse> {
    const data = QueryAllAllocationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllocationAll", data);
    return promise.then((data) => QueryAllAllocationResponse.decode(new BinaryReader(data)));
  }

  AllocationAllBySource(request: QueryAllAllocationBySourceRequest): Promise<QueryAllAllocationResponse> {
    const data = QueryAllAllocationBySourceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllocationAllBySource", data);
    return promise.then((data) => QueryAllAllocationResponse.decode(new BinaryReader(data)));
  }

  AllocationAllByDestination(request: QueryAllAllocationByDestinationRequest): Promise<QueryAllAllocationResponse> {
    const data = QueryAllAllocationByDestinationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllocationAllByDestination", data);
    return promise.then((data) => QueryAllAllocationResponse.decode(new BinaryReader(data)));
  }

  Fleet(request: QueryGetFleetRequest): Promise<QueryGetFleetResponse> {
    const data = QueryGetFleetRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Fleet", data);
    return promise.then((data) => QueryGetFleetResponse.decode(new BinaryReader(data)));
  }

  FleetByIndex(request: QueryGetFleetByIndexRequest): Promise<QueryGetFleetResponse> {
    const data = QueryGetFleetByIndexRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FleetByIndex", data);
    return promise.then((data) => QueryGetFleetResponse.decode(new BinaryReader(data)));
  }

  FleetAll(request: QueryAllFleetRequest): Promise<QueryAllFleetResponse> {
    const data = QueryAllFleetRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FleetAll", data);
    return promise.then((data) => QueryAllFleetResponse.decode(new BinaryReader(data)));
  }

  Grid(request: QueryGetGridRequest): Promise<QueryGetGridResponse> {
    const data = QueryGetGridRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Grid", data);
    return promise.then((data) => QueryGetGridResponse.decode(new BinaryReader(data)));
  }

  GridAll(request: QueryAllGridRequest): Promise<QueryAllGridResponse> {
    const data = QueryAllGridRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GridAll", data);
    return promise.then((data) => QueryAllGridResponse.decode(new BinaryReader(data)));
  }

  Guild(request: QueryGetGuildRequest): Promise<QueryGetGuildResponse> {
    const data = QueryGetGuildRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Guild", data);
    return promise.then((data) => QueryGetGuildResponse.decode(new BinaryReader(data)));
  }

  GuildAll(request: QueryAllGuildRequest): Promise<QueryAllGuildResponse> {
    const data = QueryAllGuildRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GuildAll", data);
    return promise.then((data) => QueryAllGuildResponse.decode(new BinaryReader(data)));
  }

  GuildBankCollateralAddress(
    request: QueryGetGuildBankCollateralAddressRequest,
  ): Promise<QueryAllGuildBankCollateralAddressResponse> {
    const data = QueryGetGuildBankCollateralAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GuildBankCollateralAddress", data);
    return promise.then((data) => QueryAllGuildBankCollateralAddressResponse.decode(new BinaryReader(data)));
  }

  GuildBankCollateralAddressAll(
    request: QueryAllGuildBankCollateralAddressRequest,
  ): Promise<QueryAllGuildBankCollateralAddressResponse> {
    const data = QueryAllGuildBankCollateralAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GuildBankCollateralAddressAll", data);
    return promise.then((data) => QueryAllGuildBankCollateralAddressResponse.decode(new BinaryReader(data)));
  }

  GuildMembershipApplication(
    request: QueryGetGuildMembershipApplicationRequest,
  ): Promise<QueryGetGuildMembershipApplicationResponse> {
    const data = QueryGetGuildMembershipApplicationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GuildMembershipApplication", data);
    return promise.then((data) => QueryGetGuildMembershipApplicationResponse.decode(new BinaryReader(data)));
  }

  GuildMembershipApplicationAll(
    request: QueryAllGuildMembershipApplicationRequest,
  ): Promise<QueryAllGuildMembershipApplicationResponse> {
    const data = QueryAllGuildMembershipApplicationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GuildMembershipApplicationAll", data);
    return promise.then((data) => QueryAllGuildMembershipApplicationResponse.decode(new BinaryReader(data)));
  }

  Infusion(request: QueryGetInfusionRequest): Promise<QueryGetInfusionResponse> {
    const data = QueryGetInfusionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Infusion", data);
    return promise.then((data) => QueryGetInfusionResponse.decode(new BinaryReader(data)));
  }

  InfusionAll(request: QueryAllInfusionRequest): Promise<QueryAllInfusionResponse> {
    const data = QueryAllInfusionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InfusionAll", data);
    return promise.then((data) => QueryAllInfusionResponse.decode(new BinaryReader(data)));
  }

  InfusionAllByDestination(request: QueryAllInfusionByDestinationRequest): Promise<QueryAllInfusionResponse> {
    const data = QueryAllInfusionByDestinationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InfusionAllByDestination", data);
    return promise.then((data) => QueryAllInfusionResponse.decode(new BinaryReader(data)));
  }

  Permission(request: QueryGetPermissionRequest): Promise<QueryGetPermissionResponse> {
    const data = QueryGetPermissionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Permission", data);
    return promise.then((data) => QueryGetPermissionResponse.decode(new BinaryReader(data)));
  }

  PermissionByObject(request: QueryAllPermissionByObjectRequest): Promise<QueryAllPermissionResponse> {
    const data = QueryAllPermissionByObjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PermissionByObject", data);
    return promise.then((data) => QueryAllPermissionResponse.decode(new BinaryReader(data)));
  }

  PermissionByPlayer(request: QueryAllPermissionByPlayerRequest): Promise<QueryAllPermissionResponse> {
    const data = QueryAllPermissionByPlayerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PermissionByPlayer", data);
    return promise.then((data) => QueryAllPermissionResponse.decode(new BinaryReader(data)));
  }

  PermissionAll(request: QueryAllPermissionRequest): Promise<QueryAllPermissionResponse> {
    const data = QueryAllPermissionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PermissionAll", data);
    return promise.then((data) => QueryAllPermissionResponse.decode(new BinaryReader(data)));
  }

  Player(request: QueryGetPlayerRequest): Promise<QueryGetPlayerResponse> {
    const data = QueryGetPlayerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Player", data);
    return promise.then((data) => QueryGetPlayerResponse.decode(new BinaryReader(data)));
  }

  PlayerAll(request: QueryAllPlayerRequest): Promise<QueryAllPlayerResponse> {
    const data = QueryAllPlayerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PlayerAll", data);
    return promise.then((data) => QueryAllPlayerResponse.decode(new BinaryReader(data)));
  }

  PlayerHaltedAll(request: QueryAllPlayerHaltedRequest): Promise<QueryAllPlayerHaltedResponse> {
    const data = QueryAllPlayerHaltedRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PlayerHaltedAll", data);
    return promise.then((data) => QueryAllPlayerHaltedResponse.decode(new BinaryReader(data)));
  }

  Planet(request: QueryGetPlanetRequest): Promise<QueryGetPlanetResponse> {
    const data = QueryGetPlanetRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Planet", data);
    return promise.then((data) => QueryGetPlanetResponse.decode(new BinaryReader(data)));
  }

  PlanetAll(request: QueryAllPlanetRequest): Promise<QueryAllPlanetResponse> {
    const data = QueryAllPlanetRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PlanetAll", data);
    return promise.then((data) => QueryAllPlanetResponse.decode(new BinaryReader(data)));
  }

  PlanetAllByPlayer(request: QueryAllPlanetByPlayerRequest): Promise<QueryAllPlanetResponse> {
    const data = QueryAllPlanetByPlayerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PlanetAllByPlayer", data);
    return promise.then((data) => QueryAllPlanetResponse.decode(new BinaryReader(data)));
  }

  PlanetAttribute(request: QueryGetPlanetAttributeRequest): Promise<QueryGetPlanetAttributeResponse> {
    const data = QueryGetPlanetAttributeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PlanetAttribute", data);
    return promise.then((data) => QueryGetPlanetAttributeResponse.decode(new BinaryReader(data)));
  }

  PlanetAttributeAll(request: QueryAllPlanetAttributeRequest): Promise<QueryAllPlanetAttributeResponse> {
    const data = QueryAllPlanetAttributeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PlanetAttributeAll", data);
    return promise.then((data) => QueryAllPlanetAttributeResponse.decode(new BinaryReader(data)));
  }

  Provider(request: QueryGetProviderRequest): Promise<QueryGetProviderResponse> {
    const data = QueryGetProviderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Provider", data);
    return promise.then((data) => QueryGetProviderResponse.decode(new BinaryReader(data)));
  }

  ProviderAll(request: QueryAllProviderRequest): Promise<QueryAllProviderResponse> {
    const data = QueryAllProviderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProviderAll", data);
    return promise.then((data) => QueryAllProviderResponse.decode(new BinaryReader(data)));
  }

  ProviderCollateralAddress(
    request: QueryGetProviderCollateralAddressRequest,
  ): Promise<QueryAllProviderCollateralAddressResponse> {
    const data = QueryGetProviderCollateralAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProviderCollateralAddress", data);
    return promise.then((data) => QueryAllProviderCollateralAddressResponse.decode(new BinaryReader(data)));
  }

  ProviderCollateralAddressAll(
    request: QueryAllProviderCollateralAddressRequest,
  ): Promise<QueryAllProviderCollateralAddressResponse> {
    const data = QueryAllProviderCollateralAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProviderCollateralAddressAll", data);
    return promise.then((data) => QueryAllProviderCollateralAddressResponse.decode(new BinaryReader(data)));
  }

  ProviderEarningsAddress(
    request: QueryGetProviderEarningsAddressRequest,
  ): Promise<QueryAllProviderEarningsAddressResponse> {
    const data = QueryGetProviderEarningsAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProviderEarningsAddress", data);
    return promise.then((data) => QueryAllProviderEarningsAddressResponse.decode(new BinaryReader(data)));
  }

  ProviderEarningsAddressAll(
    request: QueryAllProviderEarningsAddressRequest,
  ): Promise<QueryAllProviderEarningsAddressResponse> {
    const data = QueryAllProviderEarningsAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProviderEarningsAddressAll", data);
    return promise.then((data) => QueryAllProviderEarningsAddressResponse.decode(new BinaryReader(data)));
  }

  Reactor(request: QueryGetReactorRequest): Promise<QueryGetReactorResponse> {
    const data = QueryGetReactorRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Reactor", data);
    return promise.then((data) => QueryGetReactorResponse.decode(new BinaryReader(data)));
  }

  ReactorAll(request: QueryAllReactorRequest): Promise<QueryAllReactorResponse> {
    const data = QueryAllReactorRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ReactorAll", data);
    return promise.then((data) => QueryAllReactorResponse.decode(new BinaryReader(data)));
  }

  Struct(request: QueryGetStructRequest): Promise<QueryGetStructResponse> {
    const data = QueryGetStructRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Struct", data);
    return promise.then((data) => QueryGetStructResponse.decode(new BinaryReader(data)));
  }

  StructAll(request: QueryAllStructRequest): Promise<QueryAllStructResponse> {
    const data = QueryAllStructRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StructAll", data);
    return promise.then((data) => QueryAllStructResponse.decode(new BinaryReader(data)));
  }

  StructAttribute(request: QueryGetStructAttributeRequest): Promise<QueryGetStructAttributeResponse> {
    const data = QueryGetStructAttributeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StructAttribute", data);
    return promise.then((data) => QueryGetStructAttributeResponse.decode(new BinaryReader(data)));
  }

  StructAttributeAll(request: QueryAllStructAttributeRequest): Promise<QueryAllStructAttributeResponse> {
    const data = QueryAllStructAttributeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StructAttributeAll", data);
    return promise.then((data) => QueryAllStructAttributeResponse.decode(new BinaryReader(data)));
  }

  StructType(request: QueryGetStructTypeRequest): Promise<QueryGetStructTypeResponse> {
    const data = QueryGetStructTypeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StructType", data);
    return promise.then((data) => QueryGetStructTypeResponse.decode(new BinaryReader(data)));
  }

  StructTypeAll(request: QueryAllStructTypeRequest): Promise<QueryAllStructTypeResponse> {
    const data = QueryAllStructTypeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StructTypeAll", data);
    return promise.then((data) => QueryAllStructTypeResponse.decode(new BinaryReader(data)));
  }

  Substation(request: QueryGetSubstationRequest): Promise<QueryGetSubstationResponse> {
    const data = QueryGetSubstationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Substation", data);
    return promise.then((data) => QueryGetSubstationResponse.decode(new BinaryReader(data)));
  }

  SubstationAll(request: QueryAllSubstationRequest): Promise<QueryAllSubstationResponse> {
    const data = QueryAllSubstationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubstationAll", data);
    return promise.then((data) => QueryAllSubstationResponse.decode(new BinaryReader(data)));
  }

  ValidateSignature(request: QueryValidateSignatureRequest): Promise<QueryValidateSignatureResponse> {
    const data = QueryValidateSignatureRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ValidateSignature", data);
    return promise.then((data) => QueryValidateSignatureResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
