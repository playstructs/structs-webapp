// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: structs/structs/struct.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  ambit,
  ambitFromJSON,
  ambitToJSON,
  objectType,
  objectTypeFromJSON,
  objectTypeToJSON,
  techActiveWeaponry,
  techActiveWeaponryFromJSON,
  techActiveWeaponryToJSON,
  techOreReserveDefenses,
  techOreReserveDefensesFromJSON,
  techOreReserveDefensesToJSON,
  techPassiveWeaponry,
  techPassiveWeaponryFromJSON,
  techPassiveWeaponryToJSON,
  techPlanetaryDefenses,
  techPlanetaryDefensesFromJSON,
  techPlanetaryDefensesToJSON,
  techPlanetaryMining,
  techPlanetaryMiningFromJSON,
  techPlanetaryMiningToJSON,
  techPlanetaryRefineries,
  techPlanetaryRefineriesFromJSON,
  techPlanetaryRefineriesToJSON,
  techPowerGeneration,
  techPowerGenerationFromJSON,
  techPowerGenerationToJSON,
  techUnitDefenses,
  techUnitDefensesFromJSON,
  techUnitDefensesToJSON,
  techWeaponControl,
  techWeaponControlFromJSON,
  techWeaponControlToJSON,
} from "./keys";

export const protobufPackage = "structs.structs";

export interface Struct {
  /** What it is */
  id: string;
  index: number;
  type: number;
  /** Who is it */
  creator: string;
  owner: string;
  /** Where it is */
  locationType: objectType;
  locationId: string;
  operatingAmbit: ambit;
  slot: number;
}

export interface StructType {
  id: number;
  type: string;
  /** Fundamental attributes */
  category: objectType;
  /** How many of this Struct Type a player can have */
  buildLimit: number;
  /** How much compute is needed to build */
  buildDifficulty: number;
  /** How much energy the Struct consumes during building */
  buildDraw: number;
  /** How much damage can it take */
  maxHealth: number;
  /** How much energy the Struct consumes when active */
  passiveDraw: number;
  /**
   * Details about location and movement
   * TODO move category to here and make it flag based too
   * Replicate what was done for ambits flags
   */
  possibleAmbit: number;
  /** Can the Struct change ambit? */
  movable: boolean;
  /** Does the Struct occupy a slot. Trying to find something to help set Command Ships apart */
  slotBound: boolean;
  /** Primary Weapon Configuration */
  primaryWeapon: techActiveWeaponry;
  primaryWeaponControl: techWeaponControl;
  primaryWeaponCharge: number;
  primaryWeaponAmbits: number;
  primaryWeaponTargets: number;
  primaryWeaponShots: number;
  primaryWeaponDamage: number;
  primaryWeaponBlockable: boolean;
  primaryWeaponCounterable: boolean;
  primaryWeaponRecoilDamage: number;
  primaryWeaponShotSuccessRateNumerator: number;
  primaryWeaponShotSuccessRateDenominator: number;
  /** Secondary Weapon Configuration */
  secondaryWeapon: techActiveWeaponry;
  secondaryWeaponControl: techWeaponControl;
  secondaryWeaponCharge: number;
  secondaryWeaponAmbits: number;
  secondaryWeaponTargets: number;
  secondaryWeaponShots: number;
  secondaryWeaponDamage: number;
  secondaryWeaponBlockable: boolean;
  secondaryWeaponCounterable: boolean;
  secondaryWeaponRecoilDamage: number;
  secondaryWeaponShotSuccessRateNumerator: number;
  secondaryWeaponShotSuccessRateDenominator: number;
  /** Tech Tree Features */
  passiveWeaponry: techPassiveWeaponry;
  unitDefenses: techUnitDefenses;
  oreReserveDefenses: techOreReserveDefenses;
  planetaryDefenses: techPlanetaryDefenses;
  planetaryMining: techPlanetaryMining;
  planetaryRefinery: techPlanetaryRefineries;
  powerGeneration: techPowerGeneration;
  /** Charge uses */
  activateCharge: number;
  buildCharge: number;
  defendChangeCharge: number;
  moveCharge: number;
  oreMiningCharge: number;
  oreRefiningCharge: number;
  stealthActivateCharge: number;
  /** Tech Tree Attributes */
  attackReduction: number;
  /** For Indirect Combat Module */
  attackCounterable: boolean;
  /** For Stealth Mode */
  stealthSystems: boolean;
  /** Counter */
  counterAttack: number;
  /** Advanced Counter */
  counterAttackSameAmbit: number;
  postDestructionDamage: number;
  /** Power Generation */
  generatingRate: number;
  /** The shield that is added to the Planet */
  planetaryShieldContribution: number;
  oreMiningDifficulty: number;
  oreRefiningDifficulty: number;
  unguidedDefensiveSuccessRateNumerator: number;
  unguidedDefensiveSuccessRateDenominator: number;
  guidedDefensiveSuccessRateNumerator: number;
  guidedDefensiveSuccessRateDenominator: number;
  /**
   * I wish this was higher up in a different area of the definition
   * but I really don't feel like renumbering this entire thing again.
   */
  triggerRaidDefeatByDestruction: boolean;
}

export interface StructDefender {
  protectedStructId: string;
  defendingStructId: string;
}

export interface StructDefenders {
  structDefenders: StructDefender[];
}

export interface StructAttributeRecord {
  attributeId: string;
  value: number;
}

export interface StructAttributes {
  health: number;
  status: number;
  blockStartBuild: number;
  blockStartOreMine: number;
  blockStartOreRefine: number;
  protectedStructIndex: number;
  typeCount: number;
  isMaterialized: boolean;
  isBuilt: boolean;
  isOnline: boolean;
  isHidden: boolean;
  isDestroyed: boolean;
  isLocked: boolean;
}

function createBaseStruct(): Struct {
  return {
    id: "",
    index: 0,
    type: 0,
    creator: "",
    owner: "",
    locationType: 0,
    locationId: "",
    operatingAmbit: 0,
    slot: 0,
  };
}

export const Struct: MessageFns<Struct> = {
  encode(message: Struct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint64(message.index);
    }
    if (message.type !== 0) {
      writer.uint32(24).uint64(message.type);
    }
    if (message.creator !== "") {
      writer.uint32(34).string(message.creator);
    }
    if (message.owner !== "") {
      writer.uint32(42).string(message.owner);
    }
    if (message.locationType !== 0) {
      writer.uint32(48).int32(message.locationType);
    }
    if (message.locationId !== "") {
      writer.uint32(58).string(message.locationId);
    }
    if (message.operatingAmbit !== 0) {
      writer.uint32(64).int32(message.operatingAmbit);
    }
    if (message.slot !== 0) {
      writer.uint32(72).uint64(message.slot);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Struct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStruct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.locationType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.locationId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.operatingAmbit = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.slot = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Struct {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      locationType: isSet(object.locationType) ? objectTypeFromJSON(object.locationType) : 0,
      locationId: isSet(object.locationId) ? globalThis.String(object.locationId) : "",
      operatingAmbit: isSet(object.operatingAmbit) ? ambitFromJSON(object.operatingAmbit) : 0,
      slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0,
    };
  },

  toJSON(message: Struct): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.locationType !== 0) {
      obj.locationType = objectTypeToJSON(message.locationType);
    }
    if (message.locationId !== "") {
      obj.locationId = message.locationId;
    }
    if (message.operatingAmbit !== 0) {
      obj.operatingAmbit = ambitToJSON(message.operatingAmbit);
    }
    if (message.slot !== 0) {
      obj.slot = Math.round(message.slot);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Struct>, I>>(base?: I): Struct {
    return Struct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Struct>, I>>(object: I): Struct {
    const message = createBaseStruct();
    message.id = object.id ?? "";
    message.index = object.index ?? 0;
    message.type = object.type ?? 0;
    message.creator = object.creator ?? "";
    message.owner = object.owner ?? "";
    message.locationType = object.locationType ?? 0;
    message.locationId = object.locationId ?? "";
    message.operatingAmbit = object.operatingAmbit ?? 0;
    message.slot = object.slot ?? 0;
    return message;
  },
};

function createBaseStructType(): StructType {
  return {
    id: 0,
    type: "",
    category: 0,
    buildLimit: 0,
    buildDifficulty: 0,
    buildDraw: 0,
    maxHealth: 0,
    passiveDraw: 0,
    possibleAmbit: 0,
    movable: false,
    slotBound: false,
    primaryWeapon: 0,
    primaryWeaponControl: 0,
    primaryWeaponCharge: 0,
    primaryWeaponAmbits: 0,
    primaryWeaponTargets: 0,
    primaryWeaponShots: 0,
    primaryWeaponDamage: 0,
    primaryWeaponBlockable: false,
    primaryWeaponCounterable: false,
    primaryWeaponRecoilDamage: 0,
    primaryWeaponShotSuccessRateNumerator: 0,
    primaryWeaponShotSuccessRateDenominator: 0,
    secondaryWeapon: 0,
    secondaryWeaponControl: 0,
    secondaryWeaponCharge: 0,
    secondaryWeaponAmbits: 0,
    secondaryWeaponTargets: 0,
    secondaryWeaponShots: 0,
    secondaryWeaponDamage: 0,
    secondaryWeaponBlockable: false,
    secondaryWeaponCounterable: false,
    secondaryWeaponRecoilDamage: 0,
    secondaryWeaponShotSuccessRateNumerator: 0,
    secondaryWeaponShotSuccessRateDenominator: 0,
    passiveWeaponry: 0,
    unitDefenses: 0,
    oreReserveDefenses: 0,
    planetaryDefenses: 0,
    planetaryMining: 0,
    planetaryRefinery: 0,
    powerGeneration: 0,
    activateCharge: 0,
    buildCharge: 0,
    defendChangeCharge: 0,
    moveCharge: 0,
    oreMiningCharge: 0,
    oreRefiningCharge: 0,
    stealthActivateCharge: 0,
    attackReduction: 0,
    attackCounterable: false,
    stealthSystems: false,
    counterAttack: 0,
    counterAttackSameAmbit: 0,
    postDestructionDamage: 0,
    generatingRate: 0,
    planetaryShieldContribution: 0,
    oreMiningDifficulty: 0,
    oreRefiningDifficulty: 0,
    unguidedDefensiveSuccessRateNumerator: 0,
    unguidedDefensiveSuccessRateDenominator: 0,
    guidedDefensiveSuccessRateNumerator: 0,
    guidedDefensiveSuccessRateDenominator: 0,
    triggerRaidDefeatByDestruction: false,
  };
}

export const StructType: MessageFns<StructType> = {
  encode(message: StructType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.category !== 0) {
      writer.uint32(24).int32(message.category);
    }
    if (message.buildLimit !== 0) {
      writer.uint32(32).uint64(message.buildLimit);
    }
    if (message.buildDifficulty !== 0) {
      writer.uint32(40).uint64(message.buildDifficulty);
    }
    if (message.buildDraw !== 0) {
      writer.uint32(48).uint64(message.buildDraw);
    }
    if (message.maxHealth !== 0) {
      writer.uint32(56).uint64(message.maxHealth);
    }
    if (message.passiveDraw !== 0) {
      writer.uint32(64).uint64(message.passiveDraw);
    }
    if (message.possibleAmbit !== 0) {
      writer.uint32(72).uint64(message.possibleAmbit);
    }
    if (message.movable !== false) {
      writer.uint32(80).bool(message.movable);
    }
    if (message.slotBound !== false) {
      writer.uint32(88).bool(message.slotBound);
    }
    if (message.primaryWeapon !== 0) {
      writer.uint32(96).int32(message.primaryWeapon);
    }
    if (message.primaryWeaponControl !== 0) {
      writer.uint32(104).int32(message.primaryWeaponControl);
    }
    if (message.primaryWeaponCharge !== 0) {
      writer.uint32(112).uint64(message.primaryWeaponCharge);
    }
    if (message.primaryWeaponAmbits !== 0) {
      writer.uint32(120).uint64(message.primaryWeaponAmbits);
    }
    if (message.primaryWeaponTargets !== 0) {
      writer.uint32(128).uint64(message.primaryWeaponTargets);
    }
    if (message.primaryWeaponShots !== 0) {
      writer.uint32(136).uint64(message.primaryWeaponShots);
    }
    if (message.primaryWeaponDamage !== 0) {
      writer.uint32(144).uint64(message.primaryWeaponDamage);
    }
    if (message.primaryWeaponBlockable !== false) {
      writer.uint32(152).bool(message.primaryWeaponBlockable);
    }
    if (message.primaryWeaponCounterable !== false) {
      writer.uint32(160).bool(message.primaryWeaponCounterable);
    }
    if (message.primaryWeaponRecoilDamage !== 0) {
      writer.uint32(168).uint64(message.primaryWeaponRecoilDamage);
    }
    if (message.primaryWeaponShotSuccessRateNumerator !== 0) {
      writer.uint32(176).uint64(message.primaryWeaponShotSuccessRateNumerator);
    }
    if (message.primaryWeaponShotSuccessRateDenominator !== 0) {
      writer.uint32(184).uint64(message.primaryWeaponShotSuccessRateDenominator);
    }
    if (message.secondaryWeapon !== 0) {
      writer.uint32(192).int32(message.secondaryWeapon);
    }
    if (message.secondaryWeaponControl !== 0) {
      writer.uint32(200).int32(message.secondaryWeaponControl);
    }
    if (message.secondaryWeaponCharge !== 0) {
      writer.uint32(208).uint64(message.secondaryWeaponCharge);
    }
    if (message.secondaryWeaponAmbits !== 0) {
      writer.uint32(216).uint64(message.secondaryWeaponAmbits);
    }
    if (message.secondaryWeaponTargets !== 0) {
      writer.uint32(224).uint64(message.secondaryWeaponTargets);
    }
    if (message.secondaryWeaponShots !== 0) {
      writer.uint32(232).uint64(message.secondaryWeaponShots);
    }
    if (message.secondaryWeaponDamage !== 0) {
      writer.uint32(240).uint64(message.secondaryWeaponDamage);
    }
    if (message.secondaryWeaponBlockable !== false) {
      writer.uint32(248).bool(message.secondaryWeaponBlockable);
    }
    if (message.secondaryWeaponCounterable !== false) {
      writer.uint32(256).bool(message.secondaryWeaponCounterable);
    }
    if (message.secondaryWeaponRecoilDamage !== 0) {
      writer.uint32(264).uint64(message.secondaryWeaponRecoilDamage);
    }
    if (message.secondaryWeaponShotSuccessRateNumerator !== 0) {
      writer.uint32(272).uint64(message.secondaryWeaponShotSuccessRateNumerator);
    }
    if (message.secondaryWeaponShotSuccessRateDenominator !== 0) {
      writer.uint32(280).uint64(message.secondaryWeaponShotSuccessRateDenominator);
    }
    if (message.passiveWeaponry !== 0) {
      writer.uint32(288).int32(message.passiveWeaponry);
    }
    if (message.unitDefenses !== 0) {
      writer.uint32(296).int32(message.unitDefenses);
    }
    if (message.oreReserveDefenses !== 0) {
      writer.uint32(304).int32(message.oreReserveDefenses);
    }
    if (message.planetaryDefenses !== 0) {
      writer.uint32(312).int32(message.planetaryDefenses);
    }
    if (message.planetaryMining !== 0) {
      writer.uint32(320).int32(message.planetaryMining);
    }
    if (message.planetaryRefinery !== 0) {
      writer.uint32(328).int32(message.planetaryRefinery);
    }
    if (message.powerGeneration !== 0) {
      writer.uint32(336).int32(message.powerGeneration);
    }
    if (message.activateCharge !== 0) {
      writer.uint32(344).uint64(message.activateCharge);
    }
    if (message.buildCharge !== 0) {
      writer.uint32(352).uint64(message.buildCharge);
    }
    if (message.defendChangeCharge !== 0) {
      writer.uint32(360).uint64(message.defendChangeCharge);
    }
    if (message.moveCharge !== 0) {
      writer.uint32(368).uint64(message.moveCharge);
    }
    if (message.oreMiningCharge !== 0) {
      writer.uint32(376).uint64(message.oreMiningCharge);
    }
    if (message.oreRefiningCharge !== 0) {
      writer.uint32(384).uint64(message.oreRefiningCharge);
    }
    if (message.stealthActivateCharge !== 0) {
      writer.uint32(392).uint64(message.stealthActivateCharge);
    }
    if (message.attackReduction !== 0) {
      writer.uint32(400).uint64(message.attackReduction);
    }
    if (message.attackCounterable !== false) {
      writer.uint32(408).bool(message.attackCounterable);
    }
    if (message.stealthSystems !== false) {
      writer.uint32(416).bool(message.stealthSystems);
    }
    if (message.counterAttack !== 0) {
      writer.uint32(424).uint64(message.counterAttack);
    }
    if (message.counterAttackSameAmbit !== 0) {
      writer.uint32(432).uint64(message.counterAttackSameAmbit);
    }
    if (message.postDestructionDamage !== 0) {
      writer.uint32(440).uint64(message.postDestructionDamage);
    }
    if (message.generatingRate !== 0) {
      writer.uint32(448).uint64(message.generatingRate);
    }
    if (message.planetaryShieldContribution !== 0) {
      writer.uint32(456).uint64(message.planetaryShieldContribution);
    }
    if (message.oreMiningDifficulty !== 0) {
      writer.uint32(464).uint64(message.oreMiningDifficulty);
    }
    if (message.oreRefiningDifficulty !== 0) {
      writer.uint32(472).uint64(message.oreRefiningDifficulty);
    }
    if (message.unguidedDefensiveSuccessRateNumerator !== 0) {
      writer.uint32(480).uint64(message.unguidedDefensiveSuccessRateNumerator);
    }
    if (message.unguidedDefensiveSuccessRateDenominator !== 0) {
      writer.uint32(488).uint64(message.unguidedDefensiveSuccessRateDenominator);
    }
    if (message.guidedDefensiveSuccessRateNumerator !== 0) {
      writer.uint32(496).uint64(message.guidedDefensiveSuccessRateNumerator);
    }
    if (message.guidedDefensiveSuccessRateDenominator !== 0) {
      writer.uint32(504).uint64(message.guidedDefensiveSuccessRateDenominator);
    }
    if (message.triggerRaidDefeatByDestruction !== false) {
      writer.uint32(512).bool(message.triggerRaidDefeatByDestruction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.category = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.buildLimit = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.buildDifficulty = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.buildDraw = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.maxHealth = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.passiveDraw = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.possibleAmbit = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.movable = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.slotBound = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.primaryWeapon = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.primaryWeaponControl = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.primaryWeaponCharge = longToNumber(reader.uint64());
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.primaryWeaponAmbits = longToNumber(reader.uint64());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.primaryWeaponTargets = longToNumber(reader.uint64());
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.primaryWeaponShots = longToNumber(reader.uint64());
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.primaryWeaponDamage = longToNumber(reader.uint64());
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.primaryWeaponBlockable = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.primaryWeaponCounterable = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.primaryWeaponRecoilDamage = longToNumber(reader.uint64());
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.primaryWeaponShotSuccessRateNumerator = longToNumber(reader.uint64());
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.primaryWeaponShotSuccessRateDenominator = longToNumber(reader.uint64());
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.secondaryWeapon = reader.int32() as any;
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.secondaryWeaponControl = reader.int32() as any;
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.secondaryWeaponCharge = longToNumber(reader.uint64());
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.secondaryWeaponAmbits = longToNumber(reader.uint64());
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.secondaryWeaponTargets = longToNumber(reader.uint64());
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.secondaryWeaponShots = longToNumber(reader.uint64());
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.secondaryWeaponDamage = longToNumber(reader.uint64());
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.secondaryWeaponBlockable = reader.bool();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.secondaryWeaponCounterable = reader.bool();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.secondaryWeaponRecoilDamage = longToNumber(reader.uint64());
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.secondaryWeaponShotSuccessRateNumerator = longToNumber(reader.uint64());
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.secondaryWeaponShotSuccessRateDenominator = longToNumber(reader.uint64());
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.passiveWeaponry = reader.int32() as any;
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.unitDefenses = reader.int32() as any;
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.oreReserveDefenses = reader.int32() as any;
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.planetaryDefenses = reader.int32() as any;
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.planetaryMining = reader.int32() as any;
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.planetaryRefinery = reader.int32() as any;
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.powerGeneration = reader.int32() as any;
          continue;
        }
        case 43: {
          if (tag !== 344) {
            break;
          }

          message.activateCharge = longToNumber(reader.uint64());
          continue;
        }
        case 44: {
          if (tag !== 352) {
            break;
          }

          message.buildCharge = longToNumber(reader.uint64());
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.defendChangeCharge = longToNumber(reader.uint64());
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.moveCharge = longToNumber(reader.uint64());
          continue;
        }
        case 47: {
          if (tag !== 376) {
            break;
          }

          message.oreMiningCharge = longToNumber(reader.uint64());
          continue;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.oreRefiningCharge = longToNumber(reader.uint64());
          continue;
        }
        case 49: {
          if (tag !== 392) {
            break;
          }

          message.stealthActivateCharge = longToNumber(reader.uint64());
          continue;
        }
        case 50: {
          if (tag !== 400) {
            break;
          }

          message.attackReduction = longToNumber(reader.uint64());
          continue;
        }
        case 51: {
          if (tag !== 408) {
            break;
          }

          message.attackCounterable = reader.bool();
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.stealthSystems = reader.bool();
          continue;
        }
        case 53: {
          if (tag !== 424) {
            break;
          }

          message.counterAttack = longToNumber(reader.uint64());
          continue;
        }
        case 54: {
          if (tag !== 432) {
            break;
          }

          message.counterAttackSameAmbit = longToNumber(reader.uint64());
          continue;
        }
        case 55: {
          if (tag !== 440) {
            break;
          }

          message.postDestructionDamage = longToNumber(reader.uint64());
          continue;
        }
        case 56: {
          if (tag !== 448) {
            break;
          }

          message.generatingRate = longToNumber(reader.uint64());
          continue;
        }
        case 57: {
          if (tag !== 456) {
            break;
          }

          message.planetaryShieldContribution = longToNumber(reader.uint64());
          continue;
        }
        case 58: {
          if (tag !== 464) {
            break;
          }

          message.oreMiningDifficulty = longToNumber(reader.uint64());
          continue;
        }
        case 59: {
          if (tag !== 472) {
            break;
          }

          message.oreRefiningDifficulty = longToNumber(reader.uint64());
          continue;
        }
        case 60: {
          if (tag !== 480) {
            break;
          }

          message.unguidedDefensiveSuccessRateNumerator = longToNumber(reader.uint64());
          continue;
        }
        case 61: {
          if (tag !== 488) {
            break;
          }

          message.unguidedDefensiveSuccessRateDenominator = longToNumber(reader.uint64());
          continue;
        }
        case 62: {
          if (tag !== 496) {
            break;
          }

          message.guidedDefensiveSuccessRateNumerator = longToNumber(reader.uint64());
          continue;
        }
        case 63: {
          if (tag !== 504) {
            break;
          }

          message.guidedDefensiveSuccessRateDenominator = longToNumber(reader.uint64());
          continue;
        }
        case 64: {
          if (tag !== 512) {
            break;
          }

          message.triggerRaidDefeatByDestruction = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructType {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      category: isSet(object.category) ? objectTypeFromJSON(object.category) : 0,
      buildLimit: isSet(object.buildLimit) ? globalThis.Number(object.buildLimit) : 0,
      buildDifficulty: isSet(object.buildDifficulty) ? globalThis.Number(object.buildDifficulty) : 0,
      buildDraw: isSet(object.buildDraw) ? globalThis.Number(object.buildDraw) : 0,
      maxHealth: isSet(object.maxHealth) ? globalThis.Number(object.maxHealth) : 0,
      passiveDraw: isSet(object.passiveDraw) ? globalThis.Number(object.passiveDraw) : 0,
      possibleAmbit: isSet(object.possibleAmbit) ? globalThis.Number(object.possibleAmbit) : 0,
      movable: isSet(object.movable) ? globalThis.Boolean(object.movable) : false,
      slotBound: isSet(object.slotBound) ? globalThis.Boolean(object.slotBound) : false,
      primaryWeapon: isSet(object.primaryWeapon) ? techActiveWeaponryFromJSON(object.primaryWeapon) : 0,
      primaryWeaponControl: isSet(object.primaryWeaponControl)
        ? techWeaponControlFromJSON(object.primaryWeaponControl)
        : 0,
      primaryWeaponCharge: isSet(object.primaryWeaponCharge) ? globalThis.Number(object.primaryWeaponCharge) : 0,
      primaryWeaponAmbits: isSet(object.primaryWeaponAmbits) ? globalThis.Number(object.primaryWeaponAmbits) : 0,
      primaryWeaponTargets: isSet(object.primaryWeaponTargets) ? globalThis.Number(object.primaryWeaponTargets) : 0,
      primaryWeaponShots: isSet(object.primaryWeaponShots) ? globalThis.Number(object.primaryWeaponShots) : 0,
      primaryWeaponDamage: isSet(object.primaryWeaponDamage) ? globalThis.Number(object.primaryWeaponDamage) : 0,
      primaryWeaponBlockable: isSet(object.primaryWeaponBlockable)
        ? globalThis.Boolean(object.primaryWeaponBlockable)
        : false,
      primaryWeaponCounterable: isSet(object.primaryWeaponCounterable)
        ? globalThis.Boolean(object.primaryWeaponCounterable)
        : false,
      primaryWeaponRecoilDamage: isSet(object.primaryWeaponRecoilDamage)
        ? globalThis.Number(object.primaryWeaponRecoilDamage)
        : 0,
      primaryWeaponShotSuccessRateNumerator: isSet(object.primaryWeaponShotSuccessRateNumerator)
        ? globalThis.Number(object.primaryWeaponShotSuccessRateNumerator)
        : 0,
      primaryWeaponShotSuccessRateDenominator: isSet(object.primaryWeaponShotSuccessRateDenominator)
        ? globalThis.Number(object.primaryWeaponShotSuccessRateDenominator)
        : 0,
      secondaryWeapon: isSet(object.secondaryWeapon) ? techActiveWeaponryFromJSON(object.secondaryWeapon) : 0,
      secondaryWeaponControl: isSet(object.secondaryWeaponControl)
        ? techWeaponControlFromJSON(object.secondaryWeaponControl)
        : 0,
      secondaryWeaponCharge: isSet(object.secondaryWeaponCharge) ? globalThis.Number(object.secondaryWeaponCharge) : 0,
      secondaryWeaponAmbits: isSet(object.secondaryWeaponAmbits) ? globalThis.Number(object.secondaryWeaponAmbits) : 0,
      secondaryWeaponTargets: isSet(object.secondaryWeaponTargets)
        ? globalThis.Number(object.secondaryWeaponTargets)
        : 0,
      secondaryWeaponShots: isSet(object.secondaryWeaponShots) ? globalThis.Number(object.secondaryWeaponShots) : 0,
      secondaryWeaponDamage: isSet(object.secondaryWeaponDamage) ? globalThis.Number(object.secondaryWeaponDamage) : 0,
      secondaryWeaponBlockable: isSet(object.secondaryWeaponBlockable)
        ? globalThis.Boolean(object.secondaryWeaponBlockable)
        : false,
      secondaryWeaponCounterable: isSet(object.secondaryWeaponCounterable)
        ? globalThis.Boolean(object.secondaryWeaponCounterable)
        : false,
      secondaryWeaponRecoilDamage: isSet(object.secondaryWeaponRecoilDamage)
        ? globalThis.Number(object.secondaryWeaponRecoilDamage)
        : 0,
      secondaryWeaponShotSuccessRateNumerator: isSet(object.secondaryWeaponShotSuccessRateNumerator)
        ? globalThis.Number(object.secondaryWeaponShotSuccessRateNumerator)
        : 0,
      secondaryWeaponShotSuccessRateDenominator: isSet(object.secondaryWeaponShotSuccessRateDenominator)
        ? globalThis.Number(object.secondaryWeaponShotSuccessRateDenominator)
        : 0,
      passiveWeaponry: isSet(object.passiveWeaponry) ? techPassiveWeaponryFromJSON(object.passiveWeaponry) : 0,
      unitDefenses: isSet(object.unitDefenses) ? techUnitDefensesFromJSON(object.unitDefenses) : 0,
      oreReserveDefenses: isSet(object.oreReserveDefenses)
        ? techOreReserveDefensesFromJSON(object.oreReserveDefenses)
        : 0,
      planetaryDefenses: isSet(object.planetaryDefenses) ? techPlanetaryDefensesFromJSON(object.planetaryDefenses) : 0,
      planetaryMining: isSet(object.planetaryMining) ? techPlanetaryMiningFromJSON(object.planetaryMining) : 0,
      planetaryRefinery: isSet(object.planetaryRefinery)
        ? techPlanetaryRefineriesFromJSON(object.planetaryRefinery)
        : 0,
      powerGeneration: isSet(object.powerGeneration) ? techPowerGenerationFromJSON(object.powerGeneration) : 0,
      activateCharge: isSet(object.activateCharge) ? globalThis.Number(object.activateCharge) : 0,
      buildCharge: isSet(object.buildCharge) ? globalThis.Number(object.buildCharge) : 0,
      defendChangeCharge: isSet(object.defendChangeCharge) ? globalThis.Number(object.defendChangeCharge) : 0,
      moveCharge: isSet(object.moveCharge) ? globalThis.Number(object.moveCharge) : 0,
      oreMiningCharge: isSet(object.oreMiningCharge) ? globalThis.Number(object.oreMiningCharge) : 0,
      oreRefiningCharge: isSet(object.oreRefiningCharge) ? globalThis.Number(object.oreRefiningCharge) : 0,
      stealthActivateCharge: isSet(object.stealthActivateCharge) ? globalThis.Number(object.stealthActivateCharge) : 0,
      attackReduction: isSet(object.attackReduction) ? globalThis.Number(object.attackReduction) : 0,
      attackCounterable: isSet(object.attackCounterable) ? globalThis.Boolean(object.attackCounterable) : false,
      stealthSystems: isSet(object.stealthSystems) ? globalThis.Boolean(object.stealthSystems) : false,
      counterAttack: isSet(object.counterAttack) ? globalThis.Number(object.counterAttack) : 0,
      counterAttackSameAmbit: isSet(object.counterAttackSameAmbit)
        ? globalThis.Number(object.counterAttackSameAmbit)
        : 0,
      postDestructionDamage: isSet(object.postDestructionDamage) ? globalThis.Number(object.postDestructionDamage) : 0,
      generatingRate: isSet(object.generatingRate) ? globalThis.Number(object.generatingRate) : 0,
      planetaryShieldContribution: isSet(object.planetaryShieldContribution)
        ? globalThis.Number(object.planetaryShieldContribution)
        : 0,
      oreMiningDifficulty: isSet(object.oreMiningDifficulty) ? globalThis.Number(object.oreMiningDifficulty) : 0,
      oreRefiningDifficulty: isSet(object.oreRefiningDifficulty) ? globalThis.Number(object.oreRefiningDifficulty) : 0,
      unguidedDefensiveSuccessRateNumerator: isSet(object.unguidedDefensiveSuccessRateNumerator)
        ? globalThis.Number(object.unguidedDefensiveSuccessRateNumerator)
        : 0,
      unguidedDefensiveSuccessRateDenominator: isSet(object.unguidedDefensiveSuccessRateDenominator)
        ? globalThis.Number(object.unguidedDefensiveSuccessRateDenominator)
        : 0,
      guidedDefensiveSuccessRateNumerator: isSet(object.guidedDefensiveSuccessRateNumerator)
        ? globalThis.Number(object.guidedDefensiveSuccessRateNumerator)
        : 0,
      guidedDefensiveSuccessRateDenominator: isSet(object.guidedDefensiveSuccessRateDenominator)
        ? globalThis.Number(object.guidedDefensiveSuccessRateDenominator)
        : 0,
      triggerRaidDefeatByDestruction: isSet(object.triggerRaidDefeatByDestruction)
        ? globalThis.Boolean(object.triggerRaidDefeatByDestruction)
        : false,
    };
  },

  toJSON(message: StructType): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.category !== 0) {
      obj.category = objectTypeToJSON(message.category);
    }
    if (message.buildLimit !== 0) {
      obj.buildLimit = Math.round(message.buildLimit);
    }
    if (message.buildDifficulty !== 0) {
      obj.buildDifficulty = Math.round(message.buildDifficulty);
    }
    if (message.buildDraw !== 0) {
      obj.buildDraw = Math.round(message.buildDraw);
    }
    if (message.maxHealth !== 0) {
      obj.maxHealth = Math.round(message.maxHealth);
    }
    if (message.passiveDraw !== 0) {
      obj.passiveDraw = Math.round(message.passiveDraw);
    }
    if (message.possibleAmbit !== 0) {
      obj.possibleAmbit = Math.round(message.possibleAmbit);
    }
    if (message.movable !== false) {
      obj.movable = message.movable;
    }
    if (message.slotBound !== false) {
      obj.slotBound = message.slotBound;
    }
    if (message.primaryWeapon !== 0) {
      obj.primaryWeapon = techActiveWeaponryToJSON(message.primaryWeapon);
    }
    if (message.primaryWeaponControl !== 0) {
      obj.primaryWeaponControl = techWeaponControlToJSON(message.primaryWeaponControl);
    }
    if (message.primaryWeaponCharge !== 0) {
      obj.primaryWeaponCharge = Math.round(message.primaryWeaponCharge);
    }
    if (message.primaryWeaponAmbits !== 0) {
      obj.primaryWeaponAmbits = Math.round(message.primaryWeaponAmbits);
    }
    if (message.primaryWeaponTargets !== 0) {
      obj.primaryWeaponTargets = Math.round(message.primaryWeaponTargets);
    }
    if (message.primaryWeaponShots !== 0) {
      obj.primaryWeaponShots = Math.round(message.primaryWeaponShots);
    }
    if (message.primaryWeaponDamage !== 0) {
      obj.primaryWeaponDamage = Math.round(message.primaryWeaponDamage);
    }
    if (message.primaryWeaponBlockable !== false) {
      obj.primaryWeaponBlockable = message.primaryWeaponBlockable;
    }
    if (message.primaryWeaponCounterable !== false) {
      obj.primaryWeaponCounterable = message.primaryWeaponCounterable;
    }
    if (message.primaryWeaponRecoilDamage !== 0) {
      obj.primaryWeaponRecoilDamage = Math.round(message.primaryWeaponRecoilDamage);
    }
    if (message.primaryWeaponShotSuccessRateNumerator !== 0) {
      obj.primaryWeaponShotSuccessRateNumerator = Math.round(message.primaryWeaponShotSuccessRateNumerator);
    }
    if (message.primaryWeaponShotSuccessRateDenominator !== 0) {
      obj.primaryWeaponShotSuccessRateDenominator = Math.round(message.primaryWeaponShotSuccessRateDenominator);
    }
    if (message.secondaryWeapon !== 0) {
      obj.secondaryWeapon = techActiveWeaponryToJSON(message.secondaryWeapon);
    }
    if (message.secondaryWeaponControl !== 0) {
      obj.secondaryWeaponControl = techWeaponControlToJSON(message.secondaryWeaponControl);
    }
    if (message.secondaryWeaponCharge !== 0) {
      obj.secondaryWeaponCharge = Math.round(message.secondaryWeaponCharge);
    }
    if (message.secondaryWeaponAmbits !== 0) {
      obj.secondaryWeaponAmbits = Math.round(message.secondaryWeaponAmbits);
    }
    if (message.secondaryWeaponTargets !== 0) {
      obj.secondaryWeaponTargets = Math.round(message.secondaryWeaponTargets);
    }
    if (message.secondaryWeaponShots !== 0) {
      obj.secondaryWeaponShots = Math.round(message.secondaryWeaponShots);
    }
    if (message.secondaryWeaponDamage !== 0) {
      obj.secondaryWeaponDamage = Math.round(message.secondaryWeaponDamage);
    }
    if (message.secondaryWeaponBlockable !== false) {
      obj.secondaryWeaponBlockable = message.secondaryWeaponBlockable;
    }
    if (message.secondaryWeaponCounterable !== false) {
      obj.secondaryWeaponCounterable = message.secondaryWeaponCounterable;
    }
    if (message.secondaryWeaponRecoilDamage !== 0) {
      obj.secondaryWeaponRecoilDamage = Math.round(message.secondaryWeaponRecoilDamage);
    }
    if (message.secondaryWeaponShotSuccessRateNumerator !== 0) {
      obj.secondaryWeaponShotSuccessRateNumerator = Math.round(message.secondaryWeaponShotSuccessRateNumerator);
    }
    if (message.secondaryWeaponShotSuccessRateDenominator !== 0) {
      obj.secondaryWeaponShotSuccessRateDenominator = Math.round(message.secondaryWeaponShotSuccessRateDenominator);
    }
    if (message.passiveWeaponry !== 0) {
      obj.passiveWeaponry = techPassiveWeaponryToJSON(message.passiveWeaponry);
    }
    if (message.unitDefenses !== 0) {
      obj.unitDefenses = techUnitDefensesToJSON(message.unitDefenses);
    }
    if (message.oreReserveDefenses !== 0) {
      obj.oreReserveDefenses = techOreReserveDefensesToJSON(message.oreReserveDefenses);
    }
    if (message.planetaryDefenses !== 0) {
      obj.planetaryDefenses = techPlanetaryDefensesToJSON(message.planetaryDefenses);
    }
    if (message.planetaryMining !== 0) {
      obj.planetaryMining = techPlanetaryMiningToJSON(message.planetaryMining);
    }
    if (message.planetaryRefinery !== 0) {
      obj.planetaryRefinery = techPlanetaryRefineriesToJSON(message.planetaryRefinery);
    }
    if (message.powerGeneration !== 0) {
      obj.powerGeneration = techPowerGenerationToJSON(message.powerGeneration);
    }
    if (message.activateCharge !== 0) {
      obj.activateCharge = Math.round(message.activateCharge);
    }
    if (message.buildCharge !== 0) {
      obj.buildCharge = Math.round(message.buildCharge);
    }
    if (message.defendChangeCharge !== 0) {
      obj.defendChangeCharge = Math.round(message.defendChangeCharge);
    }
    if (message.moveCharge !== 0) {
      obj.moveCharge = Math.round(message.moveCharge);
    }
    if (message.oreMiningCharge !== 0) {
      obj.oreMiningCharge = Math.round(message.oreMiningCharge);
    }
    if (message.oreRefiningCharge !== 0) {
      obj.oreRefiningCharge = Math.round(message.oreRefiningCharge);
    }
    if (message.stealthActivateCharge !== 0) {
      obj.stealthActivateCharge = Math.round(message.stealthActivateCharge);
    }
    if (message.attackReduction !== 0) {
      obj.attackReduction = Math.round(message.attackReduction);
    }
    if (message.attackCounterable !== false) {
      obj.attackCounterable = message.attackCounterable;
    }
    if (message.stealthSystems !== false) {
      obj.stealthSystems = message.stealthSystems;
    }
    if (message.counterAttack !== 0) {
      obj.counterAttack = Math.round(message.counterAttack);
    }
    if (message.counterAttackSameAmbit !== 0) {
      obj.counterAttackSameAmbit = Math.round(message.counterAttackSameAmbit);
    }
    if (message.postDestructionDamage !== 0) {
      obj.postDestructionDamage = Math.round(message.postDestructionDamage);
    }
    if (message.generatingRate !== 0) {
      obj.generatingRate = Math.round(message.generatingRate);
    }
    if (message.planetaryShieldContribution !== 0) {
      obj.planetaryShieldContribution = Math.round(message.planetaryShieldContribution);
    }
    if (message.oreMiningDifficulty !== 0) {
      obj.oreMiningDifficulty = Math.round(message.oreMiningDifficulty);
    }
    if (message.oreRefiningDifficulty !== 0) {
      obj.oreRefiningDifficulty = Math.round(message.oreRefiningDifficulty);
    }
    if (message.unguidedDefensiveSuccessRateNumerator !== 0) {
      obj.unguidedDefensiveSuccessRateNumerator = Math.round(message.unguidedDefensiveSuccessRateNumerator);
    }
    if (message.unguidedDefensiveSuccessRateDenominator !== 0) {
      obj.unguidedDefensiveSuccessRateDenominator = Math.round(message.unguidedDefensiveSuccessRateDenominator);
    }
    if (message.guidedDefensiveSuccessRateNumerator !== 0) {
      obj.guidedDefensiveSuccessRateNumerator = Math.round(message.guidedDefensiveSuccessRateNumerator);
    }
    if (message.guidedDefensiveSuccessRateDenominator !== 0) {
      obj.guidedDefensiveSuccessRateDenominator = Math.round(message.guidedDefensiveSuccessRateDenominator);
    }
    if (message.triggerRaidDefeatByDestruction !== false) {
      obj.triggerRaidDefeatByDestruction = message.triggerRaidDefeatByDestruction;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StructType>, I>>(base?: I): StructType {
    return StructType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StructType>, I>>(object: I): StructType {
    const message = createBaseStructType();
    message.id = object.id ?? 0;
    message.type = object.type ?? "";
    message.category = object.category ?? 0;
    message.buildLimit = object.buildLimit ?? 0;
    message.buildDifficulty = object.buildDifficulty ?? 0;
    message.buildDraw = object.buildDraw ?? 0;
    message.maxHealth = object.maxHealth ?? 0;
    message.passiveDraw = object.passiveDraw ?? 0;
    message.possibleAmbit = object.possibleAmbit ?? 0;
    message.movable = object.movable ?? false;
    message.slotBound = object.slotBound ?? false;
    message.primaryWeapon = object.primaryWeapon ?? 0;
    message.primaryWeaponControl = object.primaryWeaponControl ?? 0;
    message.primaryWeaponCharge = object.primaryWeaponCharge ?? 0;
    message.primaryWeaponAmbits = object.primaryWeaponAmbits ?? 0;
    message.primaryWeaponTargets = object.primaryWeaponTargets ?? 0;
    message.primaryWeaponShots = object.primaryWeaponShots ?? 0;
    message.primaryWeaponDamage = object.primaryWeaponDamage ?? 0;
    message.primaryWeaponBlockable = object.primaryWeaponBlockable ?? false;
    message.primaryWeaponCounterable = object.primaryWeaponCounterable ?? false;
    message.primaryWeaponRecoilDamage = object.primaryWeaponRecoilDamage ?? 0;
    message.primaryWeaponShotSuccessRateNumerator = object.primaryWeaponShotSuccessRateNumerator ?? 0;
    message.primaryWeaponShotSuccessRateDenominator = object.primaryWeaponShotSuccessRateDenominator ?? 0;
    message.secondaryWeapon = object.secondaryWeapon ?? 0;
    message.secondaryWeaponControl = object.secondaryWeaponControl ?? 0;
    message.secondaryWeaponCharge = object.secondaryWeaponCharge ?? 0;
    message.secondaryWeaponAmbits = object.secondaryWeaponAmbits ?? 0;
    message.secondaryWeaponTargets = object.secondaryWeaponTargets ?? 0;
    message.secondaryWeaponShots = object.secondaryWeaponShots ?? 0;
    message.secondaryWeaponDamage = object.secondaryWeaponDamage ?? 0;
    message.secondaryWeaponBlockable = object.secondaryWeaponBlockable ?? false;
    message.secondaryWeaponCounterable = object.secondaryWeaponCounterable ?? false;
    message.secondaryWeaponRecoilDamage = object.secondaryWeaponRecoilDamage ?? 0;
    message.secondaryWeaponShotSuccessRateNumerator = object.secondaryWeaponShotSuccessRateNumerator ?? 0;
    message.secondaryWeaponShotSuccessRateDenominator = object.secondaryWeaponShotSuccessRateDenominator ?? 0;
    message.passiveWeaponry = object.passiveWeaponry ?? 0;
    message.unitDefenses = object.unitDefenses ?? 0;
    message.oreReserveDefenses = object.oreReserveDefenses ?? 0;
    message.planetaryDefenses = object.planetaryDefenses ?? 0;
    message.planetaryMining = object.planetaryMining ?? 0;
    message.planetaryRefinery = object.planetaryRefinery ?? 0;
    message.powerGeneration = object.powerGeneration ?? 0;
    message.activateCharge = object.activateCharge ?? 0;
    message.buildCharge = object.buildCharge ?? 0;
    message.defendChangeCharge = object.defendChangeCharge ?? 0;
    message.moveCharge = object.moveCharge ?? 0;
    message.oreMiningCharge = object.oreMiningCharge ?? 0;
    message.oreRefiningCharge = object.oreRefiningCharge ?? 0;
    message.stealthActivateCharge = object.stealthActivateCharge ?? 0;
    message.attackReduction = object.attackReduction ?? 0;
    message.attackCounterable = object.attackCounterable ?? false;
    message.stealthSystems = object.stealthSystems ?? false;
    message.counterAttack = object.counterAttack ?? 0;
    message.counterAttackSameAmbit = object.counterAttackSameAmbit ?? 0;
    message.postDestructionDamage = object.postDestructionDamage ?? 0;
    message.generatingRate = object.generatingRate ?? 0;
    message.planetaryShieldContribution = object.planetaryShieldContribution ?? 0;
    message.oreMiningDifficulty = object.oreMiningDifficulty ?? 0;
    message.oreRefiningDifficulty = object.oreRefiningDifficulty ?? 0;
    message.unguidedDefensiveSuccessRateNumerator = object.unguidedDefensiveSuccessRateNumerator ?? 0;
    message.unguidedDefensiveSuccessRateDenominator = object.unguidedDefensiveSuccessRateDenominator ?? 0;
    message.guidedDefensiveSuccessRateNumerator = object.guidedDefensiveSuccessRateNumerator ?? 0;
    message.guidedDefensiveSuccessRateDenominator = object.guidedDefensiveSuccessRateDenominator ?? 0;
    message.triggerRaidDefeatByDestruction = object.triggerRaidDefeatByDestruction ?? false;
    return message;
  },
};

function createBaseStructDefender(): StructDefender {
  return { protectedStructId: "", defendingStructId: "" };
}

export const StructDefender: MessageFns<StructDefender> = {
  encode(message: StructDefender, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.protectedStructId !== "") {
      writer.uint32(10).string(message.protectedStructId);
    }
    if (message.defendingStructId !== "") {
      writer.uint32(18).string(message.defendingStructId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructDefender {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructDefender();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.protectedStructId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defendingStructId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructDefender {
    return {
      protectedStructId: isSet(object.protectedStructId) ? globalThis.String(object.protectedStructId) : "",
      defendingStructId: isSet(object.defendingStructId) ? globalThis.String(object.defendingStructId) : "",
    };
  },

  toJSON(message: StructDefender): unknown {
    const obj: any = {};
    if (message.protectedStructId !== "") {
      obj.protectedStructId = message.protectedStructId;
    }
    if (message.defendingStructId !== "") {
      obj.defendingStructId = message.defendingStructId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StructDefender>, I>>(base?: I): StructDefender {
    return StructDefender.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StructDefender>, I>>(object: I): StructDefender {
    const message = createBaseStructDefender();
    message.protectedStructId = object.protectedStructId ?? "";
    message.defendingStructId = object.defendingStructId ?? "";
    return message;
  },
};

function createBaseStructDefenders(): StructDefenders {
  return { structDefenders: [] };
}

export const StructDefenders: MessageFns<StructDefenders> = {
  encode(message: StructDefenders, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.structDefenders) {
      StructDefender.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructDefenders {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructDefenders();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.structDefenders.push(StructDefender.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructDefenders {
    return {
      structDefenders: globalThis.Array.isArray(object?.structDefenders)
        ? object.structDefenders.map((e: any) => StructDefender.fromJSON(e))
        : [],
    };
  },

  toJSON(message: StructDefenders): unknown {
    const obj: any = {};
    if (message.structDefenders?.length) {
      obj.structDefenders = message.structDefenders.map((e) => StructDefender.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StructDefenders>, I>>(base?: I): StructDefenders {
    return StructDefenders.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StructDefenders>, I>>(object: I): StructDefenders {
    const message = createBaseStructDefenders();
    message.structDefenders = object.structDefenders?.map((e) => StructDefender.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStructAttributeRecord(): StructAttributeRecord {
  return { attributeId: "", value: 0 };
}

export const StructAttributeRecord: MessageFns<StructAttributeRecord> = {
  encode(message: StructAttributeRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributeId !== "") {
      writer.uint32(10).string(message.attributeId);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructAttributeRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructAttributeRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attributeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructAttributeRecord {
    return {
      attributeId: isSet(object.attributeId) ? globalThis.String(object.attributeId) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: StructAttributeRecord): unknown {
    const obj: any = {};
    if (message.attributeId !== "") {
      obj.attributeId = message.attributeId;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StructAttributeRecord>, I>>(base?: I): StructAttributeRecord {
    return StructAttributeRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StructAttributeRecord>, I>>(object: I): StructAttributeRecord {
    const message = createBaseStructAttributeRecord();
    message.attributeId = object.attributeId ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseStructAttributes(): StructAttributes {
  return {
    health: 0,
    status: 0,
    blockStartBuild: 0,
    blockStartOreMine: 0,
    blockStartOreRefine: 0,
    protectedStructIndex: 0,
    typeCount: 0,
    isMaterialized: false,
    isBuilt: false,
    isOnline: false,
    isHidden: false,
    isDestroyed: false,
    isLocked: false,
  };
}

export const StructAttributes: MessageFns<StructAttributes> = {
  encode(message: StructAttributes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.health !== 0) {
      writer.uint32(8).uint64(message.health);
    }
    if (message.status !== 0) {
      writer.uint32(16).uint64(message.status);
    }
    if (message.blockStartBuild !== 0) {
      writer.uint32(24).uint64(message.blockStartBuild);
    }
    if (message.blockStartOreMine !== 0) {
      writer.uint32(32).uint64(message.blockStartOreMine);
    }
    if (message.blockStartOreRefine !== 0) {
      writer.uint32(40).uint64(message.blockStartOreRefine);
    }
    if (message.protectedStructIndex !== 0) {
      writer.uint32(48).uint64(message.protectedStructIndex);
    }
    if (message.typeCount !== 0) {
      writer.uint32(56).uint64(message.typeCount);
    }
    if (message.isMaterialized !== false) {
      writer.uint32(64).bool(message.isMaterialized);
    }
    if (message.isBuilt !== false) {
      writer.uint32(72).bool(message.isBuilt);
    }
    if (message.isOnline !== false) {
      writer.uint32(80).bool(message.isOnline);
    }
    if (message.isHidden !== false) {
      writer.uint32(88).bool(message.isHidden);
    }
    if (message.isDestroyed !== false) {
      writer.uint32(96).bool(message.isDestroyed);
    }
    if (message.isLocked !== false) {
      writer.uint32(104).bool(message.isLocked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructAttributes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.health = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blockStartBuild = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.blockStartOreMine = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.blockStartOreRefine = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.protectedStructIndex = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.typeCount = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isMaterialized = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isBuilt = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isOnline = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isHidden = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isDestroyed = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isLocked = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructAttributes {
    return {
      health: isSet(object.health) ? globalThis.Number(object.health) : 0,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      blockStartBuild: isSet(object.blockStartBuild) ? globalThis.Number(object.blockStartBuild) : 0,
      blockStartOreMine: isSet(object.blockStartOreMine) ? globalThis.Number(object.blockStartOreMine) : 0,
      blockStartOreRefine: isSet(object.blockStartOreRefine) ? globalThis.Number(object.blockStartOreRefine) : 0,
      protectedStructIndex: isSet(object.protectedStructIndex) ? globalThis.Number(object.protectedStructIndex) : 0,
      typeCount: isSet(object.typeCount) ? globalThis.Number(object.typeCount) : 0,
      isMaterialized: isSet(object.isMaterialized) ? globalThis.Boolean(object.isMaterialized) : false,
      isBuilt: isSet(object.isBuilt) ? globalThis.Boolean(object.isBuilt) : false,
      isOnline: isSet(object.isOnline) ? globalThis.Boolean(object.isOnline) : false,
      isHidden: isSet(object.isHidden) ? globalThis.Boolean(object.isHidden) : false,
      isDestroyed: isSet(object.isDestroyed) ? globalThis.Boolean(object.isDestroyed) : false,
      isLocked: isSet(object.isLocked) ? globalThis.Boolean(object.isLocked) : false,
    };
  },

  toJSON(message: StructAttributes): unknown {
    const obj: any = {};
    if (message.health !== 0) {
      obj.health = Math.round(message.health);
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.blockStartBuild !== 0) {
      obj.blockStartBuild = Math.round(message.blockStartBuild);
    }
    if (message.blockStartOreMine !== 0) {
      obj.blockStartOreMine = Math.round(message.blockStartOreMine);
    }
    if (message.blockStartOreRefine !== 0) {
      obj.blockStartOreRefine = Math.round(message.blockStartOreRefine);
    }
    if (message.protectedStructIndex !== 0) {
      obj.protectedStructIndex = Math.round(message.protectedStructIndex);
    }
    if (message.typeCount !== 0) {
      obj.typeCount = Math.round(message.typeCount);
    }
    if (message.isMaterialized !== false) {
      obj.isMaterialized = message.isMaterialized;
    }
    if (message.isBuilt !== false) {
      obj.isBuilt = message.isBuilt;
    }
    if (message.isOnline !== false) {
      obj.isOnline = message.isOnline;
    }
    if (message.isHidden !== false) {
      obj.isHidden = message.isHidden;
    }
    if (message.isDestroyed !== false) {
      obj.isDestroyed = message.isDestroyed;
    }
    if (message.isLocked !== false) {
      obj.isLocked = message.isLocked;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StructAttributes>, I>>(base?: I): StructAttributes {
    return StructAttributes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StructAttributes>, I>>(object: I): StructAttributes {
    const message = createBaseStructAttributes();
    message.health = object.health ?? 0;
    message.status = object.status ?? 0;
    message.blockStartBuild = object.blockStartBuild ?? 0;
    message.blockStartOreMine = object.blockStartOreMine ?? 0;
    message.blockStartOreRefine = object.blockStartOreRefine ?? 0;
    message.protectedStructIndex = object.protectedStructIndex ?? 0;
    message.typeCount = object.typeCount ?? 0;
    message.isMaterialized = object.isMaterialized ?? false;
    message.isBuilt = object.isBuilt ?? false;
    message.isOnline = object.isOnline ?? false;
    message.isHidden = object.isHidden ?? false;
    message.isDestroyed = object.isDestroyed ?? false;
    message.isLocked = object.isLocked ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
