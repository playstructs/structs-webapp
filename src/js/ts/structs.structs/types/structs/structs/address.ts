// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: structs/structs/address.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
import { registrationStatus, registrationStatusFromJSON, registrationStatusToJSON } from "./keys";

export const protobufPackage = "structs.structs";

export interface AddressRecord {
  address: string;
  playerIndex: number;
}

export interface AddressAssociation {
  address: string;
  playerIndex: number;
  registrationStatus: registrationStatus;
}

export interface AddressActivity {
  address: string;
  blockHeight: number;
  blockTime: Date | undefined;
}

export interface InternalAddressAssociation {
  address: string;
  objectId: string;
}

function createBaseAddressRecord(): AddressRecord {
  return { address: "", playerIndex: 0 };
}

export const AddressRecord: MessageFns<AddressRecord> = {
  encode(message: AddressRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.playerIndex !== 0) {
      writer.uint32(16).uint64(message.playerIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddressRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddressRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.playerIndex = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddressRecord {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      playerIndex: isSet(object.playerIndex) ? globalThis.Number(object.playerIndex) : 0,
    };
  },

  toJSON(message: AddressRecord): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.playerIndex !== 0) {
      obj.playerIndex = Math.round(message.playerIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddressRecord>, I>>(base?: I): AddressRecord {
    return AddressRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddressRecord>, I>>(object: I): AddressRecord {
    const message = createBaseAddressRecord();
    message.address = object.address ?? "";
    message.playerIndex = object.playerIndex ?? 0;
    return message;
  },
};

function createBaseAddressAssociation(): AddressAssociation {
  return { address: "", playerIndex: 0, registrationStatus: 0 };
}

export const AddressAssociation: MessageFns<AddressAssociation> = {
  encode(message: AddressAssociation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.playerIndex !== 0) {
      writer.uint32(16).uint64(message.playerIndex);
    }
    if (message.registrationStatus !== 0) {
      writer.uint32(24).int32(message.registrationStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddressAssociation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddressAssociation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.playerIndex = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.registrationStatus = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddressAssociation {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      playerIndex: isSet(object.playerIndex) ? globalThis.Number(object.playerIndex) : 0,
      registrationStatus: isSet(object.registrationStatus) ? registrationStatusFromJSON(object.registrationStatus) : 0,
    };
  },

  toJSON(message: AddressAssociation): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.playerIndex !== 0) {
      obj.playerIndex = Math.round(message.playerIndex);
    }
    if (message.registrationStatus !== 0) {
      obj.registrationStatus = registrationStatusToJSON(message.registrationStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddressAssociation>, I>>(base?: I): AddressAssociation {
    return AddressAssociation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddressAssociation>, I>>(object: I): AddressAssociation {
    const message = createBaseAddressAssociation();
    message.address = object.address ?? "";
    message.playerIndex = object.playerIndex ?? 0;
    message.registrationStatus = object.registrationStatus ?? 0;
    return message;
  },
};

function createBaseAddressActivity(): AddressActivity {
  return { address: "", blockHeight: 0, blockTime: undefined };
}

export const AddressActivity: MessageFns<AddressActivity> = {
  encode(message: AddressActivity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).int64(message.blockHeight);
    }
    if (message.blockTime !== undefined) {
      Timestamp.encode(toTimestamp(message.blockTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddressActivity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddressActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.blockTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddressActivity {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      blockTime: isSet(object.blockTime) ? fromJsonTimestamp(object.blockTime) : undefined,
    };
  },

  toJSON(message: AddressActivity): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.blockTime !== undefined) {
      obj.blockTime = message.blockTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddressActivity>, I>>(base?: I): AddressActivity {
    return AddressActivity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddressActivity>, I>>(object: I): AddressActivity {
    const message = createBaseAddressActivity();
    message.address = object.address ?? "";
    message.blockHeight = object.blockHeight ?? 0;
    message.blockTime = object.blockTime ?? undefined;
    return message;
  },
};

function createBaseInternalAddressAssociation(): InternalAddressAssociation {
  return { address: "", objectId: "" };
}

export const InternalAddressAssociation: MessageFns<InternalAddressAssociation> = {
  encode(message: InternalAddressAssociation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.objectId !== "") {
      writer.uint32(18).string(message.objectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InternalAddressAssociation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInternalAddressAssociation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.objectId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InternalAddressAssociation {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
    };
  },

  toJSON(message: InternalAddressAssociation): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InternalAddressAssociation>, I>>(base?: I): InternalAddressAssociation {
    return InternalAddressAssociation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InternalAddressAssociation>, I>>(object: I): InternalAddressAssociation {
    const message = createBaseInternalAddressAssociation();
    message.address = object.address ?? "";
    message.objectId = object.objectId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
