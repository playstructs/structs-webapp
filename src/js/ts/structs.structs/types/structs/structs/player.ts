// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: structs/structs/player.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "structs.structs";

export interface Player {
  id: string;
  index: number;
  guildId: string;
  substationId: string;
  creator: string;
  primaryAddress: string;
  planetId: string;
  fleetId: string;
}

export interface PlayerInventory {
  rocks: Coin | undefined;
}

function createBasePlayer(): Player {
  return {
    id: "",
    index: 0,
    guildId: "",
    substationId: "",
    creator: "",
    primaryAddress: "",
    planetId: "",
    fleetId: "",
  };
}

export const Player: MessageFns<Player> = {
  encode(message: Player, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.index !== 0) {
      writer.uint32(16).uint64(message.index);
    }
    if (message.guildId !== "") {
      writer.uint32(26).string(message.guildId);
    }
    if (message.substationId !== "") {
      writer.uint32(34).string(message.substationId);
    }
    if (message.creator !== "") {
      writer.uint32(42).string(message.creator);
    }
    if (message.primaryAddress !== "") {
      writer.uint32(50).string(message.primaryAddress);
    }
    if (message.planetId !== "") {
      writer.uint32(58).string(message.planetId);
    }
    if (message.fleetId !== "") {
      writer.uint32(66).string(message.fleetId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Player {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.substationId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.primaryAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.planetId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fleetId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Player {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "",
      substationId: isSet(object.substationId) ? globalThis.String(object.substationId) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      primaryAddress: isSet(object.primaryAddress) ? globalThis.String(object.primaryAddress) : "",
      planetId: isSet(object.planetId) ? globalThis.String(object.planetId) : "",
      fleetId: isSet(object.fleetId) ? globalThis.String(object.fleetId) : "",
    };
  },

  toJSON(message: Player): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    if (message.substationId !== "") {
      obj.substationId = message.substationId;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.primaryAddress !== "") {
      obj.primaryAddress = message.primaryAddress;
    }
    if (message.planetId !== "") {
      obj.planetId = message.planetId;
    }
    if (message.fleetId !== "") {
      obj.fleetId = message.fleetId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.id = object.id ?? "";
    message.index = object.index ?? 0;
    message.guildId = object.guildId ?? "";
    message.substationId = object.substationId ?? "";
    message.creator = object.creator ?? "";
    message.primaryAddress = object.primaryAddress ?? "";
    message.planetId = object.planetId ?? "";
    message.fleetId = object.fleetId ?? "";
    return message;
  },
};

function createBasePlayerInventory(): PlayerInventory {
  return { rocks: undefined };
}

export const PlayerInventory: MessageFns<PlayerInventory> = {
  encode(message: PlayerInventory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rocks !== undefined) {
      Coin.encode(message.rocks, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerInventory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerInventory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.rocks = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerInventory {
    return { rocks: isSet(object.rocks) ? Coin.fromJSON(object.rocks) : undefined };
  },

  toJSON(message: PlayerInventory): unknown {
    const obj: any = {};
    if (message.rocks !== undefined) {
      obj.rocks = Coin.toJSON(message.rocks);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerInventory>, I>>(base?: I): PlayerInventory {
    return PlayerInventory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerInventory>, I>>(object: I): PlayerInventory {
    const message = createBasePlayerInventory();
    message.rocks = (object.rocks !== undefined && object.rocks !== null) ? Coin.fromPartial(object.rocks) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
