// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: structs/structs/reactor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "structs.structs";

export interface Reactor {
  id: string;
  validator: string;
  guildId: string;
  defaultCommission: string;
  rawAddress: Uint8Array;
}

function createBaseReactor(): Reactor {
  return { id: "", validator: "", guildId: "", defaultCommission: "", rawAddress: new Uint8Array(0) };
}

export const Reactor: MessageFns<Reactor> = {
  encode(message: Reactor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.validator !== "") {
      writer.uint32(18).string(message.validator);
    }
    if (message.guildId !== "") {
      writer.uint32(26).string(message.guildId);
    }
    if (message.defaultCommission !== "") {
      writer.uint32(34).string(message.defaultCommission);
    }
    if (message.rawAddress.length !== 0) {
      writer.uint32(42).bytes(message.rawAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reactor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.defaultCommission = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rawAddress = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reactor {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      validator: isSet(object.validator) ? globalThis.String(object.validator) : "",
      guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "",
      defaultCommission: isSet(object.defaultCommission) ? globalThis.String(object.defaultCommission) : "",
      rawAddress: isSet(object.rawAddress) ? bytesFromBase64(object.rawAddress) : new Uint8Array(0),
    };
  },

  toJSON(message: Reactor): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.validator !== "") {
      obj.validator = message.validator;
    }
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    if (message.defaultCommission !== "") {
      obj.defaultCommission = message.defaultCommission;
    }
    if (message.rawAddress.length !== 0) {
      obj.rawAddress = base64FromBytes(message.rawAddress);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reactor>, I>>(base?: I): Reactor {
    return Reactor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reactor>, I>>(object: I): Reactor {
    const message = createBaseReactor();
    message.id = object.id ?? "";
    message.validator = object.validator ?? "";
    message.guildId = object.guildId ?? "";
    message.defaultCommission = object.defaultCommission ?? "";
    message.rawAddress = object.rawAddress ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
