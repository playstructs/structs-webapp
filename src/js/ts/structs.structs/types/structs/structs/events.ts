// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: structs/structs/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
import { AddressActivity, AddressAssociation } from "./address";
import { Agreement } from "./agreement";
import { Allocation } from "./allocation";
import { Fleet } from "./fleet";
import { GridRecord } from "./grid";
import { Guild, GuildMembershipApplication } from "./guild";
import { Infusion } from "./infusion";
import {
  ambit,
  ambitFromJSON,
  ambitToJSON,
  objectType,
  objectTypeFromJSON,
  objectTypeToJSON,
  raidStatus,
  raidStatusFromJSON,
  raidStatusToJSON,
  techActiveWeaponry,
  techActiveWeaponryFromJSON,
  techActiveWeaponryToJSON,
  techPassiveWeaponry,
  techPassiveWeaponryFromJSON,
  techPassiveWeaponryToJSON,
  techPlanetaryDefenses,
  techPlanetaryDefensesFromJSON,
  techPlanetaryDefensesToJSON,
  techUnitDefenses,
  techUnitDefensesFromJSON,
  techUnitDefensesToJSON,
  techWeaponControl,
  techWeaponControlFromJSON,
  techWeaponControlToJSON,
  techWeaponSystem,
  techWeaponSystemFromJSON,
  techWeaponSystemToJSON,
} from "./keys";
import { PermissionRecord } from "./permission";
import { Planet, PlanetAttributeRecord } from "./planet";
import { Player } from "./player";
import { Provider } from "./provider";
import { Reactor } from "./reactor";
import { Struct, StructAttributeRecord, StructDefender, StructType } from "./struct";
import { Substation } from "./substation";

export const protobufPackage = "structs.structs";

export interface EventAllocation {
  allocation: Allocation | undefined;
}

export interface EventAgreement {
  agreement: Agreement | undefined;
}

export interface EventFleet {
  fleet: Fleet | undefined;
}

export interface EventGuild {
  guild: Guild | undefined;
}

export interface EventInfusion {
  infusion: Infusion | undefined;
}

export interface EventPlanet {
  planet: Planet | undefined;
}

export interface EventPlanetAttribute {
  planetAttributeRecord: PlanetAttributeRecord | undefined;
}

export interface EventPlayer {
  player: Player | undefined;
}

export interface EventProvider {
  provider: Provider | undefined;
}

export interface EventReactor {
  reactor: Reactor | undefined;
}

export interface EventStruct {
  structure: Struct | undefined;
}

export interface EventStructAttribute {
  structAttributeRecord: StructAttributeRecord | undefined;
}

export interface EventStructDefender {
  structDefender: StructDefender | undefined;
}

export interface EventStructType {
  structType: StructType | undefined;
}

export interface EventSubstation {
  substation: Substation | undefined;
}

export interface EventTime {
  eventTimeDetail: EventTimeDetail | undefined;
}

export interface EventTimeDetail {
  blockHeight: number;
  blockTime: Date | undefined;
}

export interface EventPermission {
  permissionRecord: PermissionRecord | undefined;
}

export interface EventGrid {
  gridRecord: GridRecord | undefined;
}

export interface EventProviderGrantGuild {
  eventProviderGrantGuildDetail: EventProviderGrantGuildDetail | undefined;
}

export interface EventProviderGrantGuildDetail {
  providerId: string;
  guildId: string;
}

export interface EventProviderRevokeGuild {
  eventProviderRevokeGuildDetail: EventProviderRevokeGuildDetail | undefined;
}

export interface EventProviderRevokeGuildDetail {
  providerId: string;
  guildId: string;
}

export interface EventPlayerHalted {
  playerId: string;
}

export interface EventPlayerResumed {
  playerId: string;
}

export interface EventDelete {
  objectId: string;
}

export interface EventAddressAssociation {
  addressAssociation: AddressAssociation | undefined;
}

export interface EventAddressActivity {
  addressActivity: AddressActivity | undefined;
}

export interface EventGuildBankMint {
  eventGuildBankMintDetail: EventGuildBankMintDetail | undefined;
}

export interface EventGuildBankMintDetail {
  guildId: string;
  amountAlpha: number;
  amountToken: number;
  playerId: string;
}

export interface EventGuildBankRedeem {
  eventGuildBankRedeemDetail: EventGuildBankRedeemDetail | undefined;
}

export interface EventGuildBankRedeemDetail {
  guildId: string;
  amountAlpha: number;
  amountToken: number;
  playerId: string;
}

export interface EventGuildBankConfiscateAndBurn {
  eventGuildBankConfiscateAndBurnDetail: EventGuildBankConfiscateAndBurnDetail | undefined;
}

export interface EventGuildBankConfiscateAndBurnDetail {
  guildId: string;
  amountAlpha: number;
  amountToken: number;
  address: string;
}

export interface EventGuildMembershipApplication {
  guildMembershipApplication: GuildMembershipApplication | undefined;
}

export interface EventOreMine {
  eventOreMineDetail: EventOreMineDetail | undefined;
}

export interface EventOreMineDetail {
  playerId: string;
  primaryAddress: string;
  amount: number;
}

export interface EventAlphaRefine {
  eventAlphaRefineDetail: EventAlphaRefineDetail | undefined;
}

export interface EventAlphaRefineDetail {
  playerId: string;
  primaryAddress: string;
  amount: number;
}

export interface EventAlphaInfuse {
  eventAlphaInfuseDetail: EventAlphaInfuseDetail | undefined;
}

export interface EventAlphaInfuseDetail {
  playerId: string;
  primaryAddress: string;
  amount: number;
}

export interface EventAlphaDefuse {
  eventAlphaDefuseDetail: EventAlphaDefuseDetail | undefined;
}

export interface EventAlphaDefuseDetail {
  primaryAddress: string;
  amount: number;
}

export interface EventOreTheft {
  eventOreTheftDetail: EventOreTheftDetail | undefined;
}

export interface EventOreTheftDetail {
  victimPrimaryAddress: string;
  victimPlayerId: string;
  thiefPrimaryAddress: string;
  thiefPlayerId: string;
  amount: number;
}

export interface EventOreMigrate {
  eventOreMigrateDetail: EventOreMigrateDetail | undefined;
}

export interface EventOreMigrateDetail {
  playerId: string;
  primaryAddress: string;
  oldPrimaryAddress: string;
  amount: number;
}

export interface EventAttack {
  eventAttackDetail: EventAttackDetail | undefined;
}

export interface EventAttackDetail {
  attackerStructId: string;
  attackerStructType: number;
  attackerStructLocationType: objectType;
  attackerStructLocationId: string;
  attackerStructOperatingAmbit: ambit;
  attackerStructSlot: number;
  weaponSystem: techWeaponSystem;
  weaponControl: techWeaponControl;
  activeWeaponry: techActiveWeaponry;
  eventAttackShotDetail: EventAttackShotDetail[];
  recoilDamageToAttacker: boolean;
  recoilDamage: number;
  recoilDamageDestroyedAttacker: boolean;
  planetaryDefenseCannonDamageToAttacker: boolean;
  planetaryDefenseCannonDamage: number;
  planetaryDefenseCannonDamageDestroyedAttacker: boolean;
  attackerPlayerId: string;
  targetPlayerId: string;
}

export interface EventAttackShotDetail {
  targetStructId: string;
  targetStructType: number;
  targetStructLocationType: objectType;
  targetStructLocationId: string;
  targetStructOperatingAmbit: ambit;
  targetStructSlot: number;
  evaded: boolean;
  evadedCause: techUnitDefenses;
  evadedByPlanetaryDefenses: boolean;
  evadedByPlanetaryDefensesCause: techPlanetaryDefenses;
  blocked: boolean;
  blockedByStructId: string;
  blockedByStructType: number;
  blockedByStructLocationType: objectType;
  blockedByStructLocationId: string;
  blockedByStructOperatingAmbit: ambit;
  blockedByStructSlot: number;
  blockerDestroyed: boolean;
  eventAttackDefenderCounterDetail: EventAttackDefenderCounterDetail[];
  damageDealt: number;
  damageReduction: number;
  damageReductionCause: techUnitDefenses;
  damage: number;
  targetCountered: boolean;
  targetCounteredDamage: number;
  targetCounterDestroyedAttacker: boolean;
  targetCounterCause: techPassiveWeaponry;
  targetDestroyed: boolean;
  postDestructionDamageToAttacker: boolean;
  postDestructionDamage: number;
  postDestructionDamageDestroyedAttacker: boolean;
  postDestructionDamageCause: techPassiveWeaponry;
}

export interface EventAttackDefenderCounterDetail {
  counterByStructId: string;
  counterByStructType: number;
  counterByStructLocationType: objectType;
  counterByStructLocationId: string;
  counterByStructOperatingAmbit: ambit;
  counterByStructSlot: number;
  counterDamage: number;
  counterDestroyedAttacker: boolean;
}

export interface EventRaid {
  eventRaidDetail: EventRaidDetail | undefined;
}

export interface EventRaidDetail {
  fleetId: string;
  planetId: string;
  status: raidStatus;
}

function createBaseEventAllocation(): EventAllocation {
  return { allocation: undefined };
}

export const EventAllocation: MessageFns<EventAllocation> = {
  encode(message: EventAllocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allocation !== undefined) {
      Allocation.encode(message.allocation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAllocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAllocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.allocation = Allocation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAllocation {
    return { allocation: isSet(object.allocation) ? Allocation.fromJSON(object.allocation) : undefined };
  },

  toJSON(message: EventAllocation): unknown {
    const obj: any = {};
    if (message.allocation !== undefined) {
      obj.allocation = Allocation.toJSON(message.allocation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAllocation>, I>>(base?: I): EventAllocation {
    return EventAllocation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAllocation>, I>>(object: I): EventAllocation {
    const message = createBaseEventAllocation();
    message.allocation = (object.allocation !== undefined && object.allocation !== null)
      ? Allocation.fromPartial(object.allocation)
      : undefined;
    return message;
  },
};

function createBaseEventAgreement(): EventAgreement {
  return { agreement: undefined };
}

export const EventAgreement: MessageFns<EventAgreement> = {
  encode(message: EventAgreement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agreement !== undefined) {
      Agreement.encode(message.agreement, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAgreement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAgreement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agreement = Agreement.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAgreement {
    return { agreement: isSet(object.agreement) ? Agreement.fromJSON(object.agreement) : undefined };
  },

  toJSON(message: EventAgreement): unknown {
    const obj: any = {};
    if (message.agreement !== undefined) {
      obj.agreement = Agreement.toJSON(message.agreement);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAgreement>, I>>(base?: I): EventAgreement {
    return EventAgreement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAgreement>, I>>(object: I): EventAgreement {
    const message = createBaseEventAgreement();
    message.agreement = (object.agreement !== undefined && object.agreement !== null)
      ? Agreement.fromPartial(object.agreement)
      : undefined;
    return message;
  },
};

function createBaseEventFleet(): EventFleet {
  return { fleet: undefined };
}

export const EventFleet: MessageFns<EventFleet> = {
  encode(message: EventFleet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fleet !== undefined) {
      Fleet.encode(message.fleet, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventFleet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventFleet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fleet = Fleet.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventFleet {
    return { fleet: isSet(object.fleet) ? Fleet.fromJSON(object.fleet) : undefined };
  },

  toJSON(message: EventFleet): unknown {
    const obj: any = {};
    if (message.fleet !== undefined) {
      obj.fleet = Fleet.toJSON(message.fleet);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventFleet>, I>>(base?: I): EventFleet {
    return EventFleet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventFleet>, I>>(object: I): EventFleet {
    const message = createBaseEventFleet();
    message.fleet = (object.fleet !== undefined && object.fleet !== null) ? Fleet.fromPartial(object.fleet) : undefined;
    return message;
  },
};

function createBaseEventGuild(): EventGuild {
  return { guild: undefined };
}

export const EventGuild: MessageFns<EventGuild> = {
  encode(message: EventGuild, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guild !== undefined) {
      Guild.encode(message.guild, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventGuild {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventGuild();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guild = Guild.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventGuild {
    return { guild: isSet(object.guild) ? Guild.fromJSON(object.guild) : undefined };
  },

  toJSON(message: EventGuild): unknown {
    const obj: any = {};
    if (message.guild !== undefined) {
      obj.guild = Guild.toJSON(message.guild);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventGuild>, I>>(base?: I): EventGuild {
    return EventGuild.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventGuild>, I>>(object: I): EventGuild {
    const message = createBaseEventGuild();
    message.guild = (object.guild !== undefined && object.guild !== null) ? Guild.fromPartial(object.guild) : undefined;
    return message;
  },
};

function createBaseEventInfusion(): EventInfusion {
  return { infusion: undefined };
}

export const EventInfusion: MessageFns<EventInfusion> = {
  encode(message: EventInfusion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.infusion !== undefined) {
      Infusion.encode(message.infusion, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventInfusion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventInfusion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.infusion = Infusion.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventInfusion {
    return { infusion: isSet(object.infusion) ? Infusion.fromJSON(object.infusion) : undefined };
  },

  toJSON(message: EventInfusion): unknown {
    const obj: any = {};
    if (message.infusion !== undefined) {
      obj.infusion = Infusion.toJSON(message.infusion);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventInfusion>, I>>(base?: I): EventInfusion {
    return EventInfusion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventInfusion>, I>>(object: I): EventInfusion {
    const message = createBaseEventInfusion();
    message.infusion = (object.infusion !== undefined && object.infusion !== null)
      ? Infusion.fromPartial(object.infusion)
      : undefined;
    return message;
  },
};

function createBaseEventPlanet(): EventPlanet {
  return { planet: undefined };
}

export const EventPlanet: MessageFns<EventPlanet> = {
  encode(message: EventPlanet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.planet !== undefined) {
      Planet.encode(message.planet, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPlanet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPlanet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.planet = Planet.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPlanet {
    return { planet: isSet(object.planet) ? Planet.fromJSON(object.planet) : undefined };
  },

  toJSON(message: EventPlanet): unknown {
    const obj: any = {};
    if (message.planet !== undefined) {
      obj.planet = Planet.toJSON(message.planet);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPlanet>, I>>(base?: I): EventPlanet {
    return EventPlanet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPlanet>, I>>(object: I): EventPlanet {
    const message = createBaseEventPlanet();
    message.planet = (object.planet !== undefined && object.planet !== null)
      ? Planet.fromPartial(object.planet)
      : undefined;
    return message;
  },
};

function createBaseEventPlanetAttribute(): EventPlanetAttribute {
  return { planetAttributeRecord: undefined };
}

export const EventPlanetAttribute: MessageFns<EventPlanetAttribute> = {
  encode(message: EventPlanetAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.planetAttributeRecord !== undefined) {
      PlanetAttributeRecord.encode(message.planetAttributeRecord, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPlanetAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPlanetAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.planetAttributeRecord = PlanetAttributeRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPlanetAttribute {
    return {
      planetAttributeRecord: isSet(object.planetAttributeRecord)
        ? PlanetAttributeRecord.fromJSON(object.planetAttributeRecord)
        : undefined,
    };
  },

  toJSON(message: EventPlanetAttribute): unknown {
    const obj: any = {};
    if (message.planetAttributeRecord !== undefined) {
      obj.planetAttributeRecord = PlanetAttributeRecord.toJSON(message.planetAttributeRecord);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPlanetAttribute>, I>>(base?: I): EventPlanetAttribute {
    return EventPlanetAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPlanetAttribute>, I>>(object: I): EventPlanetAttribute {
    const message = createBaseEventPlanetAttribute();
    message.planetAttributeRecord =
      (object.planetAttributeRecord !== undefined && object.planetAttributeRecord !== null)
        ? PlanetAttributeRecord.fromPartial(object.planetAttributeRecord)
        : undefined;
    return message;
  },
};

function createBaseEventPlayer(): EventPlayer {
  return { player: undefined };
}

export const EventPlayer: MessageFns<EventPlayer> = {
  encode(message: EventPlayer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.player !== undefined) {
      Player.encode(message.player, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPlayer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.player = Player.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPlayer {
    return { player: isSet(object.player) ? Player.fromJSON(object.player) : undefined };
  },

  toJSON(message: EventPlayer): unknown {
    const obj: any = {};
    if (message.player !== undefined) {
      obj.player = Player.toJSON(message.player);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPlayer>, I>>(base?: I): EventPlayer {
    return EventPlayer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPlayer>, I>>(object: I): EventPlayer {
    const message = createBaseEventPlayer();
    message.player = (object.player !== undefined && object.player !== null)
      ? Player.fromPartial(object.player)
      : undefined;
    return message;
  },
};

function createBaseEventProvider(): EventProvider {
  return { provider: undefined };
}

export const EventProvider: MessageFns<EventProvider> = {
  encode(message: EventProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.provider !== undefined) {
      Provider.encode(message.provider, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.provider = Provider.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventProvider {
    return { provider: isSet(object.provider) ? Provider.fromJSON(object.provider) : undefined };
  },

  toJSON(message: EventProvider): unknown {
    const obj: any = {};
    if (message.provider !== undefined) {
      obj.provider = Provider.toJSON(message.provider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventProvider>, I>>(base?: I): EventProvider {
    return EventProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventProvider>, I>>(object: I): EventProvider {
    const message = createBaseEventProvider();
    message.provider = (object.provider !== undefined && object.provider !== null)
      ? Provider.fromPartial(object.provider)
      : undefined;
    return message;
  },
};

function createBaseEventReactor(): EventReactor {
  return { reactor: undefined };
}

export const EventReactor: MessageFns<EventReactor> = {
  encode(message: EventReactor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reactor !== undefined) {
      Reactor.encode(message.reactor, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventReactor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventReactor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reactor = Reactor.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventReactor {
    return { reactor: isSet(object.reactor) ? Reactor.fromJSON(object.reactor) : undefined };
  },

  toJSON(message: EventReactor): unknown {
    const obj: any = {};
    if (message.reactor !== undefined) {
      obj.reactor = Reactor.toJSON(message.reactor);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventReactor>, I>>(base?: I): EventReactor {
    return EventReactor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventReactor>, I>>(object: I): EventReactor {
    const message = createBaseEventReactor();
    message.reactor = (object.reactor !== undefined && object.reactor !== null)
      ? Reactor.fromPartial(object.reactor)
      : undefined;
    return message;
  },
};

function createBaseEventStruct(): EventStruct {
  return { structure: undefined };
}

export const EventStruct: MessageFns<EventStruct> = {
  encode(message: EventStruct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.structure !== undefined) {
      Struct.encode(message.structure, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventStruct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventStruct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.structure = Struct.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventStruct {
    return { structure: isSet(object.structure) ? Struct.fromJSON(object.structure) : undefined };
  },

  toJSON(message: EventStruct): unknown {
    const obj: any = {};
    if (message.structure !== undefined) {
      obj.structure = Struct.toJSON(message.structure);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventStruct>, I>>(base?: I): EventStruct {
    return EventStruct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventStruct>, I>>(object: I): EventStruct {
    const message = createBaseEventStruct();
    message.structure = (object.structure !== undefined && object.structure !== null)
      ? Struct.fromPartial(object.structure)
      : undefined;
    return message;
  },
};

function createBaseEventStructAttribute(): EventStructAttribute {
  return { structAttributeRecord: undefined };
}

export const EventStructAttribute: MessageFns<EventStructAttribute> = {
  encode(message: EventStructAttribute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.structAttributeRecord !== undefined) {
      StructAttributeRecord.encode(message.structAttributeRecord, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventStructAttribute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventStructAttribute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.structAttributeRecord = StructAttributeRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventStructAttribute {
    return {
      structAttributeRecord: isSet(object.structAttributeRecord)
        ? StructAttributeRecord.fromJSON(object.structAttributeRecord)
        : undefined,
    };
  },

  toJSON(message: EventStructAttribute): unknown {
    const obj: any = {};
    if (message.structAttributeRecord !== undefined) {
      obj.structAttributeRecord = StructAttributeRecord.toJSON(message.structAttributeRecord);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventStructAttribute>, I>>(base?: I): EventStructAttribute {
    return EventStructAttribute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventStructAttribute>, I>>(object: I): EventStructAttribute {
    const message = createBaseEventStructAttribute();
    message.structAttributeRecord =
      (object.structAttributeRecord !== undefined && object.structAttributeRecord !== null)
        ? StructAttributeRecord.fromPartial(object.structAttributeRecord)
        : undefined;
    return message;
  },
};

function createBaseEventStructDefender(): EventStructDefender {
  return { structDefender: undefined };
}

export const EventStructDefender: MessageFns<EventStructDefender> = {
  encode(message: EventStructDefender, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.structDefender !== undefined) {
      StructDefender.encode(message.structDefender, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventStructDefender {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventStructDefender();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.structDefender = StructDefender.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventStructDefender {
    return {
      structDefender: isSet(object.structDefender) ? StructDefender.fromJSON(object.structDefender) : undefined,
    };
  },

  toJSON(message: EventStructDefender): unknown {
    const obj: any = {};
    if (message.structDefender !== undefined) {
      obj.structDefender = StructDefender.toJSON(message.structDefender);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventStructDefender>, I>>(base?: I): EventStructDefender {
    return EventStructDefender.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventStructDefender>, I>>(object: I): EventStructDefender {
    const message = createBaseEventStructDefender();
    message.structDefender = (object.structDefender !== undefined && object.structDefender !== null)
      ? StructDefender.fromPartial(object.structDefender)
      : undefined;
    return message;
  },
};

function createBaseEventStructType(): EventStructType {
  return { structType: undefined };
}

export const EventStructType: MessageFns<EventStructType> = {
  encode(message: EventStructType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.structType !== undefined) {
      StructType.encode(message.structType, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventStructType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventStructType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.structType = StructType.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventStructType {
    return { structType: isSet(object.structType) ? StructType.fromJSON(object.structType) : undefined };
  },

  toJSON(message: EventStructType): unknown {
    const obj: any = {};
    if (message.structType !== undefined) {
      obj.structType = StructType.toJSON(message.structType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventStructType>, I>>(base?: I): EventStructType {
    return EventStructType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventStructType>, I>>(object: I): EventStructType {
    const message = createBaseEventStructType();
    message.structType = (object.structType !== undefined && object.structType !== null)
      ? StructType.fromPartial(object.structType)
      : undefined;
    return message;
  },
};

function createBaseEventSubstation(): EventSubstation {
  return { substation: undefined };
}

export const EventSubstation: MessageFns<EventSubstation> = {
  encode(message: EventSubstation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.substation !== undefined) {
      Substation.encode(message.substation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSubstation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSubstation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.substation = Substation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSubstation {
    return { substation: isSet(object.substation) ? Substation.fromJSON(object.substation) : undefined };
  },

  toJSON(message: EventSubstation): unknown {
    const obj: any = {};
    if (message.substation !== undefined) {
      obj.substation = Substation.toJSON(message.substation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSubstation>, I>>(base?: I): EventSubstation {
    return EventSubstation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSubstation>, I>>(object: I): EventSubstation {
    const message = createBaseEventSubstation();
    message.substation = (object.substation !== undefined && object.substation !== null)
      ? Substation.fromPartial(object.substation)
      : undefined;
    return message;
  },
};

function createBaseEventTime(): EventTime {
  return { eventTimeDetail: undefined };
}

export const EventTime: MessageFns<EventTime> = {
  encode(message: EventTime, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventTimeDetail !== undefined) {
      EventTimeDetail.encode(message.eventTimeDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventTime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventTimeDetail = EventTimeDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTime {
    return {
      eventTimeDetail: isSet(object.eventTimeDetail) ? EventTimeDetail.fromJSON(object.eventTimeDetail) : undefined,
    };
  },

  toJSON(message: EventTime): unknown {
    const obj: any = {};
    if (message.eventTimeDetail !== undefined) {
      obj.eventTimeDetail = EventTimeDetail.toJSON(message.eventTimeDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTime>, I>>(base?: I): EventTime {
    return EventTime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTime>, I>>(object: I): EventTime {
    const message = createBaseEventTime();
    message.eventTimeDetail = (object.eventTimeDetail !== undefined && object.eventTimeDetail !== null)
      ? EventTimeDetail.fromPartial(object.eventTimeDetail)
      : undefined;
    return message;
  },
};

function createBaseEventTimeDetail(): EventTimeDetail {
  return { blockHeight: 0, blockTime: undefined };
}

export const EventTimeDetail: MessageFns<EventTimeDetail> = {
  encode(message: EventTimeDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHeight !== 0) {
      writer.uint32(8).int64(message.blockHeight);
    }
    if (message.blockTime !== undefined) {
      Timestamp.encode(toTimestamp(message.blockTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventTimeDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTimeDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.blockHeight = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.blockTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTimeDetail {
    return {
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      blockTime: isSet(object.blockTime) ? fromJsonTimestamp(object.blockTime) : undefined,
    };
  },

  toJSON(message: EventTimeDetail): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.blockTime !== undefined) {
      obj.blockTime = message.blockTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTimeDetail>, I>>(base?: I): EventTimeDetail {
    return EventTimeDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTimeDetail>, I>>(object: I): EventTimeDetail {
    const message = createBaseEventTimeDetail();
    message.blockHeight = object.blockHeight ?? 0;
    message.blockTime = object.blockTime ?? undefined;
    return message;
  },
};

function createBaseEventPermission(): EventPermission {
  return { permissionRecord: undefined };
}

export const EventPermission: MessageFns<EventPermission> = {
  encode(message: EventPermission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionRecord !== undefined) {
      PermissionRecord.encode(message.permissionRecord, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPermission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permissionRecord = PermissionRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPermission {
    return {
      permissionRecord: isSet(object.permissionRecord) ? PermissionRecord.fromJSON(object.permissionRecord) : undefined,
    };
  },

  toJSON(message: EventPermission): unknown {
    const obj: any = {};
    if (message.permissionRecord !== undefined) {
      obj.permissionRecord = PermissionRecord.toJSON(message.permissionRecord);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPermission>, I>>(base?: I): EventPermission {
    return EventPermission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPermission>, I>>(object: I): EventPermission {
    const message = createBaseEventPermission();
    message.permissionRecord = (object.permissionRecord !== undefined && object.permissionRecord !== null)
      ? PermissionRecord.fromPartial(object.permissionRecord)
      : undefined;
    return message;
  },
};

function createBaseEventGrid(): EventGrid {
  return { gridRecord: undefined };
}

export const EventGrid: MessageFns<EventGrid> = {
  encode(message: EventGrid, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gridRecord !== undefined) {
      GridRecord.encode(message.gridRecord, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventGrid {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventGrid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gridRecord = GridRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventGrid {
    return { gridRecord: isSet(object.gridRecord) ? GridRecord.fromJSON(object.gridRecord) : undefined };
  },

  toJSON(message: EventGrid): unknown {
    const obj: any = {};
    if (message.gridRecord !== undefined) {
      obj.gridRecord = GridRecord.toJSON(message.gridRecord);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventGrid>, I>>(base?: I): EventGrid {
    return EventGrid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventGrid>, I>>(object: I): EventGrid {
    const message = createBaseEventGrid();
    message.gridRecord = (object.gridRecord !== undefined && object.gridRecord !== null)
      ? GridRecord.fromPartial(object.gridRecord)
      : undefined;
    return message;
  },
};

function createBaseEventProviderGrantGuild(): EventProviderGrantGuild {
  return { eventProviderGrantGuildDetail: undefined };
}

export const EventProviderGrantGuild: MessageFns<EventProviderGrantGuild> = {
  encode(message: EventProviderGrantGuild, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventProviderGrantGuildDetail !== undefined) {
      EventProviderGrantGuildDetail.encode(message.eventProviderGrantGuildDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventProviderGrantGuild {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventProviderGrantGuild();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventProviderGrantGuildDetail = EventProviderGrantGuildDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventProviderGrantGuild {
    return {
      eventProviderGrantGuildDetail: isSet(object.eventProviderGrantGuildDetail)
        ? EventProviderGrantGuildDetail.fromJSON(object.eventProviderGrantGuildDetail)
        : undefined,
    };
  },

  toJSON(message: EventProviderGrantGuild): unknown {
    const obj: any = {};
    if (message.eventProviderGrantGuildDetail !== undefined) {
      obj.eventProviderGrantGuildDetail = EventProviderGrantGuildDetail.toJSON(message.eventProviderGrantGuildDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventProviderGrantGuild>, I>>(base?: I): EventProviderGrantGuild {
    return EventProviderGrantGuild.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventProviderGrantGuild>, I>>(object: I): EventProviderGrantGuild {
    const message = createBaseEventProviderGrantGuild();
    message.eventProviderGrantGuildDetail =
      (object.eventProviderGrantGuildDetail !== undefined && object.eventProviderGrantGuildDetail !== null)
        ? EventProviderGrantGuildDetail.fromPartial(object.eventProviderGrantGuildDetail)
        : undefined;
    return message;
  },
};

function createBaseEventProviderGrantGuildDetail(): EventProviderGrantGuildDetail {
  return { providerId: "", guildId: "" };
}

export const EventProviderGrantGuildDetail: MessageFns<EventProviderGrantGuildDetail> = {
  encode(message: EventProviderGrantGuildDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.providerId !== "") {
      writer.uint32(10).string(message.providerId);
    }
    if (message.guildId !== "") {
      writer.uint32(18).string(message.guildId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventProviderGrantGuildDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventProviderGrantGuildDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventProviderGrantGuildDetail {
    return {
      providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "",
      guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "",
    };
  },

  toJSON(message: EventProviderGrantGuildDetail): unknown {
    const obj: any = {};
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventProviderGrantGuildDetail>, I>>(base?: I): EventProviderGrantGuildDetail {
    return EventProviderGrantGuildDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventProviderGrantGuildDetail>, I>>(
    object: I,
  ): EventProviderGrantGuildDetail {
    const message = createBaseEventProviderGrantGuildDetail();
    message.providerId = object.providerId ?? "";
    message.guildId = object.guildId ?? "";
    return message;
  },
};

function createBaseEventProviderRevokeGuild(): EventProviderRevokeGuild {
  return { eventProviderRevokeGuildDetail: undefined };
}

export const EventProviderRevokeGuild: MessageFns<EventProviderRevokeGuild> = {
  encode(message: EventProviderRevokeGuild, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventProviderRevokeGuildDetail !== undefined) {
      EventProviderRevokeGuildDetail.encode(message.eventProviderRevokeGuildDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventProviderRevokeGuild {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventProviderRevokeGuild();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventProviderRevokeGuildDetail = EventProviderRevokeGuildDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventProviderRevokeGuild {
    return {
      eventProviderRevokeGuildDetail: isSet(object.eventProviderRevokeGuildDetail)
        ? EventProviderRevokeGuildDetail.fromJSON(object.eventProviderRevokeGuildDetail)
        : undefined,
    };
  },

  toJSON(message: EventProviderRevokeGuild): unknown {
    const obj: any = {};
    if (message.eventProviderRevokeGuildDetail !== undefined) {
      obj.eventProviderRevokeGuildDetail = EventProviderRevokeGuildDetail.toJSON(
        message.eventProviderRevokeGuildDetail,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventProviderRevokeGuild>, I>>(base?: I): EventProviderRevokeGuild {
    return EventProviderRevokeGuild.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventProviderRevokeGuild>, I>>(object: I): EventProviderRevokeGuild {
    const message = createBaseEventProviderRevokeGuild();
    message.eventProviderRevokeGuildDetail =
      (object.eventProviderRevokeGuildDetail !== undefined && object.eventProviderRevokeGuildDetail !== null)
        ? EventProviderRevokeGuildDetail.fromPartial(object.eventProviderRevokeGuildDetail)
        : undefined;
    return message;
  },
};

function createBaseEventProviderRevokeGuildDetail(): EventProviderRevokeGuildDetail {
  return { providerId: "", guildId: "" };
}

export const EventProviderRevokeGuildDetail: MessageFns<EventProviderRevokeGuildDetail> = {
  encode(message: EventProviderRevokeGuildDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.providerId !== "") {
      writer.uint32(10).string(message.providerId);
    }
    if (message.guildId !== "") {
      writer.uint32(18).string(message.guildId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventProviderRevokeGuildDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventProviderRevokeGuildDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventProviderRevokeGuildDetail {
    return {
      providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "",
      guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "",
    };
  },

  toJSON(message: EventProviderRevokeGuildDetail): unknown {
    const obj: any = {};
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventProviderRevokeGuildDetail>, I>>(base?: I): EventProviderRevokeGuildDetail {
    return EventProviderRevokeGuildDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventProviderRevokeGuildDetail>, I>>(
    object: I,
  ): EventProviderRevokeGuildDetail {
    const message = createBaseEventProviderRevokeGuildDetail();
    message.providerId = object.providerId ?? "";
    message.guildId = object.guildId ?? "";
    return message;
  },
};

function createBaseEventPlayerHalted(): EventPlayerHalted {
  return { playerId: "" };
}

export const EventPlayerHalted: MessageFns<EventPlayerHalted> = {
  encode(message: EventPlayerHalted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPlayerHalted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPlayerHalted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPlayerHalted {
    return { playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "" };
  },

  toJSON(message: EventPlayerHalted): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPlayerHalted>, I>>(base?: I): EventPlayerHalted {
    return EventPlayerHalted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPlayerHalted>, I>>(object: I): EventPlayerHalted {
    const message = createBaseEventPlayerHalted();
    message.playerId = object.playerId ?? "";
    return message;
  },
};

function createBaseEventPlayerResumed(): EventPlayerResumed {
  return { playerId: "" };
}

export const EventPlayerResumed: MessageFns<EventPlayerResumed> = {
  encode(message: EventPlayerResumed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventPlayerResumed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventPlayerResumed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventPlayerResumed {
    return { playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "" };
  },

  toJSON(message: EventPlayerResumed): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventPlayerResumed>, I>>(base?: I): EventPlayerResumed {
    return EventPlayerResumed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventPlayerResumed>, I>>(object: I): EventPlayerResumed {
    const message = createBaseEventPlayerResumed();
    message.playerId = object.playerId ?? "";
    return message;
  },
};

function createBaseEventDelete(): EventDelete {
  return { objectId: "" };
}

export const EventDelete: MessageFns<EventDelete> = {
  encode(message: EventDelete, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.objectId !== "") {
      writer.uint32(10).string(message.objectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventDelete {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDelete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.objectId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventDelete {
    return { objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "" };
  },

  toJSON(message: EventDelete): unknown {
    const obj: any = {};
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventDelete>, I>>(base?: I): EventDelete {
    return EventDelete.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventDelete>, I>>(object: I): EventDelete {
    const message = createBaseEventDelete();
    message.objectId = object.objectId ?? "";
    return message;
  },
};

function createBaseEventAddressAssociation(): EventAddressAssociation {
  return { addressAssociation: undefined };
}

export const EventAddressAssociation: MessageFns<EventAddressAssociation> = {
  encode(message: EventAddressAssociation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.addressAssociation !== undefined) {
      AddressAssociation.encode(message.addressAssociation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAddressAssociation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAddressAssociation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.addressAssociation = AddressAssociation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAddressAssociation {
    return {
      addressAssociation: isSet(object.addressAssociation)
        ? AddressAssociation.fromJSON(object.addressAssociation)
        : undefined,
    };
  },

  toJSON(message: EventAddressAssociation): unknown {
    const obj: any = {};
    if (message.addressAssociation !== undefined) {
      obj.addressAssociation = AddressAssociation.toJSON(message.addressAssociation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAddressAssociation>, I>>(base?: I): EventAddressAssociation {
    return EventAddressAssociation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAddressAssociation>, I>>(object: I): EventAddressAssociation {
    const message = createBaseEventAddressAssociation();
    message.addressAssociation = (object.addressAssociation !== undefined && object.addressAssociation !== null)
      ? AddressAssociation.fromPartial(object.addressAssociation)
      : undefined;
    return message;
  },
};

function createBaseEventAddressActivity(): EventAddressActivity {
  return { addressActivity: undefined };
}

export const EventAddressActivity: MessageFns<EventAddressActivity> = {
  encode(message: EventAddressActivity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.addressActivity !== undefined) {
      AddressActivity.encode(message.addressActivity, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAddressActivity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAddressActivity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.addressActivity = AddressActivity.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAddressActivity {
    return {
      addressActivity: isSet(object.addressActivity) ? AddressActivity.fromJSON(object.addressActivity) : undefined,
    };
  },

  toJSON(message: EventAddressActivity): unknown {
    const obj: any = {};
    if (message.addressActivity !== undefined) {
      obj.addressActivity = AddressActivity.toJSON(message.addressActivity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAddressActivity>, I>>(base?: I): EventAddressActivity {
    return EventAddressActivity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAddressActivity>, I>>(object: I): EventAddressActivity {
    const message = createBaseEventAddressActivity();
    message.addressActivity = (object.addressActivity !== undefined && object.addressActivity !== null)
      ? AddressActivity.fromPartial(object.addressActivity)
      : undefined;
    return message;
  },
};

function createBaseEventGuildBankMint(): EventGuildBankMint {
  return { eventGuildBankMintDetail: undefined };
}

export const EventGuildBankMint: MessageFns<EventGuildBankMint> = {
  encode(message: EventGuildBankMint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventGuildBankMintDetail !== undefined) {
      EventGuildBankMintDetail.encode(message.eventGuildBankMintDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventGuildBankMint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventGuildBankMint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventGuildBankMintDetail = EventGuildBankMintDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventGuildBankMint {
    return {
      eventGuildBankMintDetail: isSet(object.eventGuildBankMintDetail)
        ? EventGuildBankMintDetail.fromJSON(object.eventGuildBankMintDetail)
        : undefined,
    };
  },

  toJSON(message: EventGuildBankMint): unknown {
    const obj: any = {};
    if (message.eventGuildBankMintDetail !== undefined) {
      obj.eventGuildBankMintDetail = EventGuildBankMintDetail.toJSON(message.eventGuildBankMintDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventGuildBankMint>, I>>(base?: I): EventGuildBankMint {
    return EventGuildBankMint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventGuildBankMint>, I>>(object: I): EventGuildBankMint {
    const message = createBaseEventGuildBankMint();
    message.eventGuildBankMintDetail =
      (object.eventGuildBankMintDetail !== undefined && object.eventGuildBankMintDetail !== null)
        ? EventGuildBankMintDetail.fromPartial(object.eventGuildBankMintDetail)
        : undefined;
    return message;
  },
};

function createBaseEventGuildBankMintDetail(): EventGuildBankMintDetail {
  return { guildId: "", amountAlpha: 0, amountToken: 0, playerId: "" };
}

export const EventGuildBankMintDetail: MessageFns<EventGuildBankMintDetail> = {
  encode(message: EventGuildBankMintDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildId !== "") {
      writer.uint32(10).string(message.guildId);
    }
    if (message.amountAlpha !== 0) {
      writer.uint32(16).uint64(message.amountAlpha);
    }
    if (message.amountToken !== 0) {
      writer.uint32(24).uint64(message.amountToken);
    }
    if (message.playerId !== "") {
      writer.uint32(34).string(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventGuildBankMintDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventGuildBankMintDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amountAlpha = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amountToken = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventGuildBankMintDetail {
    return {
      guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "",
      amountAlpha: isSet(object.amountAlpha) ? globalThis.Number(object.amountAlpha) : 0,
      amountToken: isSet(object.amountToken) ? globalThis.Number(object.amountToken) : 0,
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
    };
  },

  toJSON(message: EventGuildBankMintDetail): unknown {
    const obj: any = {};
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    if (message.amountAlpha !== 0) {
      obj.amountAlpha = Math.round(message.amountAlpha);
    }
    if (message.amountToken !== 0) {
      obj.amountToken = Math.round(message.amountToken);
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventGuildBankMintDetail>, I>>(base?: I): EventGuildBankMintDetail {
    return EventGuildBankMintDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventGuildBankMintDetail>, I>>(object: I): EventGuildBankMintDetail {
    const message = createBaseEventGuildBankMintDetail();
    message.guildId = object.guildId ?? "";
    message.amountAlpha = object.amountAlpha ?? 0;
    message.amountToken = object.amountToken ?? 0;
    message.playerId = object.playerId ?? "";
    return message;
  },
};

function createBaseEventGuildBankRedeem(): EventGuildBankRedeem {
  return { eventGuildBankRedeemDetail: undefined };
}

export const EventGuildBankRedeem: MessageFns<EventGuildBankRedeem> = {
  encode(message: EventGuildBankRedeem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventGuildBankRedeemDetail !== undefined) {
      EventGuildBankRedeemDetail.encode(message.eventGuildBankRedeemDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventGuildBankRedeem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventGuildBankRedeem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventGuildBankRedeemDetail = EventGuildBankRedeemDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventGuildBankRedeem {
    return {
      eventGuildBankRedeemDetail: isSet(object.eventGuildBankRedeemDetail)
        ? EventGuildBankRedeemDetail.fromJSON(object.eventGuildBankRedeemDetail)
        : undefined,
    };
  },

  toJSON(message: EventGuildBankRedeem): unknown {
    const obj: any = {};
    if (message.eventGuildBankRedeemDetail !== undefined) {
      obj.eventGuildBankRedeemDetail = EventGuildBankRedeemDetail.toJSON(message.eventGuildBankRedeemDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventGuildBankRedeem>, I>>(base?: I): EventGuildBankRedeem {
    return EventGuildBankRedeem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventGuildBankRedeem>, I>>(object: I): EventGuildBankRedeem {
    const message = createBaseEventGuildBankRedeem();
    message.eventGuildBankRedeemDetail =
      (object.eventGuildBankRedeemDetail !== undefined && object.eventGuildBankRedeemDetail !== null)
        ? EventGuildBankRedeemDetail.fromPartial(object.eventGuildBankRedeemDetail)
        : undefined;
    return message;
  },
};

function createBaseEventGuildBankRedeemDetail(): EventGuildBankRedeemDetail {
  return { guildId: "", amountAlpha: 0, amountToken: 0, playerId: "" };
}

export const EventGuildBankRedeemDetail: MessageFns<EventGuildBankRedeemDetail> = {
  encode(message: EventGuildBankRedeemDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildId !== "") {
      writer.uint32(10).string(message.guildId);
    }
    if (message.amountAlpha !== 0) {
      writer.uint32(16).uint64(message.amountAlpha);
    }
    if (message.amountToken !== 0) {
      writer.uint32(24).uint64(message.amountToken);
    }
    if (message.playerId !== "") {
      writer.uint32(34).string(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventGuildBankRedeemDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventGuildBankRedeemDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amountAlpha = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amountToken = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventGuildBankRedeemDetail {
    return {
      guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "",
      amountAlpha: isSet(object.amountAlpha) ? globalThis.Number(object.amountAlpha) : 0,
      amountToken: isSet(object.amountToken) ? globalThis.Number(object.amountToken) : 0,
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
    };
  },

  toJSON(message: EventGuildBankRedeemDetail): unknown {
    const obj: any = {};
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    if (message.amountAlpha !== 0) {
      obj.amountAlpha = Math.round(message.amountAlpha);
    }
    if (message.amountToken !== 0) {
      obj.amountToken = Math.round(message.amountToken);
    }
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventGuildBankRedeemDetail>, I>>(base?: I): EventGuildBankRedeemDetail {
    return EventGuildBankRedeemDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventGuildBankRedeemDetail>, I>>(object: I): EventGuildBankRedeemDetail {
    const message = createBaseEventGuildBankRedeemDetail();
    message.guildId = object.guildId ?? "";
    message.amountAlpha = object.amountAlpha ?? 0;
    message.amountToken = object.amountToken ?? 0;
    message.playerId = object.playerId ?? "";
    return message;
  },
};

function createBaseEventGuildBankConfiscateAndBurn(): EventGuildBankConfiscateAndBurn {
  return { eventGuildBankConfiscateAndBurnDetail: undefined };
}

export const EventGuildBankConfiscateAndBurn: MessageFns<EventGuildBankConfiscateAndBurn> = {
  encode(message: EventGuildBankConfiscateAndBurn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventGuildBankConfiscateAndBurnDetail !== undefined) {
      EventGuildBankConfiscateAndBurnDetail.encode(
        message.eventGuildBankConfiscateAndBurnDetail,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventGuildBankConfiscateAndBurn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventGuildBankConfiscateAndBurn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventGuildBankConfiscateAndBurnDetail = EventGuildBankConfiscateAndBurnDetail.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventGuildBankConfiscateAndBurn {
    return {
      eventGuildBankConfiscateAndBurnDetail: isSet(object.eventGuildBankConfiscateAndBurnDetail)
        ? EventGuildBankConfiscateAndBurnDetail.fromJSON(object.eventGuildBankConfiscateAndBurnDetail)
        : undefined,
    };
  },

  toJSON(message: EventGuildBankConfiscateAndBurn): unknown {
    const obj: any = {};
    if (message.eventGuildBankConfiscateAndBurnDetail !== undefined) {
      obj.eventGuildBankConfiscateAndBurnDetail = EventGuildBankConfiscateAndBurnDetail.toJSON(
        message.eventGuildBankConfiscateAndBurnDetail,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventGuildBankConfiscateAndBurn>, I>>(base?: I): EventGuildBankConfiscateAndBurn {
    return EventGuildBankConfiscateAndBurn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventGuildBankConfiscateAndBurn>, I>>(
    object: I,
  ): EventGuildBankConfiscateAndBurn {
    const message = createBaseEventGuildBankConfiscateAndBurn();
    message.eventGuildBankConfiscateAndBurnDetail =
      (object.eventGuildBankConfiscateAndBurnDetail !== undefined &&
          object.eventGuildBankConfiscateAndBurnDetail !== null)
        ? EventGuildBankConfiscateAndBurnDetail.fromPartial(object.eventGuildBankConfiscateAndBurnDetail)
        : undefined;
    return message;
  },
};

function createBaseEventGuildBankConfiscateAndBurnDetail(): EventGuildBankConfiscateAndBurnDetail {
  return { guildId: "", amountAlpha: 0, amountToken: 0, address: "" };
}

export const EventGuildBankConfiscateAndBurnDetail: MessageFns<EventGuildBankConfiscateAndBurnDetail> = {
  encode(message: EventGuildBankConfiscateAndBurnDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildId !== "") {
      writer.uint32(10).string(message.guildId);
    }
    if (message.amountAlpha !== 0) {
      writer.uint32(16).uint64(message.amountAlpha);
    }
    if (message.amountToken !== 0) {
      writer.uint32(24).uint64(message.amountToken);
    }
    if (message.address !== "") {
      writer.uint32(34).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventGuildBankConfiscateAndBurnDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventGuildBankConfiscateAndBurnDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guildId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amountAlpha = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amountToken = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventGuildBankConfiscateAndBurnDetail {
    return {
      guildId: isSet(object.guildId) ? globalThis.String(object.guildId) : "",
      amountAlpha: isSet(object.amountAlpha) ? globalThis.Number(object.amountAlpha) : 0,
      amountToken: isSet(object.amountToken) ? globalThis.Number(object.amountToken) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: EventGuildBankConfiscateAndBurnDetail): unknown {
    const obj: any = {};
    if (message.guildId !== "") {
      obj.guildId = message.guildId;
    }
    if (message.amountAlpha !== 0) {
      obj.amountAlpha = Math.round(message.amountAlpha);
    }
    if (message.amountToken !== 0) {
      obj.amountToken = Math.round(message.amountToken);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventGuildBankConfiscateAndBurnDetail>, I>>(
    base?: I,
  ): EventGuildBankConfiscateAndBurnDetail {
    return EventGuildBankConfiscateAndBurnDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventGuildBankConfiscateAndBurnDetail>, I>>(
    object: I,
  ): EventGuildBankConfiscateAndBurnDetail {
    const message = createBaseEventGuildBankConfiscateAndBurnDetail();
    message.guildId = object.guildId ?? "";
    message.amountAlpha = object.amountAlpha ?? 0;
    message.amountToken = object.amountToken ?? 0;
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseEventGuildMembershipApplication(): EventGuildMembershipApplication {
  return { guildMembershipApplication: undefined };
}

export const EventGuildMembershipApplication: MessageFns<EventGuildMembershipApplication> = {
  encode(message: EventGuildMembershipApplication, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guildMembershipApplication !== undefined) {
      GuildMembershipApplication.encode(message.guildMembershipApplication, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventGuildMembershipApplication {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventGuildMembershipApplication();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.guildMembershipApplication = GuildMembershipApplication.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventGuildMembershipApplication {
    return {
      guildMembershipApplication: isSet(object.guildMembershipApplication)
        ? GuildMembershipApplication.fromJSON(object.guildMembershipApplication)
        : undefined,
    };
  },

  toJSON(message: EventGuildMembershipApplication): unknown {
    const obj: any = {};
    if (message.guildMembershipApplication !== undefined) {
      obj.guildMembershipApplication = GuildMembershipApplication.toJSON(message.guildMembershipApplication);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventGuildMembershipApplication>, I>>(base?: I): EventGuildMembershipApplication {
    return EventGuildMembershipApplication.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventGuildMembershipApplication>, I>>(
    object: I,
  ): EventGuildMembershipApplication {
    const message = createBaseEventGuildMembershipApplication();
    message.guildMembershipApplication =
      (object.guildMembershipApplication !== undefined && object.guildMembershipApplication !== null)
        ? GuildMembershipApplication.fromPartial(object.guildMembershipApplication)
        : undefined;
    return message;
  },
};

function createBaseEventOreMine(): EventOreMine {
  return { eventOreMineDetail: undefined };
}

export const EventOreMine: MessageFns<EventOreMine> = {
  encode(message: EventOreMine, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventOreMineDetail !== undefined) {
      EventOreMineDetail.encode(message.eventOreMineDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOreMine {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOreMine();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventOreMineDetail = EventOreMineDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOreMine {
    return {
      eventOreMineDetail: isSet(object.eventOreMineDetail)
        ? EventOreMineDetail.fromJSON(object.eventOreMineDetail)
        : undefined,
    };
  },

  toJSON(message: EventOreMine): unknown {
    const obj: any = {};
    if (message.eventOreMineDetail !== undefined) {
      obj.eventOreMineDetail = EventOreMineDetail.toJSON(message.eventOreMineDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOreMine>, I>>(base?: I): EventOreMine {
    return EventOreMine.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOreMine>, I>>(object: I): EventOreMine {
    const message = createBaseEventOreMine();
    message.eventOreMineDetail = (object.eventOreMineDetail !== undefined && object.eventOreMineDetail !== null)
      ? EventOreMineDetail.fromPartial(object.eventOreMineDetail)
      : undefined;
    return message;
  },
};

function createBaseEventOreMineDetail(): EventOreMineDetail {
  return { playerId: "", primaryAddress: "", amount: 0 };
}

export const EventOreMineDetail: MessageFns<EventOreMineDetail> = {
  encode(message: EventOreMineDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.primaryAddress !== "") {
      writer.uint32(18).string(message.primaryAddress);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOreMineDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOreMineDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.primaryAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOreMineDetail {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      primaryAddress: isSet(object.primaryAddress) ? globalThis.String(object.primaryAddress) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: EventOreMineDetail): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.primaryAddress !== "") {
      obj.primaryAddress = message.primaryAddress;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOreMineDetail>, I>>(base?: I): EventOreMineDetail {
    return EventOreMineDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOreMineDetail>, I>>(object: I): EventOreMineDetail {
    const message = createBaseEventOreMineDetail();
    message.playerId = object.playerId ?? "";
    message.primaryAddress = object.primaryAddress ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseEventAlphaRefine(): EventAlphaRefine {
  return { eventAlphaRefineDetail: undefined };
}

export const EventAlphaRefine: MessageFns<EventAlphaRefine> = {
  encode(message: EventAlphaRefine, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventAlphaRefineDetail !== undefined) {
      EventAlphaRefineDetail.encode(message.eventAlphaRefineDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAlphaRefine {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAlphaRefine();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventAlphaRefineDetail = EventAlphaRefineDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAlphaRefine {
    return {
      eventAlphaRefineDetail: isSet(object.eventAlphaRefineDetail)
        ? EventAlphaRefineDetail.fromJSON(object.eventAlphaRefineDetail)
        : undefined,
    };
  },

  toJSON(message: EventAlphaRefine): unknown {
    const obj: any = {};
    if (message.eventAlphaRefineDetail !== undefined) {
      obj.eventAlphaRefineDetail = EventAlphaRefineDetail.toJSON(message.eventAlphaRefineDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAlphaRefine>, I>>(base?: I): EventAlphaRefine {
    return EventAlphaRefine.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAlphaRefine>, I>>(object: I): EventAlphaRefine {
    const message = createBaseEventAlphaRefine();
    message.eventAlphaRefineDetail =
      (object.eventAlphaRefineDetail !== undefined && object.eventAlphaRefineDetail !== null)
        ? EventAlphaRefineDetail.fromPartial(object.eventAlphaRefineDetail)
        : undefined;
    return message;
  },
};

function createBaseEventAlphaRefineDetail(): EventAlphaRefineDetail {
  return { playerId: "", primaryAddress: "", amount: 0 };
}

export const EventAlphaRefineDetail: MessageFns<EventAlphaRefineDetail> = {
  encode(message: EventAlphaRefineDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.primaryAddress !== "") {
      writer.uint32(18).string(message.primaryAddress);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAlphaRefineDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAlphaRefineDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.primaryAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAlphaRefineDetail {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      primaryAddress: isSet(object.primaryAddress) ? globalThis.String(object.primaryAddress) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: EventAlphaRefineDetail): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.primaryAddress !== "") {
      obj.primaryAddress = message.primaryAddress;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAlphaRefineDetail>, I>>(base?: I): EventAlphaRefineDetail {
    return EventAlphaRefineDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAlphaRefineDetail>, I>>(object: I): EventAlphaRefineDetail {
    const message = createBaseEventAlphaRefineDetail();
    message.playerId = object.playerId ?? "";
    message.primaryAddress = object.primaryAddress ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseEventAlphaInfuse(): EventAlphaInfuse {
  return { eventAlphaInfuseDetail: undefined };
}

export const EventAlphaInfuse: MessageFns<EventAlphaInfuse> = {
  encode(message: EventAlphaInfuse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventAlphaInfuseDetail !== undefined) {
      EventAlphaInfuseDetail.encode(message.eventAlphaInfuseDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAlphaInfuse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAlphaInfuse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventAlphaInfuseDetail = EventAlphaInfuseDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAlphaInfuse {
    return {
      eventAlphaInfuseDetail: isSet(object.eventAlphaInfuseDetail)
        ? EventAlphaInfuseDetail.fromJSON(object.eventAlphaInfuseDetail)
        : undefined,
    };
  },

  toJSON(message: EventAlphaInfuse): unknown {
    const obj: any = {};
    if (message.eventAlphaInfuseDetail !== undefined) {
      obj.eventAlphaInfuseDetail = EventAlphaInfuseDetail.toJSON(message.eventAlphaInfuseDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAlphaInfuse>, I>>(base?: I): EventAlphaInfuse {
    return EventAlphaInfuse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAlphaInfuse>, I>>(object: I): EventAlphaInfuse {
    const message = createBaseEventAlphaInfuse();
    message.eventAlphaInfuseDetail =
      (object.eventAlphaInfuseDetail !== undefined && object.eventAlphaInfuseDetail !== null)
        ? EventAlphaInfuseDetail.fromPartial(object.eventAlphaInfuseDetail)
        : undefined;
    return message;
  },
};

function createBaseEventAlphaInfuseDetail(): EventAlphaInfuseDetail {
  return { playerId: "", primaryAddress: "", amount: 0 };
}

export const EventAlphaInfuseDetail: MessageFns<EventAlphaInfuseDetail> = {
  encode(message: EventAlphaInfuseDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.primaryAddress !== "") {
      writer.uint32(18).string(message.primaryAddress);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAlphaInfuseDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAlphaInfuseDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.primaryAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAlphaInfuseDetail {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      primaryAddress: isSet(object.primaryAddress) ? globalThis.String(object.primaryAddress) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: EventAlphaInfuseDetail): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.primaryAddress !== "") {
      obj.primaryAddress = message.primaryAddress;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAlphaInfuseDetail>, I>>(base?: I): EventAlphaInfuseDetail {
    return EventAlphaInfuseDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAlphaInfuseDetail>, I>>(object: I): EventAlphaInfuseDetail {
    const message = createBaseEventAlphaInfuseDetail();
    message.playerId = object.playerId ?? "";
    message.primaryAddress = object.primaryAddress ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseEventAlphaDefuse(): EventAlphaDefuse {
  return { eventAlphaDefuseDetail: undefined };
}

export const EventAlphaDefuse: MessageFns<EventAlphaDefuse> = {
  encode(message: EventAlphaDefuse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventAlphaDefuseDetail !== undefined) {
      EventAlphaDefuseDetail.encode(message.eventAlphaDefuseDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAlphaDefuse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAlphaDefuse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventAlphaDefuseDetail = EventAlphaDefuseDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAlphaDefuse {
    return {
      eventAlphaDefuseDetail: isSet(object.eventAlphaDefuseDetail)
        ? EventAlphaDefuseDetail.fromJSON(object.eventAlphaDefuseDetail)
        : undefined,
    };
  },

  toJSON(message: EventAlphaDefuse): unknown {
    const obj: any = {};
    if (message.eventAlphaDefuseDetail !== undefined) {
      obj.eventAlphaDefuseDetail = EventAlphaDefuseDetail.toJSON(message.eventAlphaDefuseDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAlphaDefuse>, I>>(base?: I): EventAlphaDefuse {
    return EventAlphaDefuse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAlphaDefuse>, I>>(object: I): EventAlphaDefuse {
    const message = createBaseEventAlphaDefuse();
    message.eventAlphaDefuseDetail =
      (object.eventAlphaDefuseDetail !== undefined && object.eventAlphaDefuseDetail !== null)
        ? EventAlphaDefuseDetail.fromPartial(object.eventAlphaDefuseDetail)
        : undefined;
    return message;
  },
};

function createBaseEventAlphaDefuseDetail(): EventAlphaDefuseDetail {
  return { primaryAddress: "", amount: 0 };
}

export const EventAlphaDefuseDetail: MessageFns<EventAlphaDefuseDetail> = {
  encode(message: EventAlphaDefuseDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.primaryAddress !== "") {
      writer.uint32(10).string(message.primaryAddress);
    }
    if (message.amount !== 0) {
      writer.uint32(16).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAlphaDefuseDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAlphaDefuseDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.primaryAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAlphaDefuseDetail {
    return {
      primaryAddress: isSet(object.primaryAddress) ? globalThis.String(object.primaryAddress) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: EventAlphaDefuseDetail): unknown {
    const obj: any = {};
    if (message.primaryAddress !== "") {
      obj.primaryAddress = message.primaryAddress;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAlphaDefuseDetail>, I>>(base?: I): EventAlphaDefuseDetail {
    return EventAlphaDefuseDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAlphaDefuseDetail>, I>>(object: I): EventAlphaDefuseDetail {
    const message = createBaseEventAlphaDefuseDetail();
    message.primaryAddress = object.primaryAddress ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseEventOreTheft(): EventOreTheft {
  return { eventOreTheftDetail: undefined };
}

export const EventOreTheft: MessageFns<EventOreTheft> = {
  encode(message: EventOreTheft, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventOreTheftDetail !== undefined) {
      EventOreTheftDetail.encode(message.eventOreTheftDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOreTheft {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOreTheft();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventOreTheftDetail = EventOreTheftDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOreTheft {
    return {
      eventOreTheftDetail: isSet(object.eventOreTheftDetail)
        ? EventOreTheftDetail.fromJSON(object.eventOreTheftDetail)
        : undefined,
    };
  },

  toJSON(message: EventOreTheft): unknown {
    const obj: any = {};
    if (message.eventOreTheftDetail !== undefined) {
      obj.eventOreTheftDetail = EventOreTheftDetail.toJSON(message.eventOreTheftDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOreTheft>, I>>(base?: I): EventOreTheft {
    return EventOreTheft.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOreTheft>, I>>(object: I): EventOreTheft {
    const message = createBaseEventOreTheft();
    message.eventOreTheftDetail = (object.eventOreTheftDetail !== undefined && object.eventOreTheftDetail !== null)
      ? EventOreTheftDetail.fromPartial(object.eventOreTheftDetail)
      : undefined;
    return message;
  },
};

function createBaseEventOreTheftDetail(): EventOreTheftDetail {
  return { victimPrimaryAddress: "", victimPlayerId: "", thiefPrimaryAddress: "", thiefPlayerId: "", amount: 0 };
}

export const EventOreTheftDetail: MessageFns<EventOreTheftDetail> = {
  encode(message: EventOreTheftDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.victimPrimaryAddress !== "") {
      writer.uint32(10).string(message.victimPrimaryAddress);
    }
    if (message.victimPlayerId !== "") {
      writer.uint32(18).string(message.victimPlayerId);
    }
    if (message.thiefPrimaryAddress !== "") {
      writer.uint32(26).string(message.thiefPrimaryAddress);
    }
    if (message.thiefPlayerId !== "") {
      writer.uint32(34).string(message.thiefPlayerId);
    }
    if (message.amount !== 0) {
      writer.uint32(40).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOreTheftDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOreTheftDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.victimPrimaryAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.victimPlayerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.thiefPrimaryAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.thiefPlayerId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOreTheftDetail {
    return {
      victimPrimaryAddress: isSet(object.victimPrimaryAddress) ? globalThis.String(object.victimPrimaryAddress) : "",
      victimPlayerId: isSet(object.victimPlayerId) ? globalThis.String(object.victimPlayerId) : "",
      thiefPrimaryAddress: isSet(object.thiefPrimaryAddress) ? globalThis.String(object.thiefPrimaryAddress) : "",
      thiefPlayerId: isSet(object.thiefPlayerId) ? globalThis.String(object.thiefPlayerId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: EventOreTheftDetail): unknown {
    const obj: any = {};
    if (message.victimPrimaryAddress !== "") {
      obj.victimPrimaryAddress = message.victimPrimaryAddress;
    }
    if (message.victimPlayerId !== "") {
      obj.victimPlayerId = message.victimPlayerId;
    }
    if (message.thiefPrimaryAddress !== "") {
      obj.thiefPrimaryAddress = message.thiefPrimaryAddress;
    }
    if (message.thiefPlayerId !== "") {
      obj.thiefPlayerId = message.thiefPlayerId;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOreTheftDetail>, I>>(base?: I): EventOreTheftDetail {
    return EventOreTheftDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOreTheftDetail>, I>>(object: I): EventOreTheftDetail {
    const message = createBaseEventOreTheftDetail();
    message.victimPrimaryAddress = object.victimPrimaryAddress ?? "";
    message.victimPlayerId = object.victimPlayerId ?? "";
    message.thiefPrimaryAddress = object.thiefPrimaryAddress ?? "";
    message.thiefPlayerId = object.thiefPlayerId ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseEventOreMigrate(): EventOreMigrate {
  return { eventOreMigrateDetail: undefined };
}

export const EventOreMigrate: MessageFns<EventOreMigrate> = {
  encode(message: EventOreMigrate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventOreMigrateDetail !== undefined) {
      EventOreMigrateDetail.encode(message.eventOreMigrateDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOreMigrate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOreMigrate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventOreMigrateDetail = EventOreMigrateDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOreMigrate {
    return {
      eventOreMigrateDetail: isSet(object.eventOreMigrateDetail)
        ? EventOreMigrateDetail.fromJSON(object.eventOreMigrateDetail)
        : undefined,
    };
  },

  toJSON(message: EventOreMigrate): unknown {
    const obj: any = {};
    if (message.eventOreMigrateDetail !== undefined) {
      obj.eventOreMigrateDetail = EventOreMigrateDetail.toJSON(message.eventOreMigrateDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOreMigrate>, I>>(base?: I): EventOreMigrate {
    return EventOreMigrate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOreMigrate>, I>>(object: I): EventOreMigrate {
    const message = createBaseEventOreMigrate();
    message.eventOreMigrateDetail =
      (object.eventOreMigrateDetail !== undefined && object.eventOreMigrateDetail !== null)
        ? EventOreMigrateDetail.fromPartial(object.eventOreMigrateDetail)
        : undefined;
    return message;
  },
};

function createBaseEventOreMigrateDetail(): EventOreMigrateDetail {
  return { playerId: "", primaryAddress: "", oldPrimaryAddress: "", amount: 0 };
}

export const EventOreMigrateDetail: MessageFns<EventOreMigrateDetail> = {
  encode(message: EventOreMigrateDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.primaryAddress !== "") {
      writer.uint32(18).string(message.primaryAddress);
    }
    if (message.oldPrimaryAddress !== "") {
      writer.uint32(26).string(message.oldPrimaryAddress);
    }
    if (message.amount !== 0) {
      writer.uint32(32).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOreMigrateDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOreMigrateDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.primaryAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.oldPrimaryAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOreMigrateDetail {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      primaryAddress: isSet(object.primaryAddress) ? globalThis.String(object.primaryAddress) : "",
      oldPrimaryAddress: isSet(object.oldPrimaryAddress) ? globalThis.String(object.oldPrimaryAddress) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: EventOreMigrateDetail): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.primaryAddress !== "") {
      obj.primaryAddress = message.primaryAddress;
    }
    if (message.oldPrimaryAddress !== "") {
      obj.oldPrimaryAddress = message.oldPrimaryAddress;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventOreMigrateDetail>, I>>(base?: I): EventOreMigrateDetail {
    return EventOreMigrateDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventOreMigrateDetail>, I>>(object: I): EventOreMigrateDetail {
    const message = createBaseEventOreMigrateDetail();
    message.playerId = object.playerId ?? "";
    message.primaryAddress = object.primaryAddress ?? "";
    message.oldPrimaryAddress = object.oldPrimaryAddress ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseEventAttack(): EventAttack {
  return { eventAttackDetail: undefined };
}

export const EventAttack: MessageFns<EventAttack> = {
  encode(message: EventAttack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventAttackDetail !== undefined) {
      EventAttackDetail.encode(message.eventAttackDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventAttackDetail = EventAttackDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttack {
    return {
      eventAttackDetail: isSet(object.eventAttackDetail)
        ? EventAttackDetail.fromJSON(object.eventAttackDetail)
        : undefined,
    };
  },

  toJSON(message: EventAttack): unknown {
    const obj: any = {};
    if (message.eventAttackDetail !== undefined) {
      obj.eventAttackDetail = EventAttackDetail.toJSON(message.eventAttackDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttack>, I>>(base?: I): EventAttack {
    return EventAttack.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttack>, I>>(object: I): EventAttack {
    const message = createBaseEventAttack();
    message.eventAttackDetail = (object.eventAttackDetail !== undefined && object.eventAttackDetail !== null)
      ? EventAttackDetail.fromPartial(object.eventAttackDetail)
      : undefined;
    return message;
  },
};

function createBaseEventAttackDetail(): EventAttackDetail {
  return {
    attackerStructId: "",
    attackerStructType: 0,
    attackerStructLocationType: 0,
    attackerStructLocationId: "",
    attackerStructOperatingAmbit: 0,
    attackerStructSlot: 0,
    weaponSystem: 0,
    weaponControl: 0,
    activeWeaponry: 0,
    eventAttackShotDetail: [],
    recoilDamageToAttacker: false,
    recoilDamage: 0,
    recoilDamageDestroyedAttacker: false,
    planetaryDefenseCannonDamageToAttacker: false,
    planetaryDefenseCannonDamage: 0,
    planetaryDefenseCannonDamageDestroyedAttacker: false,
    attackerPlayerId: "",
    targetPlayerId: "",
  };
}

export const EventAttackDetail: MessageFns<EventAttackDetail> = {
  encode(message: EventAttackDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attackerStructId !== "") {
      writer.uint32(10).string(message.attackerStructId);
    }
    if (message.attackerStructType !== 0) {
      writer.uint32(16).uint64(message.attackerStructType);
    }
    if (message.attackerStructLocationType !== 0) {
      writer.uint32(24).int32(message.attackerStructLocationType);
    }
    if (message.attackerStructLocationId !== "") {
      writer.uint32(34).string(message.attackerStructLocationId);
    }
    if (message.attackerStructOperatingAmbit !== 0) {
      writer.uint32(40).int32(message.attackerStructOperatingAmbit);
    }
    if (message.attackerStructSlot !== 0) {
      writer.uint32(48).uint64(message.attackerStructSlot);
    }
    if (message.weaponSystem !== 0) {
      writer.uint32(56).int32(message.weaponSystem);
    }
    if (message.weaponControl !== 0) {
      writer.uint32(64).int32(message.weaponControl);
    }
    if (message.activeWeaponry !== 0) {
      writer.uint32(72).int32(message.activeWeaponry);
    }
    for (const v of message.eventAttackShotDetail) {
      EventAttackShotDetail.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.recoilDamageToAttacker !== false) {
      writer.uint32(88).bool(message.recoilDamageToAttacker);
    }
    if (message.recoilDamage !== 0) {
      writer.uint32(96).uint64(message.recoilDamage);
    }
    if (message.recoilDamageDestroyedAttacker !== false) {
      writer.uint32(104).bool(message.recoilDamageDestroyedAttacker);
    }
    if (message.planetaryDefenseCannonDamageToAttacker !== false) {
      writer.uint32(112).bool(message.planetaryDefenseCannonDamageToAttacker);
    }
    if (message.planetaryDefenseCannonDamage !== 0) {
      writer.uint32(120).uint64(message.planetaryDefenseCannonDamage);
    }
    if (message.planetaryDefenseCannonDamageDestroyedAttacker !== false) {
      writer.uint32(128).bool(message.planetaryDefenseCannonDamageDestroyedAttacker);
    }
    if (message.attackerPlayerId !== "") {
      writer.uint32(138).string(message.attackerPlayerId);
    }
    if (message.targetPlayerId !== "") {
      writer.uint32(146).string(message.targetPlayerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttackDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttackDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attackerStructId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.attackerStructType = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.attackerStructLocationType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attackerStructLocationId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.attackerStructOperatingAmbit = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.attackerStructSlot = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.weaponSystem = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.weaponControl = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.activeWeaponry = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.eventAttackShotDetail.push(EventAttackShotDetail.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.recoilDamageToAttacker = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.recoilDamage = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.recoilDamageDestroyedAttacker = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.planetaryDefenseCannonDamageToAttacker = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.planetaryDefenseCannonDamage = longToNumber(reader.uint64());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.planetaryDefenseCannonDamageDestroyedAttacker = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.attackerPlayerId = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.targetPlayerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttackDetail {
    return {
      attackerStructId: isSet(object.attackerStructId) ? globalThis.String(object.attackerStructId) : "",
      attackerStructType: isSet(object.attackerStructType) ? globalThis.Number(object.attackerStructType) : 0,
      attackerStructLocationType: isSet(object.attackerStructLocationType)
        ? objectTypeFromJSON(object.attackerStructLocationType)
        : 0,
      attackerStructLocationId: isSet(object.attackerStructLocationId)
        ? globalThis.String(object.attackerStructLocationId)
        : "",
      attackerStructOperatingAmbit: isSet(object.attackerStructOperatingAmbit)
        ? ambitFromJSON(object.attackerStructOperatingAmbit)
        : 0,
      attackerStructSlot: isSet(object.attackerStructSlot) ? globalThis.Number(object.attackerStructSlot) : 0,
      weaponSystem: isSet(object.weaponSystem) ? techWeaponSystemFromJSON(object.weaponSystem) : 0,
      weaponControl: isSet(object.weaponControl) ? techWeaponControlFromJSON(object.weaponControl) : 0,
      activeWeaponry: isSet(object.activeWeaponry) ? techActiveWeaponryFromJSON(object.activeWeaponry) : 0,
      eventAttackShotDetail: globalThis.Array.isArray(object?.eventAttackShotDetail)
        ? object.eventAttackShotDetail.map((e: any) => EventAttackShotDetail.fromJSON(e))
        : [],
      recoilDamageToAttacker: isSet(object.recoilDamageToAttacker)
        ? globalThis.Boolean(object.recoilDamageToAttacker)
        : false,
      recoilDamage: isSet(object.recoilDamage) ? globalThis.Number(object.recoilDamage) : 0,
      recoilDamageDestroyedAttacker: isSet(object.recoilDamageDestroyedAttacker)
        ? globalThis.Boolean(object.recoilDamageDestroyedAttacker)
        : false,
      planetaryDefenseCannonDamageToAttacker: isSet(object.planetaryDefenseCannonDamageToAttacker)
        ? globalThis.Boolean(object.planetaryDefenseCannonDamageToAttacker)
        : false,
      planetaryDefenseCannonDamage: isSet(object.planetaryDefenseCannonDamage)
        ? globalThis.Number(object.planetaryDefenseCannonDamage)
        : 0,
      planetaryDefenseCannonDamageDestroyedAttacker: isSet(object.planetaryDefenseCannonDamageDestroyedAttacker)
        ? globalThis.Boolean(object.planetaryDefenseCannonDamageDestroyedAttacker)
        : false,
      attackerPlayerId: isSet(object.attackerPlayerId) ? globalThis.String(object.attackerPlayerId) : "",
      targetPlayerId: isSet(object.targetPlayerId) ? globalThis.String(object.targetPlayerId) : "",
    };
  },

  toJSON(message: EventAttackDetail): unknown {
    const obj: any = {};
    if (message.attackerStructId !== "") {
      obj.attackerStructId = message.attackerStructId;
    }
    if (message.attackerStructType !== 0) {
      obj.attackerStructType = Math.round(message.attackerStructType);
    }
    if (message.attackerStructLocationType !== 0) {
      obj.attackerStructLocationType = objectTypeToJSON(message.attackerStructLocationType);
    }
    if (message.attackerStructLocationId !== "") {
      obj.attackerStructLocationId = message.attackerStructLocationId;
    }
    if (message.attackerStructOperatingAmbit !== 0) {
      obj.attackerStructOperatingAmbit = ambitToJSON(message.attackerStructOperatingAmbit);
    }
    if (message.attackerStructSlot !== 0) {
      obj.attackerStructSlot = Math.round(message.attackerStructSlot);
    }
    if (message.weaponSystem !== 0) {
      obj.weaponSystem = techWeaponSystemToJSON(message.weaponSystem);
    }
    if (message.weaponControl !== 0) {
      obj.weaponControl = techWeaponControlToJSON(message.weaponControl);
    }
    if (message.activeWeaponry !== 0) {
      obj.activeWeaponry = techActiveWeaponryToJSON(message.activeWeaponry);
    }
    if (message.eventAttackShotDetail?.length) {
      obj.eventAttackShotDetail = message.eventAttackShotDetail.map((e) => EventAttackShotDetail.toJSON(e));
    }
    if (message.recoilDamageToAttacker !== false) {
      obj.recoilDamageToAttacker = message.recoilDamageToAttacker;
    }
    if (message.recoilDamage !== 0) {
      obj.recoilDamage = Math.round(message.recoilDamage);
    }
    if (message.recoilDamageDestroyedAttacker !== false) {
      obj.recoilDamageDestroyedAttacker = message.recoilDamageDestroyedAttacker;
    }
    if (message.planetaryDefenseCannonDamageToAttacker !== false) {
      obj.planetaryDefenseCannonDamageToAttacker = message.planetaryDefenseCannonDamageToAttacker;
    }
    if (message.planetaryDefenseCannonDamage !== 0) {
      obj.planetaryDefenseCannonDamage = Math.round(message.planetaryDefenseCannonDamage);
    }
    if (message.planetaryDefenseCannonDamageDestroyedAttacker !== false) {
      obj.planetaryDefenseCannonDamageDestroyedAttacker = message.planetaryDefenseCannonDamageDestroyedAttacker;
    }
    if (message.attackerPlayerId !== "") {
      obj.attackerPlayerId = message.attackerPlayerId;
    }
    if (message.targetPlayerId !== "") {
      obj.targetPlayerId = message.targetPlayerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttackDetail>, I>>(base?: I): EventAttackDetail {
    return EventAttackDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttackDetail>, I>>(object: I): EventAttackDetail {
    const message = createBaseEventAttackDetail();
    message.attackerStructId = object.attackerStructId ?? "";
    message.attackerStructType = object.attackerStructType ?? 0;
    message.attackerStructLocationType = object.attackerStructLocationType ?? 0;
    message.attackerStructLocationId = object.attackerStructLocationId ?? "";
    message.attackerStructOperatingAmbit = object.attackerStructOperatingAmbit ?? 0;
    message.attackerStructSlot = object.attackerStructSlot ?? 0;
    message.weaponSystem = object.weaponSystem ?? 0;
    message.weaponControl = object.weaponControl ?? 0;
    message.activeWeaponry = object.activeWeaponry ?? 0;
    message.eventAttackShotDetail = object.eventAttackShotDetail?.map((e) => EventAttackShotDetail.fromPartial(e)) ||
      [];
    message.recoilDamageToAttacker = object.recoilDamageToAttacker ?? false;
    message.recoilDamage = object.recoilDamage ?? 0;
    message.recoilDamageDestroyedAttacker = object.recoilDamageDestroyedAttacker ?? false;
    message.planetaryDefenseCannonDamageToAttacker = object.planetaryDefenseCannonDamageToAttacker ?? false;
    message.planetaryDefenseCannonDamage = object.planetaryDefenseCannonDamage ?? 0;
    message.planetaryDefenseCannonDamageDestroyedAttacker = object.planetaryDefenseCannonDamageDestroyedAttacker ??
      false;
    message.attackerPlayerId = object.attackerPlayerId ?? "";
    message.targetPlayerId = object.targetPlayerId ?? "";
    return message;
  },
};

function createBaseEventAttackShotDetail(): EventAttackShotDetail {
  return {
    targetStructId: "",
    targetStructType: 0,
    targetStructLocationType: 0,
    targetStructLocationId: "",
    targetStructOperatingAmbit: 0,
    targetStructSlot: 0,
    evaded: false,
    evadedCause: 0,
    evadedByPlanetaryDefenses: false,
    evadedByPlanetaryDefensesCause: 0,
    blocked: false,
    blockedByStructId: "",
    blockedByStructType: 0,
    blockedByStructLocationType: 0,
    blockedByStructLocationId: "",
    blockedByStructOperatingAmbit: 0,
    blockedByStructSlot: 0,
    blockerDestroyed: false,
    eventAttackDefenderCounterDetail: [],
    damageDealt: 0,
    damageReduction: 0,
    damageReductionCause: 0,
    damage: 0,
    targetCountered: false,
    targetCounteredDamage: 0,
    targetCounterDestroyedAttacker: false,
    targetCounterCause: 0,
    targetDestroyed: false,
    postDestructionDamageToAttacker: false,
    postDestructionDamage: 0,
    postDestructionDamageDestroyedAttacker: false,
    postDestructionDamageCause: 0,
  };
}

export const EventAttackShotDetail: MessageFns<EventAttackShotDetail> = {
  encode(message: EventAttackShotDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetStructId !== "") {
      writer.uint32(10).string(message.targetStructId);
    }
    if (message.targetStructType !== 0) {
      writer.uint32(16).uint64(message.targetStructType);
    }
    if (message.targetStructLocationType !== 0) {
      writer.uint32(24).int32(message.targetStructLocationType);
    }
    if (message.targetStructLocationId !== "") {
      writer.uint32(34).string(message.targetStructLocationId);
    }
    if (message.targetStructOperatingAmbit !== 0) {
      writer.uint32(40).int32(message.targetStructOperatingAmbit);
    }
    if (message.targetStructSlot !== 0) {
      writer.uint32(48).uint64(message.targetStructSlot);
    }
    if (message.evaded !== false) {
      writer.uint32(56).bool(message.evaded);
    }
    if (message.evadedCause !== 0) {
      writer.uint32(64).int32(message.evadedCause);
    }
    if (message.evadedByPlanetaryDefenses !== false) {
      writer.uint32(72).bool(message.evadedByPlanetaryDefenses);
    }
    if (message.evadedByPlanetaryDefensesCause !== 0) {
      writer.uint32(80).int32(message.evadedByPlanetaryDefensesCause);
    }
    if (message.blocked !== false) {
      writer.uint32(88).bool(message.blocked);
    }
    if (message.blockedByStructId !== "") {
      writer.uint32(98).string(message.blockedByStructId);
    }
    if (message.blockedByStructType !== 0) {
      writer.uint32(104).uint64(message.blockedByStructType);
    }
    if (message.blockedByStructLocationType !== 0) {
      writer.uint32(112).int32(message.blockedByStructLocationType);
    }
    if (message.blockedByStructLocationId !== "") {
      writer.uint32(122).string(message.blockedByStructLocationId);
    }
    if (message.blockedByStructOperatingAmbit !== 0) {
      writer.uint32(128).int32(message.blockedByStructOperatingAmbit);
    }
    if (message.blockedByStructSlot !== 0) {
      writer.uint32(136).uint64(message.blockedByStructSlot);
    }
    if (message.blockerDestroyed !== false) {
      writer.uint32(144).bool(message.blockerDestroyed);
    }
    for (const v of message.eventAttackDefenderCounterDetail) {
      EventAttackDefenderCounterDetail.encode(v!, writer.uint32(154).fork()).join();
    }
    if (message.damageDealt !== 0) {
      writer.uint32(160).uint64(message.damageDealt);
    }
    if (message.damageReduction !== 0) {
      writer.uint32(168).uint64(message.damageReduction);
    }
    if (message.damageReductionCause !== 0) {
      writer.uint32(176).int32(message.damageReductionCause);
    }
    if (message.damage !== 0) {
      writer.uint32(184).uint64(message.damage);
    }
    if (message.targetCountered !== false) {
      writer.uint32(192).bool(message.targetCountered);
    }
    if (message.targetCounteredDamage !== 0) {
      writer.uint32(200).uint64(message.targetCounteredDamage);
    }
    if (message.targetCounterDestroyedAttacker !== false) {
      writer.uint32(208).bool(message.targetCounterDestroyedAttacker);
    }
    if (message.targetCounterCause !== 0) {
      writer.uint32(216).int32(message.targetCounterCause);
    }
    if (message.targetDestroyed !== false) {
      writer.uint32(224).bool(message.targetDestroyed);
    }
    if (message.postDestructionDamageToAttacker !== false) {
      writer.uint32(232).bool(message.postDestructionDamageToAttacker);
    }
    if (message.postDestructionDamage !== 0) {
      writer.uint32(240).uint64(message.postDestructionDamage);
    }
    if (message.postDestructionDamageDestroyedAttacker !== false) {
      writer.uint32(248).bool(message.postDestructionDamageDestroyedAttacker);
    }
    if (message.postDestructionDamageCause !== 0) {
      writer.uint32(256).int32(message.postDestructionDamageCause);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttackShotDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttackShotDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.targetStructId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.targetStructType = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.targetStructLocationType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.targetStructLocationId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.targetStructOperatingAmbit = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.targetStructSlot = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.evaded = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.evadedCause = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.evadedByPlanetaryDefenses = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.evadedByPlanetaryDefensesCause = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.blocked = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.blockedByStructId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.blockedByStructType = longToNumber(reader.uint64());
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.blockedByStructLocationType = reader.int32() as any;
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.blockedByStructLocationId = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.blockedByStructOperatingAmbit = reader.int32() as any;
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.blockedByStructSlot = longToNumber(reader.uint64());
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.blockerDestroyed = reader.bool();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.eventAttackDefenderCounterDetail.push(
            EventAttackDefenderCounterDetail.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.damageDealt = longToNumber(reader.uint64());
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.damageReduction = longToNumber(reader.uint64());
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.damageReductionCause = reader.int32() as any;
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.damage = longToNumber(reader.uint64());
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.targetCountered = reader.bool();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.targetCounteredDamage = longToNumber(reader.uint64());
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.targetCounterDestroyedAttacker = reader.bool();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.targetCounterCause = reader.int32() as any;
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.targetDestroyed = reader.bool();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.postDestructionDamageToAttacker = reader.bool();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.postDestructionDamage = longToNumber(reader.uint64());
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.postDestructionDamageDestroyedAttacker = reader.bool();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.postDestructionDamageCause = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttackShotDetail {
    return {
      targetStructId: isSet(object.targetStructId) ? globalThis.String(object.targetStructId) : "",
      targetStructType: isSet(object.targetStructType) ? globalThis.Number(object.targetStructType) : 0,
      targetStructLocationType: isSet(object.targetStructLocationType)
        ? objectTypeFromJSON(object.targetStructLocationType)
        : 0,
      targetStructLocationId: isSet(object.targetStructLocationId)
        ? globalThis.String(object.targetStructLocationId)
        : "",
      targetStructOperatingAmbit: isSet(object.targetStructOperatingAmbit)
        ? ambitFromJSON(object.targetStructOperatingAmbit)
        : 0,
      targetStructSlot: isSet(object.targetStructSlot) ? globalThis.Number(object.targetStructSlot) : 0,
      evaded: isSet(object.evaded) ? globalThis.Boolean(object.evaded) : false,
      evadedCause: isSet(object.evadedCause) ? techUnitDefensesFromJSON(object.evadedCause) : 0,
      evadedByPlanetaryDefenses: isSet(object.evadedByPlanetaryDefenses)
        ? globalThis.Boolean(object.evadedByPlanetaryDefenses)
        : false,
      evadedByPlanetaryDefensesCause: isSet(object.evadedByPlanetaryDefensesCause)
        ? techPlanetaryDefensesFromJSON(object.evadedByPlanetaryDefensesCause)
        : 0,
      blocked: isSet(object.blocked) ? globalThis.Boolean(object.blocked) : false,
      blockedByStructId: isSet(object.blockedByStructId) ? globalThis.String(object.blockedByStructId) : "",
      blockedByStructType: isSet(object.blockedByStructType) ? globalThis.Number(object.blockedByStructType) : 0,
      blockedByStructLocationType: isSet(object.blockedByStructLocationType)
        ? objectTypeFromJSON(object.blockedByStructLocationType)
        : 0,
      blockedByStructLocationId: isSet(object.blockedByStructLocationId)
        ? globalThis.String(object.blockedByStructLocationId)
        : "",
      blockedByStructOperatingAmbit: isSet(object.blockedByStructOperatingAmbit)
        ? ambitFromJSON(object.blockedByStructOperatingAmbit)
        : 0,
      blockedByStructSlot: isSet(object.blockedByStructSlot) ? globalThis.Number(object.blockedByStructSlot) : 0,
      blockerDestroyed: isSet(object.blockerDestroyed) ? globalThis.Boolean(object.blockerDestroyed) : false,
      eventAttackDefenderCounterDetail: globalThis.Array.isArray(object?.eventAttackDefenderCounterDetail)
        ? object.eventAttackDefenderCounterDetail.map((e: any) => EventAttackDefenderCounterDetail.fromJSON(e))
        : [],
      damageDealt: isSet(object.damageDealt) ? globalThis.Number(object.damageDealt) : 0,
      damageReduction: isSet(object.damageReduction) ? globalThis.Number(object.damageReduction) : 0,
      damageReductionCause: isSet(object.damageReductionCause)
        ? techUnitDefensesFromJSON(object.damageReductionCause)
        : 0,
      damage: isSet(object.damage) ? globalThis.Number(object.damage) : 0,
      targetCountered: isSet(object.targetCountered) ? globalThis.Boolean(object.targetCountered) : false,
      targetCounteredDamage: isSet(object.targetCounteredDamage) ? globalThis.Number(object.targetCounteredDamage) : 0,
      targetCounterDestroyedAttacker: isSet(object.targetCounterDestroyedAttacker)
        ? globalThis.Boolean(object.targetCounterDestroyedAttacker)
        : false,
      targetCounterCause: isSet(object.targetCounterCause) ? techPassiveWeaponryFromJSON(object.targetCounterCause) : 0,
      targetDestroyed: isSet(object.targetDestroyed) ? globalThis.Boolean(object.targetDestroyed) : false,
      postDestructionDamageToAttacker: isSet(object.postDestructionDamageToAttacker)
        ? globalThis.Boolean(object.postDestructionDamageToAttacker)
        : false,
      postDestructionDamage: isSet(object.postDestructionDamage) ? globalThis.Number(object.postDestructionDamage) : 0,
      postDestructionDamageDestroyedAttacker: isSet(object.postDestructionDamageDestroyedAttacker)
        ? globalThis.Boolean(object.postDestructionDamageDestroyedAttacker)
        : false,
      postDestructionDamageCause: isSet(object.postDestructionDamageCause)
        ? techPassiveWeaponryFromJSON(object.postDestructionDamageCause)
        : 0,
    };
  },

  toJSON(message: EventAttackShotDetail): unknown {
    const obj: any = {};
    if (message.targetStructId !== "") {
      obj.targetStructId = message.targetStructId;
    }
    if (message.targetStructType !== 0) {
      obj.targetStructType = Math.round(message.targetStructType);
    }
    if (message.targetStructLocationType !== 0) {
      obj.targetStructLocationType = objectTypeToJSON(message.targetStructLocationType);
    }
    if (message.targetStructLocationId !== "") {
      obj.targetStructLocationId = message.targetStructLocationId;
    }
    if (message.targetStructOperatingAmbit !== 0) {
      obj.targetStructOperatingAmbit = ambitToJSON(message.targetStructOperatingAmbit);
    }
    if (message.targetStructSlot !== 0) {
      obj.targetStructSlot = Math.round(message.targetStructSlot);
    }
    if (message.evaded !== false) {
      obj.evaded = message.evaded;
    }
    if (message.evadedCause !== 0) {
      obj.evadedCause = techUnitDefensesToJSON(message.evadedCause);
    }
    if (message.evadedByPlanetaryDefenses !== false) {
      obj.evadedByPlanetaryDefenses = message.evadedByPlanetaryDefenses;
    }
    if (message.evadedByPlanetaryDefensesCause !== 0) {
      obj.evadedByPlanetaryDefensesCause = techPlanetaryDefensesToJSON(message.evadedByPlanetaryDefensesCause);
    }
    if (message.blocked !== false) {
      obj.blocked = message.blocked;
    }
    if (message.blockedByStructId !== "") {
      obj.blockedByStructId = message.blockedByStructId;
    }
    if (message.blockedByStructType !== 0) {
      obj.blockedByStructType = Math.round(message.blockedByStructType);
    }
    if (message.blockedByStructLocationType !== 0) {
      obj.blockedByStructLocationType = objectTypeToJSON(message.blockedByStructLocationType);
    }
    if (message.blockedByStructLocationId !== "") {
      obj.blockedByStructLocationId = message.blockedByStructLocationId;
    }
    if (message.blockedByStructOperatingAmbit !== 0) {
      obj.blockedByStructOperatingAmbit = ambitToJSON(message.blockedByStructOperatingAmbit);
    }
    if (message.blockedByStructSlot !== 0) {
      obj.blockedByStructSlot = Math.round(message.blockedByStructSlot);
    }
    if (message.blockerDestroyed !== false) {
      obj.blockerDestroyed = message.blockerDestroyed;
    }
    if (message.eventAttackDefenderCounterDetail?.length) {
      obj.eventAttackDefenderCounterDetail = message.eventAttackDefenderCounterDetail.map((e) =>
        EventAttackDefenderCounterDetail.toJSON(e)
      );
    }
    if (message.damageDealt !== 0) {
      obj.damageDealt = Math.round(message.damageDealt);
    }
    if (message.damageReduction !== 0) {
      obj.damageReduction = Math.round(message.damageReduction);
    }
    if (message.damageReductionCause !== 0) {
      obj.damageReductionCause = techUnitDefensesToJSON(message.damageReductionCause);
    }
    if (message.damage !== 0) {
      obj.damage = Math.round(message.damage);
    }
    if (message.targetCountered !== false) {
      obj.targetCountered = message.targetCountered;
    }
    if (message.targetCounteredDamage !== 0) {
      obj.targetCounteredDamage = Math.round(message.targetCounteredDamage);
    }
    if (message.targetCounterDestroyedAttacker !== false) {
      obj.targetCounterDestroyedAttacker = message.targetCounterDestroyedAttacker;
    }
    if (message.targetCounterCause !== 0) {
      obj.targetCounterCause = techPassiveWeaponryToJSON(message.targetCounterCause);
    }
    if (message.targetDestroyed !== false) {
      obj.targetDestroyed = message.targetDestroyed;
    }
    if (message.postDestructionDamageToAttacker !== false) {
      obj.postDestructionDamageToAttacker = message.postDestructionDamageToAttacker;
    }
    if (message.postDestructionDamage !== 0) {
      obj.postDestructionDamage = Math.round(message.postDestructionDamage);
    }
    if (message.postDestructionDamageDestroyedAttacker !== false) {
      obj.postDestructionDamageDestroyedAttacker = message.postDestructionDamageDestroyedAttacker;
    }
    if (message.postDestructionDamageCause !== 0) {
      obj.postDestructionDamageCause = techPassiveWeaponryToJSON(message.postDestructionDamageCause);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttackShotDetail>, I>>(base?: I): EventAttackShotDetail {
    return EventAttackShotDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttackShotDetail>, I>>(object: I): EventAttackShotDetail {
    const message = createBaseEventAttackShotDetail();
    message.targetStructId = object.targetStructId ?? "";
    message.targetStructType = object.targetStructType ?? 0;
    message.targetStructLocationType = object.targetStructLocationType ?? 0;
    message.targetStructLocationId = object.targetStructLocationId ?? "";
    message.targetStructOperatingAmbit = object.targetStructOperatingAmbit ?? 0;
    message.targetStructSlot = object.targetStructSlot ?? 0;
    message.evaded = object.evaded ?? false;
    message.evadedCause = object.evadedCause ?? 0;
    message.evadedByPlanetaryDefenses = object.evadedByPlanetaryDefenses ?? false;
    message.evadedByPlanetaryDefensesCause = object.evadedByPlanetaryDefensesCause ?? 0;
    message.blocked = object.blocked ?? false;
    message.blockedByStructId = object.blockedByStructId ?? "";
    message.blockedByStructType = object.blockedByStructType ?? 0;
    message.blockedByStructLocationType = object.blockedByStructLocationType ?? 0;
    message.blockedByStructLocationId = object.blockedByStructLocationId ?? "";
    message.blockedByStructOperatingAmbit = object.blockedByStructOperatingAmbit ?? 0;
    message.blockedByStructSlot = object.blockedByStructSlot ?? 0;
    message.blockerDestroyed = object.blockerDestroyed ?? false;
    message.eventAttackDefenderCounterDetail =
      object.eventAttackDefenderCounterDetail?.map((e) => EventAttackDefenderCounterDetail.fromPartial(e)) || [];
    message.damageDealt = object.damageDealt ?? 0;
    message.damageReduction = object.damageReduction ?? 0;
    message.damageReductionCause = object.damageReductionCause ?? 0;
    message.damage = object.damage ?? 0;
    message.targetCountered = object.targetCountered ?? false;
    message.targetCounteredDamage = object.targetCounteredDamage ?? 0;
    message.targetCounterDestroyedAttacker = object.targetCounterDestroyedAttacker ?? false;
    message.targetCounterCause = object.targetCounterCause ?? 0;
    message.targetDestroyed = object.targetDestroyed ?? false;
    message.postDestructionDamageToAttacker = object.postDestructionDamageToAttacker ?? false;
    message.postDestructionDamage = object.postDestructionDamage ?? 0;
    message.postDestructionDamageDestroyedAttacker = object.postDestructionDamageDestroyedAttacker ?? false;
    message.postDestructionDamageCause = object.postDestructionDamageCause ?? 0;
    return message;
  },
};

function createBaseEventAttackDefenderCounterDetail(): EventAttackDefenderCounterDetail {
  return {
    counterByStructId: "",
    counterByStructType: 0,
    counterByStructLocationType: 0,
    counterByStructLocationId: "",
    counterByStructOperatingAmbit: 0,
    counterByStructSlot: 0,
    counterDamage: 0,
    counterDestroyedAttacker: false,
  };
}

export const EventAttackDefenderCounterDetail: MessageFns<EventAttackDefenderCounterDetail> = {
  encode(message: EventAttackDefenderCounterDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.counterByStructId !== "") {
      writer.uint32(10).string(message.counterByStructId);
    }
    if (message.counterByStructType !== 0) {
      writer.uint32(16).uint64(message.counterByStructType);
    }
    if (message.counterByStructLocationType !== 0) {
      writer.uint32(24).int32(message.counterByStructLocationType);
    }
    if (message.counterByStructLocationId !== "") {
      writer.uint32(34).string(message.counterByStructLocationId);
    }
    if (message.counterByStructOperatingAmbit !== 0) {
      writer.uint32(40).int32(message.counterByStructOperatingAmbit);
    }
    if (message.counterByStructSlot !== 0) {
      writer.uint32(48).uint64(message.counterByStructSlot);
    }
    if (message.counterDamage !== 0) {
      writer.uint32(56).uint64(message.counterDamage);
    }
    if (message.counterDestroyedAttacker !== false) {
      writer.uint32(64).bool(message.counterDestroyedAttacker);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAttackDefenderCounterDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAttackDefenderCounterDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.counterByStructId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.counterByStructType = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.counterByStructLocationType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.counterByStructLocationId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.counterByStructOperatingAmbit = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.counterByStructSlot = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.counterDamage = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.counterDestroyedAttacker = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAttackDefenderCounterDetail {
    return {
      counterByStructId: isSet(object.counterByStructId) ? globalThis.String(object.counterByStructId) : "",
      counterByStructType: isSet(object.counterByStructType) ? globalThis.Number(object.counterByStructType) : 0,
      counterByStructLocationType: isSet(object.counterByStructLocationType)
        ? objectTypeFromJSON(object.counterByStructLocationType)
        : 0,
      counterByStructLocationId: isSet(object.counterByStructLocationId)
        ? globalThis.String(object.counterByStructLocationId)
        : "",
      counterByStructOperatingAmbit: isSet(object.counterByStructOperatingAmbit)
        ? ambitFromJSON(object.counterByStructOperatingAmbit)
        : 0,
      counterByStructSlot: isSet(object.counterByStructSlot) ? globalThis.Number(object.counterByStructSlot) : 0,
      counterDamage: isSet(object.counterDamage) ? globalThis.Number(object.counterDamage) : 0,
      counterDestroyedAttacker: isSet(object.counterDestroyedAttacker)
        ? globalThis.Boolean(object.counterDestroyedAttacker)
        : false,
    };
  },

  toJSON(message: EventAttackDefenderCounterDetail): unknown {
    const obj: any = {};
    if (message.counterByStructId !== "") {
      obj.counterByStructId = message.counterByStructId;
    }
    if (message.counterByStructType !== 0) {
      obj.counterByStructType = Math.round(message.counterByStructType);
    }
    if (message.counterByStructLocationType !== 0) {
      obj.counterByStructLocationType = objectTypeToJSON(message.counterByStructLocationType);
    }
    if (message.counterByStructLocationId !== "") {
      obj.counterByStructLocationId = message.counterByStructLocationId;
    }
    if (message.counterByStructOperatingAmbit !== 0) {
      obj.counterByStructOperatingAmbit = ambitToJSON(message.counterByStructOperatingAmbit);
    }
    if (message.counterByStructSlot !== 0) {
      obj.counterByStructSlot = Math.round(message.counterByStructSlot);
    }
    if (message.counterDamage !== 0) {
      obj.counterDamage = Math.round(message.counterDamage);
    }
    if (message.counterDestroyedAttacker !== false) {
      obj.counterDestroyedAttacker = message.counterDestroyedAttacker;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAttackDefenderCounterDetail>, I>>(
    base?: I,
  ): EventAttackDefenderCounterDetail {
    return EventAttackDefenderCounterDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAttackDefenderCounterDetail>, I>>(
    object: I,
  ): EventAttackDefenderCounterDetail {
    const message = createBaseEventAttackDefenderCounterDetail();
    message.counterByStructId = object.counterByStructId ?? "";
    message.counterByStructType = object.counterByStructType ?? 0;
    message.counterByStructLocationType = object.counterByStructLocationType ?? 0;
    message.counterByStructLocationId = object.counterByStructLocationId ?? "";
    message.counterByStructOperatingAmbit = object.counterByStructOperatingAmbit ?? 0;
    message.counterByStructSlot = object.counterByStructSlot ?? 0;
    message.counterDamage = object.counterDamage ?? 0;
    message.counterDestroyedAttacker = object.counterDestroyedAttacker ?? false;
    return message;
  },
};

function createBaseEventRaid(): EventRaid {
  return { eventRaidDetail: undefined };
}

export const EventRaid: MessageFns<EventRaid> = {
  encode(message: EventRaid, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventRaidDetail !== undefined) {
      EventRaidDetail.encode(message.eventRaidDetail, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventRaid {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventRaid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventRaidDetail = EventRaidDetail.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventRaid {
    return {
      eventRaidDetail: isSet(object.eventRaidDetail) ? EventRaidDetail.fromJSON(object.eventRaidDetail) : undefined,
    };
  },

  toJSON(message: EventRaid): unknown {
    const obj: any = {};
    if (message.eventRaidDetail !== undefined) {
      obj.eventRaidDetail = EventRaidDetail.toJSON(message.eventRaidDetail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventRaid>, I>>(base?: I): EventRaid {
    return EventRaid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventRaid>, I>>(object: I): EventRaid {
    const message = createBaseEventRaid();
    message.eventRaidDetail = (object.eventRaidDetail !== undefined && object.eventRaidDetail !== null)
      ? EventRaidDetail.fromPartial(object.eventRaidDetail)
      : undefined;
    return message;
  },
};

function createBaseEventRaidDetail(): EventRaidDetail {
  return { fleetId: "", planetId: "", status: 0 };
}

export const EventRaidDetail: MessageFns<EventRaidDetail> = {
  encode(message: EventRaidDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fleetId !== "") {
      writer.uint32(10).string(message.fleetId);
    }
    if (message.planetId !== "") {
      writer.uint32(18).string(message.planetId);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventRaidDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventRaidDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fleetId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.planetId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventRaidDetail {
    return {
      fleetId: isSet(object.fleetId) ? globalThis.String(object.fleetId) : "",
      planetId: isSet(object.planetId) ? globalThis.String(object.planetId) : "",
      status: isSet(object.status) ? raidStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: EventRaidDetail): unknown {
    const obj: any = {};
    if (message.fleetId !== "") {
      obj.fleetId = message.fleetId;
    }
    if (message.planetId !== "") {
      obj.planetId = message.planetId;
    }
    if (message.status !== 0) {
      obj.status = raidStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventRaidDetail>, I>>(base?: I): EventRaidDetail {
    return EventRaidDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventRaidDetail>, I>>(object: I): EventRaidDetail {
    const message = createBaseEventRaidDetail();
    message.fleetId = object.fleetId ?? "";
    message.planetId = object.planetId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
