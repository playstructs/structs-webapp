// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: structs/structs/fleet.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  fleetStatus,
  fleetStatusFromJSON,
  fleetStatusToJSON,
  objectType,
  objectTypeFromJSON,
  objectTypeToJSON,
} from "./keys";

export const protobufPackage = "structs.structs";

export interface Fleet {
  id: string;
  owner: string;
  locationType: objectType;
  locationId: string;
  status: fleetStatus;
  /** Towards Planet */
  locationListForward: string;
  /** Towards End of List */
  locationListBackward: string;
  space: string[];
  air: string[];
  land: string[];
  water: string[];
  spaceSlots: number;
  airSlots: number;
  landSlots: number;
  waterSlots: number;
  commandStruct: string;
}

export interface FleetAttributeRecord {
  attributeId: string;
  value: number;
}

function createBaseFleet(): Fleet {
  return {
    id: "",
    owner: "",
    locationType: 0,
    locationId: "",
    status: 0,
    locationListForward: "",
    locationListBackward: "",
    space: [],
    air: [],
    land: [],
    water: [],
    spaceSlots: 0,
    airSlots: 0,
    landSlots: 0,
    waterSlots: 0,
    commandStruct: "",
  };
}

export const Fleet: MessageFns<Fleet> = {
  encode(message: Fleet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.locationType !== 0) {
      writer.uint32(24).int32(message.locationType);
    }
    if (message.locationId !== "") {
      writer.uint32(34).string(message.locationId);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.locationListForward !== "") {
      writer.uint32(50).string(message.locationListForward);
    }
    if (message.locationListBackward !== "") {
      writer.uint32(58).string(message.locationListBackward);
    }
    for (const v of message.space) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.air) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.land) {
      writer.uint32(82).string(v!);
    }
    for (const v of message.water) {
      writer.uint32(90).string(v!);
    }
    if (message.spaceSlots !== 0) {
      writer.uint32(96).uint64(message.spaceSlots);
    }
    if (message.airSlots !== 0) {
      writer.uint32(104).uint64(message.airSlots);
    }
    if (message.landSlots !== 0) {
      writer.uint32(112).uint64(message.landSlots);
    }
    if (message.waterSlots !== 0) {
      writer.uint32(120).uint64(message.waterSlots);
    }
    if (message.commandStruct !== "") {
      writer.uint32(130).string(message.commandStruct);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fleet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFleet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.locationType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.locationId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.locationListForward = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.locationListBackward = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.space.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.air.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.land.push(reader.string());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.water.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.spaceSlots = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.airSlots = longToNumber(reader.uint64());
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.landSlots = longToNumber(reader.uint64());
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.waterSlots = longToNumber(reader.uint64());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.commandStruct = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fleet {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      locationType: isSet(object.locationType) ? objectTypeFromJSON(object.locationType) : 0,
      locationId: isSet(object.locationId) ? globalThis.String(object.locationId) : "",
      status: isSet(object.status) ? fleetStatusFromJSON(object.status) : 0,
      locationListForward: isSet(object.locationListForward) ? globalThis.String(object.locationListForward) : "",
      locationListBackward: isSet(object.locationListBackward) ? globalThis.String(object.locationListBackward) : "",
      space: globalThis.Array.isArray(object?.space) ? object.space.map((e: any) => globalThis.String(e)) : [],
      air: globalThis.Array.isArray(object?.air) ? object.air.map((e: any) => globalThis.String(e)) : [],
      land: globalThis.Array.isArray(object?.land) ? object.land.map((e: any) => globalThis.String(e)) : [],
      water: globalThis.Array.isArray(object?.water) ? object.water.map((e: any) => globalThis.String(e)) : [],
      spaceSlots: isSet(object.spaceSlots) ? globalThis.Number(object.spaceSlots) : 0,
      airSlots: isSet(object.airSlots) ? globalThis.Number(object.airSlots) : 0,
      landSlots: isSet(object.landSlots) ? globalThis.Number(object.landSlots) : 0,
      waterSlots: isSet(object.waterSlots) ? globalThis.Number(object.waterSlots) : 0,
      commandStruct: isSet(object.commandStruct) ? globalThis.String(object.commandStruct) : "",
    };
  },

  toJSON(message: Fleet): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.locationType !== 0) {
      obj.locationType = objectTypeToJSON(message.locationType);
    }
    if (message.locationId !== "") {
      obj.locationId = message.locationId;
    }
    if (message.status !== 0) {
      obj.status = fleetStatusToJSON(message.status);
    }
    if (message.locationListForward !== "") {
      obj.locationListForward = message.locationListForward;
    }
    if (message.locationListBackward !== "") {
      obj.locationListBackward = message.locationListBackward;
    }
    if (message.space?.length) {
      obj.space = message.space;
    }
    if (message.air?.length) {
      obj.air = message.air;
    }
    if (message.land?.length) {
      obj.land = message.land;
    }
    if (message.water?.length) {
      obj.water = message.water;
    }
    if (message.spaceSlots !== 0) {
      obj.spaceSlots = Math.round(message.spaceSlots);
    }
    if (message.airSlots !== 0) {
      obj.airSlots = Math.round(message.airSlots);
    }
    if (message.landSlots !== 0) {
      obj.landSlots = Math.round(message.landSlots);
    }
    if (message.waterSlots !== 0) {
      obj.waterSlots = Math.round(message.waterSlots);
    }
    if (message.commandStruct !== "") {
      obj.commandStruct = message.commandStruct;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Fleet>, I>>(base?: I): Fleet {
    return Fleet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Fleet>, I>>(object: I): Fleet {
    const message = createBaseFleet();
    message.id = object.id ?? "";
    message.owner = object.owner ?? "";
    message.locationType = object.locationType ?? 0;
    message.locationId = object.locationId ?? "";
    message.status = object.status ?? 0;
    message.locationListForward = object.locationListForward ?? "";
    message.locationListBackward = object.locationListBackward ?? "";
    message.space = object.space?.map((e) => e) || [];
    message.air = object.air?.map((e) => e) || [];
    message.land = object.land?.map((e) => e) || [];
    message.water = object.water?.map((e) => e) || [];
    message.spaceSlots = object.spaceSlots ?? 0;
    message.airSlots = object.airSlots ?? 0;
    message.landSlots = object.landSlots ?? 0;
    message.waterSlots = object.waterSlots ?? 0;
    message.commandStruct = object.commandStruct ?? "";
    return message;
  },
};

function createBaseFleetAttributeRecord(): FleetAttributeRecord {
  return { attributeId: "", value: 0 };
}

export const FleetAttributeRecord: MessageFns<FleetAttributeRecord> = {
  encode(message: FleetAttributeRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attributeId !== "") {
      writer.uint32(10).string(message.attributeId);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FleetAttributeRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFleetAttributeRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attributeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FleetAttributeRecord {
    return {
      attributeId: isSet(object.attributeId) ? globalThis.String(object.attributeId) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: FleetAttributeRecord): unknown {
    const obj: any = {};
    if (message.attributeId !== "") {
      obj.attributeId = message.attributeId;
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FleetAttributeRecord>, I>>(base?: I): FleetAttributeRecord {
    return FleetAttributeRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FleetAttributeRecord>, I>>(object: I): FleetAttributeRecord {
    const message = createBaseFleetAttributeRecord();
    message.attributeId = object.attributeId ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
