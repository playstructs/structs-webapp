// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: structs/structs/allocation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { allocationType, allocationTypeFromJSON, allocationTypeToJSON } from "./keys";

export const protobufPackage = "structs.structs";

export interface Allocation {
  id: string;
  type: allocationType;
  /** Core allocation details */
  sourceObjectId: string;
  index: number;
  destinationId: string;
  /** Who does this currently belong to */
  creator: string;
  controller: string;
  /** Locking will be needed for IBC */
  locked: boolean;
}

function createBaseAllocation(): Allocation {
  return {
    id: "",
    type: 0,
    sourceObjectId: "",
    index: 0,
    destinationId: "",
    creator: "",
    controller: "",
    locked: false,
  };
}

export const Allocation: MessageFns<Allocation> = {
  encode(message: Allocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.sourceObjectId !== "") {
      writer.uint32(26).string(message.sourceObjectId);
    }
    if (message.index !== 0) {
      writer.uint32(32).uint64(message.index);
    }
    if (message.destinationId !== "") {
      writer.uint32(42).string(message.destinationId);
    }
    if (message.creator !== "") {
      writer.uint32(50).string(message.creator);
    }
    if (message.controller !== "") {
      writer.uint32(58).string(message.controller);
    }
    if (message.locked !== false) {
      writer.uint32(64).bool(message.locked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Allocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceObjectId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.index = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.controller = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.locked = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Allocation {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? allocationTypeFromJSON(object.type) : 0,
      sourceObjectId: isSet(object.sourceObjectId) ? globalThis.String(object.sourceObjectId) : "",
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      controller: isSet(object.controller) ? globalThis.String(object.controller) : "",
      locked: isSet(object.locked) ? globalThis.Boolean(object.locked) : false,
    };
  },

  toJSON(message: Allocation): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== 0) {
      obj.type = allocationTypeToJSON(message.type);
    }
    if (message.sourceObjectId !== "") {
      obj.sourceObjectId = message.sourceObjectId;
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.controller !== "") {
      obj.controller = message.controller;
    }
    if (message.locked !== false) {
      obj.locked = message.locked;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Allocation>, I>>(base?: I): Allocation {
    return Allocation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Allocation>, I>>(object: I): Allocation {
    const message = createBaseAllocation();
    message.id = object.id ?? "";
    message.type = object.type ?? 0;
    message.sourceObjectId = object.sourceObjectId ?? "";
    message.index = object.index ?? 0;
    message.destinationId = object.destinationId ?? "";
    message.creator = object.creator ?? "";
    message.controller = object.controller ?? "";
    message.locked = object.locked ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
